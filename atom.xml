<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>s0m1ng</title>
  
  <subtitle>二进制学习中</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-10-31T12:52:31.203Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>s0m1ng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2025羊城杯PLUS与pyd逆向</title>
    <link href="http://example.com/2025/10/30/ctf%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84misc/2025%E7%BE%8A%E5%9F%8E%E6%9D%AFPLUS/"/>
    <id>http://example.com/2025/10/30/ctf%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84misc/2025%E7%BE%8A%E5%9F%8E%E6%9D%AFPLUS/</id>
    <published>2025-10-29T16:00:00.000Z</published>
    <updated>2025-10-31T12:52:31.203Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>通过一道例题学习一下pyd逆向，pyd就是动态链接库，和dll一样，在linux平台以.so命名</p><h1 id="做题流程："><a href="#做题流程：" class="headerlink" title="做题流程："></a>做题流程：</h1><h2 id="获取方法："><a href="#获取方法：" class="headerlink" title="获取方法："></a>获取方法：</h2><p>先用die打开pyd看py编译版本，然后在命令行对应环境运行python交互环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(py39) C:\Users\Lenovo\OneDrive\Desktop\chal&gt;python</span><br><span class="line">Python 3.9.23 | packaged by conda-forge | (main, Jun  4 2025, 17:49:16) [MSC v.1929 64 bit (AMD64)] on win32</span><br><span class="line">Type <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> or <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; import init</span><br><span class="line">&gt;&gt;&gt; x=<span class="built_in">dir</span>(init)</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(x)</span><br><span class="line">[<span class="string">&#x27;__builtins__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__file__&#x27;</span>, <span class="string">&#x27;__loader__&#x27;</span>, <span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__package__&#x27;</span>, <span class="string">&#x27;__spec__&#x27;</span>, <span class="string">&#x27;__test__&#x27;</span>, <span class="string">&#x27;a2b_hex&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;exit&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;p&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>先用dir看一下导入的init.pyd都有什么方法，前面以”____”开头和结尾的是python环境内置方法，我们只需要关注a2b_hex，b，c，e，exec，exit，i，int，m，p就可以</p><h2 id="获取pyd方法源码"><a href="#获取pyd方法源码" class="headerlink" title="获取pyd方法源码"></a>获取pyd方法源码</h2><p>我们可以用inspect这个模块来获取方法的源码和属性，但只有def 方式声明的函数可以出现源码，如果是cpython方式编译的源码就会报错，只能另做分析</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">inspect_extract.py</span></span><br><span class="line"><span class="string">自动提取模块中可读取的源码，正常显示换行，并为每个对象生成独立源码文件。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> textwrap <span class="keyword">import</span> indent</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">safe_get_source</span>(<span class="params">obj</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>, inspect.getsource(obj)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>, <span class="string">f&quot;<span class="subst">&#123;e.__class__.__name__&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">safe_getfile</span>(<span class="params">obj</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> inspect.getfile(obj)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">safe_signature</span>(<span class="params">obj</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">callable</span>(obj):</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">str</span>(inspect.signature(obj))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;&lt;签名不可用: <span class="subst">&#123;e&#125;</span>&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">summarize_doc</span>(<span class="params">doc, limit=<span class="number">200</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> doc:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    doc = doc.strip().replace(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(doc) &gt; limit:</span><br><span class="line">        <span class="keyword">return</span> doc[:limit] + <span class="string">&quot;...\n[文档省略]&quot;</span></span><br><span class="line">    <span class="keyword">return</span> doc</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sanitize_filename</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> <span class="string">&quot;\\/:*?\&quot;&lt;&gt;|&quot;</span>:</span><br><span class="line">        name = name.replace(ch, <span class="string">&quot;_&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> name</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inspect_member</span>(<span class="params">name, member, output_dir</span>):</span><br><span class="line">    info = &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: name,</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="built_in">type</span>(member).__name__,</span><br><span class="line">        <span class="string">&quot;signature&quot;</span>: safe_signature(member),</span><br><span class="line">        <span class="string">&quot;file&quot;</span>: safe_getfile(member),</span><br><span class="line">        <span class="string">&quot;doc&quot;</span>: summarize_doc(inspect.getdoc(member)),</span><br><span class="line">        <span class="string">&quot;source_saved&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">        <span class="string">&quot;source_file&quot;</span>: <span class="literal">None</span>,</span><br><span class="line">        <span class="string">&quot;note&quot;</span>: <span class="literal">None</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ok, src = safe_get_source(member)</span><br><span class="line">    <span class="keyword">if</span> ok:</span><br><span class="line">        filename = sanitize_filename(name) + <span class="string">&quot;.py&quot;</span></span><br><span class="line">        filepath = os.path.join(output_dir, filename)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filepath, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(<span class="string">f&quot;# Source for <span class="subst">&#123;name&#125;</span>\n\n&quot;</span>)</span><br><span class="line">            f.write(src)</span><br><span class="line">        info[<span class="string">&quot;source_saved&quot;</span>] = <span class="literal">True</span></span><br><span class="line">        info[<span class="string">&quot;source_file&quot;</span>] = filepath</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>: 源码已保存到 <span class="subst">&#123;filepath&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        info[<span class="string">&quot;note&quot;</span>] = <span class="string">f&quot;无法获取源码: <span class="subst">&#123;src&#125;</span>&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>: <span class="subst">&#123;src&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> info</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inspect_module</span>(<span class="params">mod_name</span>):</span><br><span class="line">    module = importlib.import_module(mod_name)</span><br><span class="line">    members = inspect.getmembers(module)</span><br><span class="line"></span><br><span class="line">    output_dir = <span class="string">f&quot;<span class="subst">&#123;mod_name&#125;</span>_source&quot;</span></span><br><span class="line">    os.makedirs(output_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    results = []</span><br><span class="line">    <span class="keyword">for</span> name, member <span class="keyword">in</span> members:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            info = inspect_member(name, member, output_dir)</span><br><span class="line">            results.append(info)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            results.append(&#123;</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: name,</span><br><span class="line">                <span class="string">&quot;error&quot;</span>: <span class="string">f&quot;<span class="subst">&#123;e.__class__.__name__&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span>,</span><br><span class="line">                <span class="string">&quot;traceback&quot;</span>: traceback.format_exc()</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">    json_path = <span class="string">f&quot;<span class="subst">&#123;mod_name&#125;</span>_inspect.json&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(json_path, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json.dump(results, f, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n所有源码已保存到文件夹: <span class="subst">&#123;output_dir&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;详细信息已写入: <span class="subst">&#123;json_path&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;用法: python inspect_extract.py &lt;模块名&gt;&quot;</span>) </span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line">    inspect_module(sys.argv[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>然后发现只有三个方法可以看源码，</p><p>b方法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Source for b</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b64encode</span>(<span class="params">s, altchars=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Encode the bytes-like object s using Base64 and return a bytes object.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Optional altchars should be a byte string of length 2 which specifies an</span></span><br><span class="line"><span class="string">    alternative alphabet for the &#x27;+&#x27; and &#x27;/&#x27; characters.  This allows an</span></span><br><span class="line"><span class="string">    application to e.g. generate url or filesystem safe Base64 strings.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    encoded = binascii.b2a_base64(s, newline=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">if</span> altchars <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(altchars) == <span class="number">2</span>, <span class="built_in">repr</span>(altchars)</span><br><span class="line">        <span class="keyword">return</span> encoded.translate(<span class="built_in">bytes</span>.maketrans(<span class="string">b&#x27;+/&#x27;</span>, altchars))</span><br><span class="line">    <span class="keyword">return</span> encoded</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>c方法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Source for c</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Uc</span>(<span class="title class_ inherited__">RegStateManager</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Unicorn Engine class.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__is_compliant</span>() -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Checks whether Unicorn binding version complies with Unicorn library.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns: `True` if versions match, `False` otherwise</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        uc_maj, uc_min, _ = uc_version()</span><br><span class="line">        bnd_maj, bnd_min, _ = version_bind()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (uc_maj, uc_min) == (bnd_maj, bnd_min)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, arch: <span class="built_in">int</span>, mode: <span class="built_in">int</span>, cpu: <span class="type">Optional</span>[<span class="built_in">int</span>] = <span class="literal">None</span></span>):</span><br><span class="line">        <span class="comment"># verify version compatibility with the core before doing anything</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> Uc.__is_compliant():</span><br><span class="line">            <span class="keyword">raise</span> UcError(uc.UC_ERR_VERSION)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">import</span> importlib</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__uc_subclass</span>(<span class="params">pkgname: <span class="built_in">str</span>, clsname: <span class="built_in">str</span></span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;Use a lazy subclass instantiation to avoid importing unnecessary arch</span></span><br><span class="line"><span class="string">            classes.</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">__wrapped</span>() -&gt; <span class="type">Type</span>[Uc]:</span><br><span class="line">                archmod = importlib.import_module(<span class="string">f&#x27;.arch.<span class="subst">&#123;pkgname&#125;</span>&#x27;</span>, <span class="string">&#x27;unicorn.unicorn_py3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">getattr</span>(archmod, clsname)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> __wrapped</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__uc_generic</span>():</span><br><span class="line">            <span class="keyword">return</span> Uc</span><br><span class="line"></span><br><span class="line">        wrapped: <span class="type">Callable</span>[[], <span class="type">Type</span>[Uc]] = &#123;</span><br><span class="line">            uc.UC_ARCH_ARM     : __uc_subclass(<span class="string">&#x27;arm&#x27;</span>, <span class="string">&#x27;UcAArch32&#x27;</span>),</span><br><span class="line">            uc.UC_ARCH_ARM64   : __uc_subclass(<span class="string">&#x27;arm64&#x27;</span>, <span class="string">&#x27;UcAArch64&#x27;</span>),</span><br><span class="line">            uc.UC_ARCH_MIPS    : __uc_generic,</span><br><span class="line">            uc.UC_ARCH_X86     : __uc_subclass(<span class="string">&#x27;intel&#x27;</span>, <span class="string">&#x27;UcIntel&#x27;</span>),</span><br><span class="line">            uc.UC_ARCH_PPC     : __uc_generic,</span><br><span class="line">            uc.UC_ARCH_SPARC   : __uc_generic,</span><br><span class="line">            uc.UC_ARCH_M68K    : __uc_generic,</span><br><span class="line">            uc.UC_ARCH_RISCV   : __uc_generic,</span><br><span class="line">            uc.UC_ARCH_S390X   : __uc_generic,</span><br><span class="line">            uc.UC_ARCH_TRICORE : __uc_generic</span><br><span class="line">        &#125;[arch]</span><br><span class="line"></span><br><span class="line">        subclass = wrapped()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># return the appropriate unicorn subclass type</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>(Uc, cls).__new__(subclass)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, arch: <span class="built_in">int</span>, mode: <span class="built_in">int</span>, cpu: <span class="type">Optional</span>[<span class="built_in">int</span>] = <span class="literal">None</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Initialize a Unicorn engine instance.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            arch: emulated architecture identifier (see UC_ARCH_* constants)</span></span><br><span class="line"><span class="string">            mode: emulated processor mode (see UC_MODE_* constants)</span></span><br><span class="line"><span class="string">            cpu: emulated cpu model (see UC_CPU_* constants) [optional]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._arch = arch</span><br><span class="line">        <span class="variable language_">self</span>._mode = mode</span><br><span class="line"></span><br><span class="line">        <span class="comment"># initialize the unicorn instance</span></span><br><span class="line">        <span class="variable language_">self</span>._uch = uc_engine()</span><br><span class="line">        status = uclib.uc_open(arch, mode, ctypes.byref(<span class="variable language_">self</span>._uch))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> status != uc.UC_ERR_OK:</span><br><span class="line">            <span class="variable language_">self</span>._uch = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">raise</span> UcError(status)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> cpu <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="variable language_">self</span>.ctl_set_cpu_model(cpu)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># we have to keep a reference to the callbacks so they do not get gc-ed</span></span><br><span class="line">        <span class="comment"># see: https://docs.python.org/3/library/ctypes.html#callback-functions</span></span><br><span class="line">        <span class="variable language_">self</span>._callbacks: <span class="type">Dict</span>[<span class="built_in">int</span>, ctypes._FuncPointer] = &#123;&#125;</span><br><span class="line">        <span class="variable language_">self</span>._mmio_callbacks: <span class="type">Dict</span>[<span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>], <span class="type">Tuple</span>[<span class="type">Optional</span>[MMIO_READ_CFUNC], <span class="type">Optional</span>[MMIO_WRITE_CFUNC]]] = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._hook_exception: <span class="type">Optional</span>[Exception] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># create a finalizer object that will appropriately free up resources when</span></span><br><span class="line">        <span class="comment"># this instance undergoes garbage collection.</span></span><br><span class="line">        <span class="variable language_">self</span>.__finalizer = weakref.finalize(<span class="variable language_">self</span>, Uc.release_handle, <span class="variable language_">self</span>._uch)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">release_handle</span>(<span class="params">uch: uc_engine</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="comment"># this method and its arguments must not have any reference to the Uc instance being</span></span><br><span class="line">        <span class="comment"># destroyed. namely, this method cannot be a bound method.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> uch:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                status = uclib.uc_close(uch)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># _uc might be pulled from under our feet</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> status != uc.UC_ERR_OK:</span><br><span class="line">                    <span class="keyword">raise</span> UcError(status)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">errno</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Get last error number.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns: error number (see: UC_ERR_*)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> uclib.uc_errno(<span class="variable language_">self</span>._uch)</span><br><span class="line"></span><br><span class="line">    <span class="comment">###########################</span></span><br><span class="line">    <span class="comment">#  Emulation controllers  #</span></span><br><span class="line">    <span class="comment">###########################</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">emu_start</span>(<span class="params">self, begin: <span class="built_in">int</span>, until: <span class="built_in">int</span>, timeout: <span class="built_in">int</span> = <span class="number">0</span>, count: <span class="built_in">int</span> = <span class="number">0</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Start emulation from a specified address to another.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            begin   : emulation starting address</span></span><br><span class="line"><span class="string">            until   : emulation ending address</span></span><br><span class="line"><span class="string">            timeout : limit emulation to a certain amount of time (milliseconds)</span></span><br><span class="line"><span class="string">            count   : limit emulation to a certain amount of instructions</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Raises:</span></span><br><span class="line"><span class="string">            `UcError`   : in case emulation could not be started properly</span></span><br><span class="line"><span class="string">            `Exception` : in case an error has been encountered during emulation</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._hook_exception = <span class="literal">None</span></span><br><span class="line">        status = uclib.uc_emu_start(<span class="variable language_">self</span>._uch, begin, until, timeout, count)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> status != uc.UC_ERR_OK:</span><br><span class="line">            <span class="keyword">raise</span> UcError(status)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>._hook_exception <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> <span class="variable language_">self</span>._hook_exception</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">emu_stop</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Stop emulation.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Raises: `UcError` in case emulation could not be stopped properly</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        status = uclib.uc_emu_stop(<span class="variable language_">self</span>._uch)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> status != uc.UC_ERR_OK:</span><br><span class="line">            <span class="keyword">raise</span> UcError(status)</span><br><span class="line"></span><br><span class="line">    <span class="comment">###########################</span></span><br><span class="line">    <span class="comment">#  CPU state accessors    #</span></span><br><span class="line">    <span class="comment">###########################</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_do_reg_read</span>(<span class="params">self, reg_id: <span class="built_in">int</span>, reg_obj</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Private register read implementation.</span></span><br><span class="line"><span class="string">        Do not call directly.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> uclib.uc_reg_read(<span class="variable language_">self</span>._uch, reg_id, reg_obj)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_do_reg_write</span>(<span class="params">self, reg_id: <span class="built_in">int</span>, reg_obj</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Private register write implementation.</span></span><br><span class="line"><span class="string">        Do not call directly.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> uclib.uc_reg_write(<span class="variable language_">self</span>._uch, reg_id, reg_obj)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_do_reg_read_batch</span>(<span class="params">self, reglist, vallist, count</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Private batch register read implementation.</span></span><br><span class="line"><span class="string">        Do not call directly.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> uclib.uc_reg_read_batch(<span class="variable language_">self</span>._uch, reglist, vallist, count)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_do_reg_write_batch</span>(<span class="params">self, reglist, vallist, count</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Private batch register write implementation.</span></span><br><span class="line"><span class="string">        Do not call directly.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> uclib.uc_reg_write_batch(<span class="variable language_">self</span>._uch, reglist, vallist, count)</span><br><span class="line"></span><br><span class="line">    <span class="comment">###########################</span></span><br><span class="line">    <span class="comment">#  Memory management      #</span></span><br><span class="line">    <span class="comment">###########################</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mem_map</span>(<span class="params">self, address: <span class="built_in">int</span>, size: <span class="built_in">int</span>, perms: <span class="built_in">int</span> = uc.UC_PROT_ALL</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Map a memory range.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            address : range base address</span></span><br><span class="line"><span class="string">            size    : range size (in bytes)</span></span><br><span class="line"><span class="string">            perms   : access protection bitmask</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Raises: `UcError` in case memory could not be mapped</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">assert</span> (perms &amp; ~uc.UC_PROT_ALL) == <span class="number">0</span>, <span class="string">&#x27;unexpected perms bitmask&#x27;</span></span><br><span class="line"></span><br><span class="line">        status = uclib.uc_mem_map(<span class="variable language_">self</span>._uch, address, size, perms)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> status != uc.UC_ERR_OK:</span><br><span class="line">            <span class="keyword">raise</span> UcError(status)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mem_map_ptr</span>(<span class="params">self, address: <span class="built_in">int</span>, size: <span class="built_in">int</span>, perms: <span class="built_in">int</span>, ptr: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Map a memory range and point to existing data on host memory.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            address : range base address</span></span><br><span class="line"><span class="string">            size    : range size (in bytes)</span></span><br><span class="line"><span class="string">            perms   : access protection bitmask</span></span><br><span class="line"><span class="string">            ptr     : address of data on host memory</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Raises: `UcError` in case memory could not be mapped</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">assert</span> (perms &amp; ~uc.UC_PROT_ALL) == <span class="number">0</span>, <span class="string">&#x27;unexpected perms bitmask&#x27;</span></span><br><span class="line"></span><br><span class="line">        status = uclib.uc_mem_map_ptr(<span class="variable language_">self</span>._uch, address, size, perms, ptr)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> status != uc.UC_ERR_OK:</span><br><span class="line">            <span class="keyword">raise</span> UcError(status)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mem_unmap</span>(<span class="params">self, address: <span class="built_in">int</span>, size: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Reclaim a mapped memory range.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            address : range base address</span></span><br><span class="line"><span class="string">            size    : range size (in bytes)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Raises: `UcError` in case memory could not be unmapped</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        status = uclib.uc_mem_unmap(<span class="variable language_">self</span>._uch, address, size)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> status != uc.UC_ERR_OK:</span><br><span class="line">            <span class="keyword">raise</span> UcError(status)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span> this is where mmio callbacks need to be released from cache,</span></span><br><span class="line">        <span class="comment"># but we cannot tell whether this is an mmio range. also, memory ranges</span></span><br><span class="line">        <span class="comment"># might be split by &#x27;map_protect&#x27; after they were mapped, so the</span></span><br><span class="line">        <span class="comment"># (start, end) tuple may not be suitable for retrieving the callbacks.</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># here we try to do that on a best-effort basis:</span></span><br><span class="line"></span><br><span class="line">        rng = (address, address + size)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> rng <span class="keyword">in</span> <span class="variable language_">self</span>._mmio_callbacks:</span><br><span class="line">            <span class="keyword">del</span> <span class="variable language_">self</span>._mmio_callbacks[rng]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mem_protect</span>(<span class="params">self, address: <span class="built_in">int</span>, size: <span class="built_in">int</span>, perms: <span class="built_in">int</span> = uc.UC_PROT_ALL</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Modify access protection bitmask of a mapped memory range.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            address : range base address</span></span><br><span class="line"><span class="string">            size    : range size (in bytes)</span></span><br><span class="line"><span class="string">            perms   : new access protection bitmask</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Raises: `UcError` in case access protection bitmask could not be changed</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">assert</span> (perms &amp; ~uc.UC_PROT_ALL) == <span class="number">0</span>, <span class="string">&#x27;unexpected perms bitmask&#x27;</span></span><br><span class="line"></span><br><span class="line">        status = uclib.uc_mem_protect(<span class="variable language_">self</span>._uch, address, size, perms)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> status != uc.UC_ERR_OK:</span><br><span class="line">            <span class="keyword">raise</span> UcError(status)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mmio_map</span>(<span class="params">self, address: <span class="built_in">int</span>, size: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">            read_cb: <span class="type">Optional</span>[UC_MMIO_READ_TYPE], read_ud: <span class="type">Any</span>,</span></span><br><span class="line"><span class="params">            write_cb: <span class="type">Optional</span>[UC_MMIO_WRITE_TYPE], write_ud: <span class="type">Any</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Map an MMIO range. This method binds a memory range to read and write accessors</span></span><br><span class="line"><span class="string">        to simulate a hardware device. Unicorn does not allocate memory to back this range.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            address  : range base address</span></span><br><span class="line"><span class="string">            size     : range size (in bytes)</span></span><br><span class="line"><span class="string">            read_cb  : read callback to invoke upon read access. if not specified, reads \</span></span><br><span class="line"><span class="string">                       from the mmio range will be silently dropped</span></span><br><span class="line"><span class="string">            read_ud  : optional context object to pass on to the read callback</span></span><br><span class="line"><span class="string">            write_cb : write callback to invoke upon a write access. if not specified, writes \</span></span><br><span class="line"><span class="string">                       to the mmio range will be silently dropped</span></span><br><span class="line"><span class="string">            write_ud : optional context object to pass on to the write callback</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">        @uccallback(<span class="params">self, MMIO_READ_CFUNC</span>)</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__mmio_map_read_cb</span>(<span class="params">uc: Uc, offset: <span class="built_in">int</span>, size: <span class="built_in">int</span>, key: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">            <span class="keyword">assert</span> read_cb <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> read_cb(uc, offset, size, read_ud)</span><br><span class="line"></span><br><span class="line"><span class="meta">        @uccallback(<span class="params">self, MMIO_WRITE_CFUNC</span>)</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__mmio_map_write_cb</span>(<span class="params">uc: Uc, offset: <span class="built_in">int</span>, size: <span class="built_in">int</span>, value: <span class="built_in">int</span>, key: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">assert</span> write_cb <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">            write_cb(uc, offset, size, value, write_ud)</span><br><span class="line"></span><br><span class="line">        read_cb_fptr = read_cb <span class="keyword">and</span> __mmio_map_read_cb</span><br><span class="line">        write_cb_fptr = write_cb <span class="keyword">and</span> __mmio_map_write_cb</span><br><span class="line"></span><br><span class="line">        status = uclib.uc_mmio_map(<span class="variable language_">self</span>._uch, address, size, read_cb_fptr, <span class="number">0</span>, write_cb_fptr, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> status != uc.UC_ERR_OK:</span><br><span class="line">            <span class="keyword">raise</span> UcError(status)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># hold a reference to mmio callbacks</span></span><br><span class="line">        rng = (address, address + size)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._mmio_callbacks[rng] = (read_cb_fptr, write_cb_fptr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mem_regions</span>(<span class="params">self</span>) -&gt; Iterator[<span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>]]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Iterate through mapped memory regions.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns: an iterator whose elements contain begin, end and perms  properties of each range</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Raises: `UcError` in case an internal error has been encountered</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        regions = ctypes.POINTER(uc_mem_region)()</span><br><span class="line">        count = ctypes.c_uint32()</span><br><span class="line">        status = uclib.uc_mem_regions(<span class="variable language_">self</span>._uch, ctypes.byref(regions), ctypes.byref(count))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> status != uc.UC_ERR_OK:</span><br><span class="line">            <span class="keyword">raise</span> UcError(status)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(count.value):</span><br><span class="line">                <span class="keyword">yield</span> regions[i].value</span><br><span class="line"></span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            uclib.uc_free(regions)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mem_read</span>(<span class="params">self, address: <span class="built_in">int</span>, size: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bytearray</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Read data from emulated memory subsystem.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            address : source memory location</span></span><br><span class="line"><span class="string">            size    : amount of bytes to read</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns: data bytes</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Raises: `UcError` in case of an invalid memory access</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        data = ctypes.create_string_buffer(size)</span><br><span class="line">        status = uclib.uc_mem_read(<span class="variable language_">self</span>._uch, address, data, size)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> status != uc.UC_ERR_OK:</span><br><span class="line">            <span class="keyword">raise</span> UcError(status, address, size)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytearray</span>(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mem_write</span>(<span class="params">self, address: <span class="built_in">int</span>, data: <span class="built_in">bytes</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Write data to emulated memory subsystem.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            address : target memory location</span></span><br><span class="line"><span class="string">            data    : data bytes to write</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Raises: `UcError` in case of an invalid memory access</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        size = <span class="built_in">len</span>(data)</span><br><span class="line">        status = uclib.uc_mem_write(<span class="variable language_">self</span>._uch, address, data, size)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> status != uc.UC_ERR_OK:</span><br><span class="line">            <span class="keyword">raise</span> UcError(status, address, size)</span><br><span class="line"></span><br><span class="line">    <span class="comment">###########################</span></span><br><span class="line">    <span class="comment">#  Event hooks management #</span></span><br><span class="line">    <span class="comment">###########################</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__do_hook_add</span>(<span class="params">self, htype: <span class="built_in">int</span>, fptr: ctypes._FuncPointer, begin: <span class="built_in">int</span>, end: <span class="built_in">int</span>, *args: ctypes.c_int</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        handle = uc_hook_h()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># we do not need a callback counter to reference the callback and user data anymore,</span></span><br><span class="line">        <span class="comment"># so just pass a dummy value. that value will become the unused &#x27;key&#x27; argument</span></span><br><span class="line">        dummy = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        status = uclib.uc_hook_add(</span><br><span class="line">            <span class="variable language_">self</span>._uch,</span><br><span class="line">            ctypes.byref(handle),</span><br><span class="line">            htype,</span><br><span class="line">            fptr,</span><br><span class="line">            ctypes.cast(dummy, ctypes.c_void_p),</span><br><span class="line">            ctypes.c_uint64(begin),</span><br><span class="line">            ctypes.c_uint64(end),</span><br><span class="line">            *args</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> status != uc.UC_ERR_OK:</span><br><span class="line">            <span class="keyword">raise</span> UcError(status)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># hold a reference to the function pointer to prevent it from being gc-ed</span></span><br><span class="line">        <span class="variable language_">self</span>._callbacks[handle.value] = fptr</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> handle.value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hook_add</span>(<span class="params">self, htype: <span class="built_in">int</span>, callback: <span class="type">Callable</span>, user_data: <span class="type">Any</span> = <span class="literal">None</span>, begin: <span class="built_in">int</span> = <span class="number">1</span>, end: <span class="built_in">int</span> = <span class="number">0</span>, aux1: <span class="built_in">int</span> = <span class="number">0</span>, aux2: <span class="built_in">int</span> = <span class="number">0</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Hook emulated events of a certain type.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            htype     : event type(s) to hook (see UC_HOOK_* constants)</span></span><br><span class="line"><span class="string">            callback  : a method to call each time the hooked event occurs</span></span><br><span class="line"><span class="string">            user_data : an additional context to pass to the callback when it is called</span></span><br><span class="line"><span class="string">            begin     : address where hook scope starts</span></span><br><span class="line"><span class="string">            end       : address where hook scope ends</span></span><br><span class="line"><span class="string">            aux1      : auxiliary parameter; needed for some hook types</span></span><br><span class="line"><span class="string">            aux2      : auxiliary parameter; needed for some hook types</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns: hook handle</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Raises: `UcError` in case of an invalid htype value</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__hook_intr</span>():</span><br><span class="line"><span class="meta">            @uccallback(<span class="params">self, HOOK_INTR_CFUNC</span>)</span></span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">__hook_intr_cb</span>(<span class="params">uc: Uc, intno: <span class="built_in">int</span>, key: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">                callback(uc, intno, user_data)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (__hook_intr_cb,)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__hook_insn</span>():</span><br><span class="line">            <span class="comment"># each arch is expected to overload hook_add and implement this handler on their own.</span></span><br><span class="line">            <span class="comment"># if we got here, it means this particular architecture does not support hooking any</span></span><br><span class="line">            <span class="comment"># instruction, and so we fail</span></span><br><span class="line">            <span class="keyword">raise</span> UcError(uc.UC_ERR_ARG)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__hook_code</span>():</span><br><span class="line"><span class="meta">            @uccallback(<span class="params">self, HOOK_CODE_CFUNC</span>)</span></span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">__hook_code_cb</span>(<span class="params">uc: Uc, address: <span class="built_in">int</span>, size: <span class="built_in">int</span>, key: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">                callback(uc, address, size, user_data)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (__hook_code_cb,)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__hook_invalid_mem</span>():</span><br><span class="line"><span class="meta">            @uccallback(<span class="params">self, HOOK_MEM_INVALID_CFUNC</span>)</span></span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">__hook_mem_invalid_cb</span>(<span class="params">uc: Uc, access: <span class="built_in">int</span>, address: <span class="built_in">int</span>, size: <span class="built_in">int</span>, value: <span class="built_in">int</span>, key: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">                <span class="keyword">return</span> callback(uc, access, address, size, value, user_data)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (__hook_mem_invalid_cb,)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__hook_mem</span>():</span><br><span class="line"><span class="meta">            @uccallback(<span class="params">self, HOOK_MEM_ACCESS_CFUNC</span>)</span></span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">__hook_mem_access_cb</span>(<span class="params">uc: Uc, access: <span class="built_in">int</span>, address: <span class="built_in">int</span>, size: <span class="built_in">int</span>, value: <span class="built_in">int</span>, key: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">                callback(uc, access, address, size, value, user_data)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (__hook_mem_access_cb,)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__hook_invalid_insn</span>():</span><br><span class="line"><span class="meta">            @uccallback(<span class="params">self, HOOK_INSN_INVALID_CFUNC</span>)</span></span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">__hook_insn_invalid_cb</span>(<span class="params">uc: Uc, key: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">                <span class="keyword">return</span> callback(uc, user_data)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (__hook_insn_invalid_cb,)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__hook_edge_gen</span>():</span><br><span class="line"><span class="meta">            @uccallback(<span class="params">self, HOOK_EDGE_GEN_CFUNC</span>)</span></span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">__hook_edge_gen_cb</span>(<span class="params">uc: Uc, cur: ctypes._Pointer[uc_tb], prev: ctypes._Pointer[uc_tb], key: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">                callback(uc, cur.contents, prev.contents, user_data)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (__hook_edge_gen_cb,)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__hook_tcg_opcode</span>():</span><br><span class="line"><span class="meta">            @uccallback(<span class="params">self, HOOK_TCG_OPCODE_CFUNC</span>)</span></span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">__hook_tcg_op_cb</span>(<span class="params">uc: Uc, address: <span class="built_in">int</span>, arg1: <span class="built_in">int</span>, arg2: <span class="built_in">int</span>, size: <span class="built_in">int</span>, key: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">                callback(uc, address, arg1, arg2, size, user_data)</span><br><span class="line"></span><br><span class="line">            opcode = ctypes.c_uint64(aux1)</span><br><span class="line">            flags = ctypes.c_uint64(aux2)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (__hook_tcg_op_cb, opcode, flags)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__hook_tlb_fill</span>():</span><br><span class="line"><span class="meta">            @uccallback(<span class="params">self, HOOK_TLB_FILL_CFUNC</span>)</span></span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">__hook_tlb_fill_cb</span>(<span class="params">uc: Uc, vaddr: <span class="built_in">int</span>, access: <span class="built_in">int</span>, entry: ctypes._Pointer[uc_tlb_entry], key: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">                <span class="keyword">return</span> callback(uc, vaddr, access, entry.contents, user_data)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (__hook_tlb_fill_cb,)</span><br><span class="line"></span><br><span class="line">        handlers: <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Callable</span>[[], <span class="type">Tuple</span>]] = &#123;</span><br><span class="line">            uc.UC_HOOK_INTR               : __hook_intr,</span><br><span class="line">            uc.UC_HOOK_INSN               : __hook_insn,</span><br><span class="line">            uc.UC_HOOK_CODE               : __hook_code,</span><br><span class="line">            uc.UC_HOOK_BLOCK              : __hook_code,</span><br><span class="line">            uc.UC_HOOK_MEM_READ_UNMAPPED  : __hook_invalid_mem,</span><br><span class="line">            uc.UC_HOOK_MEM_WRITE_UNMAPPED : __hook_invalid_mem,</span><br><span class="line">            uc.UC_HOOK_MEM_FETCH_UNMAPPED : __hook_invalid_mem,</span><br><span class="line">            uc.UC_HOOK_MEM_READ_PROT      : __hook_invalid_mem,</span><br><span class="line">            uc.UC_HOOK_MEM_WRITE_PROT     : __hook_invalid_mem,</span><br><span class="line">            uc.UC_HOOK_MEM_FETCH_PROT     : __hook_invalid_mem,</span><br><span class="line">            uc.UC_HOOK_MEM_READ           : __hook_mem,</span><br><span class="line">            uc.UC_HOOK_MEM_WRITE          : __hook_mem,</span><br><span class="line">            uc.UC_HOOK_MEM_FETCH          : __hook_mem,</span><br><span class="line">            <span class="comment"># uc.UC_HOOK_MEM_READ_AFTER</span></span><br><span class="line">            uc.UC_HOOK_INSN_INVALID       : __hook_invalid_insn,</span><br><span class="line">            uc.UC_HOOK_EDGE_GENERATED     : __hook_edge_gen,</span><br><span class="line">            uc.UC_HOOK_TCG_OPCODE         : __hook_tcg_opcode,</span><br><span class="line">            uc.UC_HOOK_TLB_FILL           : __hook_tlb_fill</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># the same callback may be registered for multiple hook types if they</span></span><br><span class="line">        <span class="comment"># share the same handling method. here we iterate through htype set bits</span></span><br><span class="line">        <span class="comment"># and collect all unique handlers it refers to (no duplicates)</span></span><br><span class="line">        matched = <span class="built_in">set</span>(handlers.get(<span class="number">1</span> &lt;&lt; n) <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>) <span class="keyword">if</span> htype &amp; (<span class="number">1</span> &lt;&lt; n))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># the set of matched handlers is expected to include exactly one element.</span></span><br><span class="line">        <span class="comment"># more than one member indicates that htype refers to more than one handler</span></span><br><span class="line">        <span class="comment"># at the same time, whereas callbacks cannot be assigned to different handlers.</span></span><br><span class="line">        <span class="comment"># an empty set indicates a matching handler was not found, probably due to</span></span><br><span class="line">        <span class="comment"># an invalid htype value</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(matched) != <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">raise</span> UcError(uc.UC_ERR_ARG)</span><br><span class="line"></span><br><span class="line">        handler = matched.pop()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># a None element indicates that htype has an unrecognized bit set</span></span><br><span class="line">        <span class="keyword">if</span> handler <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> UcError(uc.UC_ERR_ARG)</span><br><span class="line"></span><br><span class="line">        fptr, *aux = handler()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.__do_hook_add(htype, fptr, begin, end, *aux)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hook_del</span>(<span class="params">self, handle: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Remove an existing hook.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            handle: hook handle</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        h = uc_hook_h(handle)</span><br><span class="line">        status = uclib.uc_hook_del(<span class="variable language_">self</span>._uch, h)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> status != uc.UC_ERR_OK:</span><br><span class="line">            <span class="keyword">raise</span> UcError(status)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">del</span> <span class="variable language_">self</span>._callbacks[handle]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">query</span>(<span class="params">self, prop: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Query an internal Unicorn property.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            prop: property identifier (see: UC_QUERY_* constants)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns: property value</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        result = ctypes.c_size_t()</span><br><span class="line">        status = uclib.uc_query(<span class="variable language_">self</span>._uch, prop, ctypes.byref(result))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> status != uc.UC_ERR_OK:</span><br><span class="line">            <span class="keyword">raise</span> UcError(status, prop)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result.value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">context_save</span>(<span class="params">self</span>) -&gt; UcContext:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Save Unicorn instance internal context.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns: unicorn context instance</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        context = UcContext(<span class="variable language_">self</span>._uch, <span class="variable language_">self</span>._arch, <span class="variable language_">self</span>._mode)</span><br><span class="line">        status = uclib.uc_context_save(<span class="variable language_">self</span>._uch, context.context)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> status != uc.UC_ERR_OK:</span><br><span class="line">            <span class="keyword">raise</span> UcError(status)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> context</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">context_update</span>(<span class="params">self, context: UcContext</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Update Unicorn instance internal context.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            context : unicorn context instance to copy data from</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        status = uclib.uc_context_save(<span class="variable language_">self</span>._uch, context.context)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> status != uc.UC_ERR_OK:</span><br><span class="line">            <span class="keyword">raise</span> UcError(status)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">context_restore</span>(<span class="params">self, context: UcContext</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Overwrite Unicorn instance internal context.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            context : unicorn context instance to copy data from</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        status = uclib.uc_context_restore(<span class="variable language_">self</span>._uch, context.context)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> status != uc.UC_ERR_OK:</span><br><span class="line">            <span class="keyword">raise</span> UcError(status)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__ctl_encode</span>(<span class="params">ctl: <span class="built_in">int</span>, op: <span class="built_in">int</span>, nargs: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">assert</span> check_maxbits(nargs, <span class="number">4</span>), <span class="string">f&#x27;nargs must not exceed value of 15 (got <span class="subst">&#123;nargs&#125;</span>)&#x27;</span></span><br><span class="line">        <span class="keyword">assert</span> op <span class="keyword">and</span> check_maxbits(op, <span class="number">2</span>), <span class="string">f&#x27;op must not exceed value of 3 (got <span class="subst">&#123;op&#125;</span>)&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (op &lt;&lt; <span class="number">30</span>) | (nargs &lt;&lt; <span class="number">26</span>) | ctl</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ctl</span>(<span class="params">self, ctl: <span class="built_in">int</span>, op: <span class="built_in">int</span>, *args</span>):</span><br><span class="line">        code = Uc.__ctl_encode(ctl, op, <span class="built_in">len</span>(args))</span><br><span class="line"></span><br><span class="line">        status = uclib.uc_ctl(<span class="variable language_">self</span>._uch, code, *args)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> status != uc.UC_ERR_OK:</span><br><span class="line">            <span class="keyword">raise</span> UcError(status)</span><br><span class="line"></span><br><span class="line">    Arg = <span class="type">Tuple</span>[<span class="type">Type</span>, <span class="type">Optional</span>[<span class="built_in">int</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__ctl_r</span>(<span class="params">self, ctl: <span class="built_in">int</span>, arg0: Arg</span>):</span><br><span class="line">        atype, _ = arg0</span><br><span class="line">        carg = atype()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.ctl(ctl, uc.UC_CTL_IO_READ, ctypes.byref(carg))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> carg.value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__ctl_w</span>(<span class="params">self, ctl: <span class="built_in">int</span>, *args: Arg</span>):</span><br><span class="line">        cargs = (atype(avalue) <span class="keyword">for</span> atype, avalue <span class="keyword">in</span> args)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.ctl(ctl, uc.UC_CTL_IO_WRITE, *cargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__ctl_wr</span>(<span class="params">self, ctl: <span class="built_in">int</span>, arg0: Arg, arg1: Arg</span>):</span><br><span class="line">        atype, avalue = arg0</span><br><span class="line">        carg0 = atype(avalue)</span><br><span class="line"></span><br><span class="line">        atype, _ = arg1</span><br><span class="line">        carg1 = atype()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.ctl(ctl, uc.UC_CTL_IO_READ_WRITE, carg0, ctypes.byref(carg1))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> carg1.value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ctl_get_mode</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Retrieve current processor mode.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns: current mode (see UC_MODE_* constants)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.__ctl_r(uc.UC_CTL_UC_MODE,</span><br><span class="line">            (ctypes.c_int, <span class="literal">None</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ctl_get_page_size</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Retrieve target page size.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns: page size in bytes</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.__ctl_r(uc.UC_CTL_UC_PAGE_SIZE,</span><br><span class="line">            (ctypes.c_uint32, <span class="literal">None</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ctl_set_page_size</span>(<span class="params">self, val: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Set target page size.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            val: page size to set (in bytes)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Raises: `UcError` in any of the following cases:</span></span><br><span class="line"><span class="string">          - Unicorn architecture is not ARM</span></span><br><span class="line"><span class="string">          - Unicorn has already completed its initialization</span></span><br><span class="line"><span class="string">          - Page size is not a power of 2</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.__ctl_w(uc.UC_CTL_UC_PAGE_SIZE,</span><br><span class="line">            (ctypes.c_uint32, val)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ctl_get_arch</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Retrieve target architecture.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns: current architecture (see UC_ARCH_* constants)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.__ctl_r(uc.UC_CTL_UC_ARCH,</span><br><span class="line">            (ctypes.c_int, <span class="literal">None</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ctl_get_timeout</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Retrieve emulation timeout.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns: timeout value set on emulation start</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.__ctl_r(uc.UC_CTL_UC_TIMEOUT,</span><br><span class="line">            (ctypes.c_uint64, <span class="literal">None</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ctl_exits_enabled</span>(<span class="params">self, enable: <span class="built_in">bool</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Instruct Unicorn whether to respect emulation exit points or ignore them.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            enable: `True` to enable exit points, `False` to ignore them</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.__ctl_w(uc.UC_CTL_UC_USE_EXITS,</span><br><span class="line">            (ctypes.c_int, enable)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ctl_get_exits_cnt</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Retrieve emulation exit points count.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns: number of emulation exit points</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Raises: `UcErro` if Unicorn is set to ignore exits</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.__ctl_r(uc.UC_CTL_UC_EXITS_CNT,</span><br><span class="line">            (ctypes.c_size_t, <span class="literal">None</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ctl_get_exits</span>(<span class="params">self</span>) -&gt; <span class="type">Sequence</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Retrieve emulation exit points.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns: a tuple of all emulation exit points</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Raises: `UcErro` if Unicorn is set to ignore exits</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        count = <span class="variable language_">self</span>.ctl_get_exits_cnt()</span><br><span class="line">        arr = (ctypes.c_uint64 * count)()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.ctl(uc.UC_CTL_UC_EXITS, uc.UC_CTL_IO_READ, ctypes.cast(arr, ctypes.c_void_p), ctypes.c_size_t(count))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">tuple</span>(arr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ctl_set_exits</span>(<span class="params">self, exits: <span class="type">Sequence</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Set emulation exit points.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            exits: a list of emulation exit points to set</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Raises: `UcErro` if Unicorn is set to ignore exits</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        arr = (ctypes.c_uint64 * <span class="built_in">len</span>(exits))(*exits)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.ctl(uc.UC_CTL_UC_EXITS, uc.UC_CTL_IO_WRITE, ctypes.cast(arr, ctypes.c_void_p), ctypes.c_size_t(<span class="built_in">len</span>(arr)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ctl_get_cpu_model</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Retrieve target processor model.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns: target cpu model (see UC_CPU_* constants)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.__ctl_r(uc.UC_CTL_CPU_MODEL,</span><br><span class="line">            (ctypes.c_int, <span class="literal">None</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ctl_set_cpu_model</span>(<span class="params">self, model: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Set target processor model.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            model: cpu model to set (see UC_CPU_* constants)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Raises: `UcError` in any of the following cases:</span></span><br><span class="line"><span class="string">          - `model` is not a valid cpu model</span></span><br><span class="line"><span class="string">          - Requested cpu model is incompatible with current mode</span></span><br><span class="line"><span class="string">          - Unicorn has already completed its initialization</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.__ctl_w(uc.UC_CTL_CPU_MODEL,</span><br><span class="line">            (ctypes.c_int, model)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ctl_remove_cache</span>(<span class="params">self, lbound: <span class="built_in">int</span>, ubound: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Invalidate translation cache for a specified region.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            lbound: region lower bound</span></span><br><span class="line"><span class="string">            ubound: region upper bound</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Raises: `UcError` in case the provided range bounds are invalid</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.__ctl_w(uc.UC_CTL_TB_REMOVE_CACHE,</span><br><span class="line">            (ctypes.c_uint64, lbound),</span><br><span class="line">            (ctypes.c_uint64, ubound)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ctl_request_cache</span>(<span class="params">self, addr: <span class="built_in">int</span></span>) -&gt; TBStruct:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Get translation cache info for a specified address.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            addr: address to get its translation cache info</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns: a 3-tuple containing the base address, instructions count and</span></span><br><span class="line"><span class="string">                size of the translation block containing the specified address</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.__ctl_wr(uc.UC_CTL_TB_REQUEST_CACHE,</span><br><span class="line">            (ctypes.c_uint64, addr),</span><br><span class="line">            (uc_tb, <span class="literal">None</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ctl_flush_tb</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Flush the entire translation cache.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.__ctl_w(uc.UC_CTL_TB_FLUSH)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ctl_set_tlb_mode</span>(<span class="params">self, mode: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Set TLB mode.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            mode: tlb mode to use (see UC_TLB_* constants)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.__ctl_w(uc.UC_CTL_TLB_TYPE,</span><br><span class="line">            (ctypes.c_uint, mode)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># For backward compatibility...</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ctl_tlb_mode</span>(<span class="params">self, mode: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Deprecated, please use ctl_set_tlb_mode instead.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            mode: tlb mode to use (see UC_TLB_* constants)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        warnings.warn(<span class="string">&#x27;Deprecated method, use ctl_set_tlb_mode&#x27;</span>, DeprecationWarning)</span><br><span class="line">        <span class="variable language_">self</span>.ctl_set_tlb_mode(mode)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ctl_get_tcg_buffer_size</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Retrieve TCG buffer size.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns: buffer size (in bytes)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.__ctl_r(uc.UC_CTL_TCG_BUFFER_SIZE,</span><br><span class="line">            (ctypes.c_uint32, <span class="literal">None</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ctl_set_tcg_buffer_size</span>(<span class="params">self, size: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Set TCG buffer size.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            size: new size to set</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.__ctl_w(uc.UC_CTL_TCG_BUFFER_SIZE,</span><br><span class="line">            (ctypes.c_uint32, size)</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p>m方法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Source for m</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">methodcaller</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Return a callable object that calls the given method on its operand.</span></span><br><span class="line"><span class="string">    After f = methodcaller(&#x27;name&#x27;), the call f(r) returns r.name().</span></span><br><span class="line"><span class="string">    After g = methodcaller(&#x27;name&#x27;, &#x27;date&#x27;, foo=1), the call g(r) returns</span></span><br><span class="line"><span class="string">    r.name(&#x27;date&#x27;, foo=1).</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    __slots__ = (<span class="string">&#x27;_name&#x27;</span>, <span class="string">&#x27;_args&#x27;</span>, <span class="string">&#x27;_kwargs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, /, *args, **kwargs</span>):</span><br><span class="line">        <span class="variable language_">self</span>._name = name</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(<span class="variable language_">self</span>._name, <span class="built_in">str</span>):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;method name must be a string&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>._args = args</span><br><span class="line">        <span class="variable language_">self</span>._kwargs = kwargs</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, obj</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getattr</span>(obj, <span class="variable language_">self</span>._name)(*<span class="variable language_">self</span>._args, **<span class="variable language_">self</span>._kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        args = [<span class="built_in">repr</span>(<span class="variable language_">self</span>._name)]</span><br><span class="line">        args.extend(<span class="built_in">map</span>(<span class="built_in">repr</span>, <span class="variable language_">self</span>._args))</span><br><span class="line">        args.extend(<span class="string">&#x27;%s=%r&#x27;</span> % (k, v) <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="variable language_">self</span>._kwargs.items())</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;%s.%s(%s)&#x27;</span> % (<span class="variable language_">self</span>.__class__.__module__,</span><br><span class="line">                              <span class="variable language_">self</span>.__class__.__name__,</span><br><span class="line">                              <span class="string">&#x27;, &#x27;</span>.join(args))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>._kwargs:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.__class__, (<span class="variable language_">self</span>._name,) + <span class="variable language_">self</span>._args</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line">            <span class="keyword">return</span> partial(<span class="variable language_">self</span>.__class__, <span class="variable language_">self</span>._name, **<span class="variable language_">self</span>._kwargs), <span class="variable language_">self</span>._args</span><br></pre></td></tr></table></figure><p>其他的cpython编译的源码虽然看不到，但我们可以看它其他的信息</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;__builtins__&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;signature&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil&#x27; object; Ellipsis represents `...&#x27; in slices.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source_saved&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source_file&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;note&quot;</span><span class="punctuation">:</span> <span class="string">&quot;无法获取源码: TypeError: &lt;module &#x27;builtins&#x27; (built-in)&gt; is a built-in module&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;__doc__&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NoneType&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;signature&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source_saved&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source_file&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;note&quot;</span><span class="punctuation">:</span> <span class="string">&quot;无法获取源码: TypeError: module, class, method, function, traceback, frame, or code object was expected, got NoneType&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;__file__&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;str&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;signature&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;str(object=&#x27;&#x27;) -&gt; str\nstr(bytes_or_buffer[, encoding[, errors]]) -&gt; str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer...\n[文档省略]&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source_saved&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source_file&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;note&quot;</span><span class="punctuation">:</span> <span class="string">&quot;无法获取源码: TypeError: module, class, method, function, traceback, frame, or code object was expected, got str&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;__loader__&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ExtensionFileLoader&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;signature&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Loader for extension modules.\n\nThe constructor is designed to work with FileFinder.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source_saved&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source_file&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;note&quot;</span><span class="punctuation">:</span> <span class="string">&quot;无法获取源码: TypeError: module, class, method, function, traceback, frame, or code object was expected, got ExtensionFileLoader&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;__name__&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;str&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;signature&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;str(object=&#x27;&#x27;) -&gt; str\nstr(bytes_or_buffer[, encoding[, errors]]) -&gt; str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer...\n[文档省略]&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source_saved&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source_file&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;note&quot;</span><span class="punctuation">:</span> <span class="string">&quot;无法获取源码: TypeError: module, class, method, function, traceback, frame, or code object was expected, got str&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;__package__&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;str&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;signature&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;str(object=&#x27;&#x27;) -&gt; str\nstr(bytes_or_buffer[, encoding[, errors]]) -&gt; str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer...\n[文档省略]&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source_saved&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source_file&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;note&quot;</span><span class="punctuation">:</span> <span class="string">&quot;无法获取源码: TypeError: module, class, method, function, traceback, frame, or code object was expected, got str&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;__spec__&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ModuleSpec&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;signature&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;The specification for a module, used for loading.\n\nA module&#x27;s spec is the source for information about the module.  For\ndata associated with the module, including source, use the spec&#x27;s\nloader.\n\n`name...\n[文档省略]&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source_saved&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source_file&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;note&quot;</span><span class="punctuation">:</span> <span class="string">&quot;无法获取源码: TypeError: module, class, method, function, traceback, frame, or code object was expected, got ModuleSpec&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;__test__&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dict&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;signature&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dict() -&gt; new empty dictionary\ndict(mapping) -&gt; new dictionary initialized from a mapping object&#x27;s\n    (key, value) pairs\ndict(iterable) -&gt; new dictionary initialized as if via:\n    d = &#123;&#125;\n    for k, ...\n[文档省略]&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source_saved&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source_file&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;note&quot;</span><span class="punctuation">:</span> <span class="string">&quot;无法获取源码: TypeError: module, class, method, function, traceback, frame, or code object was expected, got dict&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a2b_hex&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;builtin_function_or_method&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;signature&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(hexstr, /)&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Binary data of hexadecimal representation.\n\nhexstr must contain an even number of hex digits (upper or lower case).\nThis function is also available as \&quot;unhexlify()\&quot;.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source_saved&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source_file&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;note&quot;</span><span class="punctuation">:</span> <span class="string">&quot;无法获取源码: TypeError: module, class, method, function, traceback, frame, or code object was expected, got builtin_function_or_method&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;b&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;function&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;signature&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(s, altchars=None)&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\anaconda\\envs\\py39\\lib\\base64.py&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Encode the bytes-like object s using Base64 and return a bytes object.\n\nOptional altchars should be a byte string of length 2 which specifies an\nalternative alphabet for the &#x27;+&#x27; and &#x27;/&#x27; characters.  T...\n[文档省略]&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source_saved&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source_file&quot;</span><span class="punctuation">:</span> <span class="string">&quot;init_source\\b.py&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;note&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;type&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;signature&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(arch: &#x27;int&#x27;, mode: &#x27;int&#x27;, cpu: &#x27;Optional[int]&#x27; = None)&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\anaconda\\envs\\py39\\lib\\site-packages\\unicorn\\unicorn_py3\\unicorn.py&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Unicorn Engine class.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source_saved&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source_file&quot;</span><span class="punctuation">:</span> <span class="string">&quot;init_source\\c.py&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;note&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;e&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;UcIntel&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;signature&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Unicorn subclass for Intel architecture.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source_saved&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source_file&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;note&quot;</span><span class="punctuation">:</span> <span class="string">&quot;无法获取源码: TypeError: module, class, method, function, traceback, frame, or code object was expected, got UcIntel&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;exec&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cython_function_or_method&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;signature&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(x)&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source_saved&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source_file&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;note&quot;</span><span class="punctuation">:</span> <span class="string">&quot;无法获取源码: TypeError: module, class, method, function, traceback, frame, or code object was expected, got cython_function_or_method&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;exit&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;builtin_function_or_method&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;signature&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(source, globals=None, locals=None, /)&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Evaluate the given source in the context of globals and locals.\n\nThe source may be a string representing a Python expression\nor a code object as returned by compile().\nThe globals must be a dictionary...\n[文档省略]&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source_saved&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source_file&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;note&quot;</span><span class="punctuation">:</span> <span class="string">&quot;无法获取源码: TypeError: module, class, method, function, traceback, frame, or code object was expected, got builtin_function_or_method&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;i&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;builtin_function_or_method&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;signature&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(prompt=None, /)&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Read a string from standard input.  The trailing newline is stripped.\n\nThe prompt string, if given, is printed to standard output without a\ntrailing newline before reading input.\n\nIf the user hits EOF...\n[文档省略]&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source_saved&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source_file&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;note&quot;</span><span class="punctuation">:</span> <span class="string">&quot;无法获取源码: TypeError: module, class, method, function, traceback, frame, or code object was expected, got builtin_function_or_method&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;int&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;type&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;signature&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;签名不可用: no signature found for builtin type &lt;class &#x27;str&#x27;&gt;&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;str(object=&#x27;&#x27;) -&gt; str\nstr(bytes_or_buffer[, encoding[, errors]]) -&gt; str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer...\n[文档省略]&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source_saved&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source_file&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;note&quot;</span><span class="punctuation">:</span> <span class="string">&quot;无法获取源码: TypeError: &lt;class &#x27;str&#x27;&gt; is a built-in class&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;m&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;type&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;signature&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;签名不可用: no signature found for builtin type &lt;class &#x27;operator.methodcaller&#x27;&gt;&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\anaconda\\envs\\py39\\lib\\operator.py&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;methodcaller(name, ...) --&gt; methodcaller object\n\nReturn a callable object that calls the given method on its operand.\nAfter f = methodcaller(&#x27;name&#x27;), the call f(r) returns r.name().\nAfter g = methodca...\n[文档省略]&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source_saved&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source_file&quot;</span><span class="punctuation">:</span> <span class="string">&quot;init_source\\m.py&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;note&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;p&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;builtin_function_or_method&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;signature&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;签名不可用: no signature found for builtin &lt;built-in function print&gt;&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;print(value, ..., sep=&#x27; &#x27;, end=&#x27;\\n&#x27;, file=sys.stdout, flush=False)\n\nPrints the values to a stream, or to sys.stdout by default.\nOptional keyword arguments:\nfile:  a file-like object (stream); defaults...\n[文档省略]&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source_saved&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source_file&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;note&quot;</span><span class="punctuation">:</span> <span class="string">&quot;无法获取源码: TypeError: module, class, method, function, traceback, frame, or code object was expected, got builtin_function_or_method&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>比如说可以看到p是print()，i是input()等等</p><div class="table-container"><table><thead><tr><th>名称</th><th>实际对象</th><th>含义</th></tr></thead><tbody><tr><td><strong>a2b_hex</strong></td><td>built-in</td><td>用于十六进制转字节。无关。</td></tr><tr><td><strong>b</strong></td><td><code>base64.b64encode</code></td><td>Base64 编码函数。</td></tr><tr><td><strong>c</strong></td><td><code>unicorn.Uc</code></td><td>模拟器类。</td></tr><tr><td><strong>e</strong></td><td><code>UcIntel()</code></td><td>模拟器实例。</td></tr><tr><td><strong>exec</strong></td><td>自定义（Cython 实现）</td><td>类似 <code>exec()</code> 执行字符串代码。</td></tr><tr><td><strong>exit</strong></td><td>其实是 Python 内置 <code>eval()</code>（看 doc）</td><td>所以 <code>exit(&quot;1+2&quot;) == eval(&quot;1+2&quot;)</code>。</td></tr><tr><td><strong>i</strong></td><td><code>input()</code></td><td>读取输入。</td></tr><tr><td><strong>int</strong></td><td>实际是 <strong><code>str()</code></strong>（伪装成 int）</td><td>所以 <code>int(30)</code> 返回 <code>&#39;30&#39;</code>！</td></tr><tr><td><strong>m</strong></td><td><code>operator.methodcaller</code></td><td>调用某个对象的方法的工厂函数。</td></tr><tr><td><strong>p</strong></td><td><code>print()</code></td><td>打印函数。</td></tr></tbody></table></div><h2 id="简化："><a href="#简化：" class="headerlink" title="简化："></a>简化：</h2><p>现在把这些扔给ai用正则表达式对plus.py简化</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deobfuscated / formatted (text-only transform)</span></span><br><span class="line"><span class="comment"># Mappings:</span></span><br><span class="line"><span class="comment"># m -&gt; operator.methodcaller</span></span><br><span class="line"><span class="comment"># b -&gt; base64.b64encode (b)</span></span><br><span class="line"><span class="comment"># c -&gt; unicorn.Uc</span></span><br><span class="line"><span class="comment"># e -&gt; unicorn instance (uc)</span></span><br><span class="line"><span class="comment"># exec -&gt; exec-like function (kept as exec placeholder)</span></span><br><span class="line"><span class="comment"># exit -&gt; converted by concatenating int(...) digits into integer literal</span></span><br><span class="line"><span class="comment"># i -&gt; input</span></span><br><span class="line"><span class="comment"># int -&gt; behaves as str(...) in init, replaced accordingly</span></span><br><span class="line"><span class="comment"># p -&gt; print</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">from</span> init <span class="keyword">import</span> *;m(<span class="built_in">exec</span>(<span class="number">30792292888306032</span>), <span class="number">16777216</span>, <span class="number">2097152</span>)(e);</span><br><span class="line">m(<span class="built_in">exec</span>(<span class="number">30792292888306032</span>), <span class="number">18874368</span>, <span class="number">65536</span>)(e);</span><br><span class="line">m(<span class="built_in">exec</span>(<span class="number">2018003706771258569829</span>),<span class="number">16777216</span>,<span class="built_in">exec</span>(<span class="number">2154308209104587365050518702243508477825638429417674506.</span>.<span class="number">.60128987662749468317325542233718690074933730651941880380559453</span>),)(e);</span><br><span class="line">m(<span class="built_in">exec</span>(<span class="number">2110235738289946063973</span>), <span class="number">44</span>, <span class="number">18939903</span>)(e);</span><br><span class="line">m(<span class="built_in">exec</span>(<span class="number">2018003706771258569829</span>), <span class="number">18878464</span>, i(<span class="built_in">exec</span>(<span class="number">520485229507545392928716380743873332979750615584</span>)).encode())(e);</span><br><span class="line">m(<span class="built_in">exec</span>(<span class="number">2110235738289946063973</span>), <span class="number">39</span>, <span class="number">18878464</span>)(e);</span><br><span class="line">m(<span class="built_in">exec</span>(<span class="number">2110235738289946063973</span>), <span class="number">43</span>, <span class="number">44</span>)(e);</span><br><span class="line">m(<span class="built_in">exec</span>(<span class="number">2110235738289946063973</span>), <span class="number">40</span>, <span class="number">7</span>)(e);</span><br><span class="line">m(<span class="built_in">exec</span>(<span class="number">18710084667165524261000</span>), <span class="number">16777216</span>, <span class="number">16777332</span>)(e);</span><br><span class="line">p(<span class="built_in">exec</span>(<span class="number">17353562600</span>)) <span class="keyword">if</span> (b(m(<span class="built_in">exec</span>(<span class="number">7882826979490488676</span>), <span class="number">18878464</span>, <span class="number">44</span>)(e))</span><br><span class="line">.decode()== <span class="built_in">exec</span>(<span class="number">63649679746492988981901858995847426189422638088.</span>.<span class="number">.77866432975817021</span>)) <span class="keyword">else</span> p(<span class="built_in">exec</span>(<span class="number">31084432670685473</span>)) <span class="comment">#type:ignore</span></span><br></pre></td></tr></table></figure><p>由于<code>methodcaller()</code> 的第一个参数必须是字符串，说明 <code>exec()</code> 方法是一个把 “int” 转 “str” 的方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(py39) C:\Users\Lenovo\OneDrive\Desktop\chal&gt;python</span><br><span class="line">Python 3.9.23 | packaged by conda-forge | (main, Jun  4 2025, 17:49:16) [MSC v.1929 64 bit (AMD64)] on win32</span><br><span class="line">Type <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> or <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; import init</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(init.exec(7882826979490488676))</span><br><span class="line">mem_read</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>继续替换：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># plus.exec.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> methodcaller</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> Uc, UC_ARCH_X86, UC_MODE_64</span><br><span class="line"></span><br><span class="line">e = Uc(UC_ARCH_X86, UC_MODE_64)</span><br><span class="line"></span><br><span class="line">methodcaller(<span class="string">&quot;mem_map&quot;</span>, <span class="number">16777216</span>, <span class="number">2097152</span>)(e)</span><br><span class="line"></span><br><span class="line">methodcaller(<span class="string">&quot;mem_map&quot;</span>, <span class="number">18874368</span>, <span class="number">65536</span>)(e)</span><br><span class="line"></span><br><span class="line">methodcaller(<span class="string">&quot;mem_write&quot;</span>, <span class="number">16777216</span>, </span><br><span class="line"><span class="string">b&quot;\xf3\x0f\x1e\xfaUH\x89\xe5H\x89&#125;\xe8\x89u\xe4\x89\xd0\x88E\xe0\xc7E\xfc\x00\x00\x00\x00\xebL\x8bU\xfcH\x8bE\xe8H\x01\xd0\x0f\xb6\x00\x8d\x0c\xc5\x00\x00\x00\x00\x8bU\xfcH\x8bE\xe8H\x01\xd0\x0f\xb6\x002E\xe0\x8d4\x01\x8bU\xfcH\x8bE\xe8H\x01\xd0\x0f\xb6\x00\xc1\xe0\x05\x89\xc1\x8bU\xfcH\x8bE\xe8H\x01\xd0\x8d\x14\x0e\x88\x10\x83E\xfc\x01\x8bE\xfc;E\xe4r\xac\x90\x90]&quot;</span>,</span><br><span class="line">)(e)</span><br><span class="line"></span><br><span class="line">methodcaller(<span class="string">&quot;reg_write&quot;</span>, <span class="number">44</span>, <span class="number">18939903</span>)(e)</span><br><span class="line"></span><br><span class="line">methodcaller(<span class="string">&quot;mem_write&quot;</span>, <span class="number">18878464</span>, <span class="built_in">input</span>(<span class="string">&quot;[+]input your flag: &quot;</span>).encode())(e)</span><br><span class="line"></span><br><span class="line">methodcaller(<span class="string">&quot;reg_write&quot;</span>, <span class="number">39</span>, <span class="number">18878464</span>)(e)</span><br><span class="line"></span><br><span class="line">methodcaller(<span class="string">&quot;reg_write&quot;</span>, <span class="number">43</span>, <span class="number">44</span>)(e)</span><br><span class="line"></span><br><span class="line">methodcaller(<span class="string">&quot;reg_write&quot;</span>, <span class="number">40</span>, <span class="number">7</span>)(e)</span><br><span class="line"></span><br><span class="line">methodcaller(<span class="string">&quot;emu_start&quot;</span>, <span class="number">16777216</span>, <span class="number">16777332</span>)(e)</span><br><span class="line"></span><br><span class="line">(</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;good&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">        base64.b64encode(e.mem_read(<span class="number">18878464</span>, <span class="number">44</span>)).decode() == <span class="string">&quot;425MvHMxtLqZ3ty3RZkw3mwwulNRjkswbpkDMK+3CDCOtbe6kzAqPyrcEAI=&quot;</span></span><br><span class="line">    )</span><br><span class="line">elseprint(<span class="string">&quot;no way!&quot;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>再把methodcaller去了</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># plus.exec.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> Uc, UC_ARCH_X86, UC_MODE_64</span><br><span class="line"></span><br><span class="line">e = Uc(UC_ARCH_X86, UC_MODE_64) <span class="comment">#说明：用 Unicorn 创建 x86_64 的仿真器实例 e。</span></span><br><span class="line">e.mem_map(<span class="number">16777216</span>, <span class="number">2097152</span>)</span><br><span class="line">e.mem_map(<span class="number">18874368</span>, <span class="number">65536</span>) <span class="comment">#说明：在虚拟地址 0x1000000（16777216）和 0x1200000（18874368）分别映射一段内存，长度分别是 0x200000（2097152）和 0x10000（65536）。这些是写入 shellcode/数据和 flag 的内存区域。</span></span><br><span class="line">e.mem_write(<span class="number">16777216</span>, <span class="string">b&quot;\xf3\x0f\x1e\xfaUH\x89\xe5H\x89&#125;\xe8\x89u\xe4\x89\xd0\x88E\xe0\xc7E\xfc\x00\x00\x00\x00\xebL\x8bU\xfcH\x8bE\xe8H\x01\xd0\x0f\xb6\x00\x8d\x0c\xc5\x00\x00\x00\x00\x8bU\xfcH\x8bE\xe8H\x01\xd0\x0f\xb6\x002E\xe0\x8d4\x01\x8bU\xfcH\x8bE\xe8H\x01\xd0\x0f\xb6\x00\xc1\xe0\x05\x89\xc1\x8bU\xfcH\x8bE\xe8H\x01\xd0\x8d\x14\x0e\x88\x10\x83E\xfc\x01\x8bE\xfc;E\xe4r\xac\x90\x90]&quot;</span>)</span><br><span class="line"><span class="comment">#把一段“字节串”写到 0x1000000</span></span><br><span class="line">e.reg_write(<span class="number">44</span>, <span class="number">18939903</span>) <span class="comment">#把数值 18939903 写到寄存器编号 44</span></span><br><span class="line">e.mem_write(<span class="number">18878464</span>, <span class="built_in">input</span>(<span class="string">&quot;[+]input your flag: &quot;</span>).encode())</span><br><span class="line">e.reg_write(<span class="number">39</span>, <span class="number">18878464</span>) <span class="comment"># input</span></span><br><span class="line">e.reg_write(<span class="number">43</span>, <span class="number">44</span>) <span class="comment"># length</span></span><br><span class="line">e.reg_write(<span class="number">40</span>, <span class="number">7</span>) <span class="comment"># key  #把相关寄存器设置为相应地址/值（39、43、40 为寄存器 id）。</span></span><br><span class="line">e.emu_start(<span class="number">16777216</span>, <span class="number">16777332</span>) <span class="comment">#从 0x1000000 执行到 0x1000000 + ?（结束地址 16777332），在这段内执行之前写入的 shellcode。</span></span><br><span class="line">(</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;good&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">        base64.b64encode(e.mem_read(<span class="number">18878464</span>, <span class="number">44</span>)).decode() == <span class="string">&quot;425MvHMxtLqZ3ty3RZkw3mwwulNRjkswbpkDMK+3CDCOtbe6kzAqPyrcEAI=&quot;</span></span><br><span class="line">    )</span><br><span class="line">elseprint(<span class="string">&quot;no way!&quot;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>现在分析那段字节串代表的指令：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="string">b&quot;\xf3\x0f\x1e\xfaUH\x89\xe5H\x89&#125;\xe8\x89u\xe4\x89\xd0\x88E\xe0\xc7E\xfc\x00\x00\x00\x00\xebL\x8bU\xfcH\x8bE\xe8H\x01\xd0\x0f\xb6\x00\x8d\x0c\xc5\x00\x00\x00\x00\x8bU\xfcH\x8bE\xe8H\x01\xd0\x0f\xb6\x002E\xe0\x8d4\x01\x8bU\xfcH\x8bE\xe8H\x01\xd0\x0f\xb6\x00\xc1\xe0\x05\x89\xc1\x8bU\xfcH\x8bE\xe8H\x01\xd0\x8d\x14\x0e\x88\x10\x83E\xfc\x01\x8bE\xfc;E\xe4r\xac\x90\x90&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;C:\Users\Lenovo\OneDrive\Desktop\chal\code.bin&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(data)</span><br></pre></td></tr></table></figure><p>然后用ida打开这个code.bin就可以看到反汇编逻辑了</p><p><img data-src="/images/逆向中的misc/py/pyd逆向.png" alt="pyd逆向"></p><h2 id="获取函数参数"><a href="#获取函数参数" class="headerlink" title="获取函数参数"></a>获取函数参数</h2><p>那怎么看这个反汇编传的参数都是什么呢？</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">e.reg_write(<span class="number">39</span>, <span class="number">18878464</span>) <span class="comment"># input</span></span><br><span class="line">e.reg_write(<span class="number">43</span>, <span class="number">44</span>) <span class="comment"># length</span></span><br><span class="line">e.reg_write(<span class="number">40</span>, <span class="number">7</span>) <span class="comment"># key  #把相关寄存器设置为相应地址/值（39、43、40 为寄存器 id）。</span></span><br></pre></td></tr></table></figure><p>这里它把对应寄存器编号赋值，我们可以打印一下这些编号对应寄存器</p><p>Unicorn 使用 <strong>统一的常量命名</strong>，<code>UC_X86_REG_*</code> 代表 x86/x86-64 的寄存器。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unicorn.x86_const <span class="keyword">as</span> xc</span><br><span class="line"><span class="keyword">import</span> unicorn</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line"><span class="comment"># unicorn 版本信息（可选）</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    ver = unicorn.__version__</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    ver = <span class="string">&quot;&lt;unknown&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 收集 UC_X86_REG_* 常量</span></span><br><span class="line">consts = &#123;name: <span class="built_in">getattr</span>(xc, name) <span class="keyword">for</span> name <span class="keyword">in</span> <span class="built_in">dir</span>(xc) <span class="keyword">if</span> name.startswith(<span class="string">&quot;UC_X86_REG_&quot;</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反查表： value -&gt; name (若有冲突，保留列表)</span></span><br><span class="line">inv = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> name, val <span class="keyword">in</span> consts.items():</span><br><span class="line">    inv.setdefault(val, []).append(name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出信息</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;unicorn version:&quot;</span>, ver)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Total UC_X86_REG_* constants:&quot;</span>, <span class="built_in">len</span>(consts))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n-- 常量按数值排序（value -&gt; name） --\n&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> val <span class="keyword">in</span> <span class="built_in">sorted</span>(inv):</span><br><span class="line">    names = <span class="string">&quot;, &quot;</span>.join(inv[val])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;val:4d&#125;</span> -&gt; <span class="subst">&#123;names&#125;</span>&quot;</span>)(<span class="number">43</span>))</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><span class="line">(py39) C:\Users\Lenovo\OneDrive\Desktop\chal&gt;python 2.py</span><br><span class="line">unicorn version: 2.1.4</span><br><span class="line">Total UC_X86_REG_* constants: 240</span><br><span class="line"></span><br><span class="line">-- 常量按数值排序（value -&gt; name） --</span><br><span class="line"></span><br><span class="line">   0 -&gt; UC_X86_REG_INVALID</span><br><span class="line">   1 -&gt; UC_X86_REG_AH</span><br><span class="line">   2 -&gt; UC_X86_REG_AL</span><br><span class="line">   3 -&gt; UC_X86_REG_AX</span><br><span class="line">   4 -&gt; UC_X86_REG_BH</span><br><span class="line">   5 -&gt; UC_X86_REG_BL</span><br><span class="line">   6 -&gt; UC_X86_REG_BP</span><br><span class="line">   7 -&gt; UC_X86_REG_BPL</span><br><span class="line">   8 -&gt; UC_X86_REG_BX</span><br><span class="line">   9 -&gt; UC_X86_REG_CH</span><br><span class="line">  10 -&gt; UC_X86_REG_CL</span><br><span class="line">  11 -&gt; UC_X86_REG_CS</span><br><span class="line">  12 -&gt; UC_X86_REG_CX</span><br><span class="line">  13 -&gt; UC_X86_REG_DH</span><br><span class="line">  14 -&gt; UC_X86_REG_DI</span><br><span class="line">  15 -&gt; UC_X86_REG_DIL</span><br><span class="line">  16 -&gt; UC_X86_REG_DL</span><br><span class="line">  17 -&gt; UC_X86_REG_DS</span><br><span class="line">  18 -&gt; UC_X86_REG_DX</span><br><span class="line">  19 -&gt; UC_X86_REG_EAX</span><br><span class="line">  20 -&gt; UC_X86_REG_EBP</span><br><span class="line">  21 -&gt; UC_X86_REG_EBX</span><br><span class="line">  22 -&gt; UC_X86_REG_ECX</span><br><span class="line">  23 -&gt; UC_X86_REG_EDI</span><br><span class="line">  24 -&gt; UC_X86_REG_EDX</span><br><span class="line">  25 -&gt; UC_X86_REG_EFLAGS</span><br><span class="line">  26 -&gt; UC_X86_REG_EIP</span><br><span class="line">  28 -&gt; UC_X86_REG_ES</span><br><span class="line">  29 -&gt; UC_X86_REG_ESI</span><br><span class="line">  30 -&gt; UC_X86_REG_ESP</span><br><span class="line">  31 -&gt; UC_X86_REG_FPSW</span><br><span class="line">  32 -&gt; UC_X86_REG_FS</span><br><span class="line">  33 -&gt; UC_X86_REG_GS</span><br><span class="line">  34 -&gt; UC_X86_REG_IP</span><br><span class="line">  35 -&gt; UC_X86_REG_RAX</span><br><span class="line">  36 -&gt; UC_X86_REG_RBP</span><br><span class="line">  37 -&gt; UC_X86_REG_RBX</span><br><span class="line">  38 -&gt; UC_X86_REG_RCX</span><br><span class="line">  39 -&gt; UC_X86_REG_RDI</span><br><span class="line">  40 -&gt; UC_X86_REG_RDX</span><br><span class="line">  41 -&gt; UC_X86_REG_RIP</span><br><span class="line">  43 -&gt; UC_X86_REG_RSI</span><br><span class="line">  44 -&gt; UC_X86_REG_RSP</span><br><span class="line">  45 -&gt; UC_X86_REG_SI</span><br><span class="line">  46 -&gt; UC_X86_REG_SIL</span><br><span class="line">  47 -&gt; UC_X86_REG_SP</span><br><span class="line">  48 -&gt; UC_X86_REG_SPL</span><br><span class="line">  49 -&gt; UC_X86_REG_SS</span><br><span class="line">  50 -&gt; UC_X86_REG_CR0</span><br><span class="line">  51 -&gt; UC_X86_REG_CR1</span><br><span class="line">  52 -&gt; UC_X86_REG_CR2</span><br><span class="line">  53 -&gt; UC_X86_REG_CR3</span><br><span class="line">  54 -&gt; UC_X86_REG_CR4</span><br><span class="line">  58 -&gt; UC_X86_REG_CR8</span><br><span class="line">  66 -&gt; UC_X86_REG_DR0</span><br><span class="line">  67 -&gt; UC_X86_REG_DR1</span><br><span class="line">  68 -&gt; UC_X86_REG_DR2</span><br><span class="line">  69 -&gt; UC_X86_REG_DR3</span><br><span class="line">  70 -&gt; UC_X86_REG_DR4</span><br><span class="line">  71 -&gt; UC_X86_REG_DR5</span><br><span class="line">  72 -&gt; UC_X86_REG_DR6</span><br><span class="line">  73 -&gt; UC_X86_REG_DR7</span><br><span class="line">  82 -&gt; UC_X86_REG_FP0</span><br><span class="line">  83 -&gt; UC_X86_REG_FP1</span><br><span class="line">  84 -&gt; UC_X86_REG_FP2</span><br><span class="line">  85 -&gt; UC_X86_REG_FP3</span><br><span class="line">  86 -&gt; UC_X86_REG_FP4</span><br><span class="line">  87 -&gt; UC_X86_REG_FP5</span><br><span class="line">  88 -&gt; UC_X86_REG_FP6</span><br><span class="line">  89 -&gt; UC_X86_REG_FP7</span><br><span class="line">  90 -&gt; UC_X86_REG_K0</span><br><span class="line">  91 -&gt; UC_X86_REG_K1</span><br><span class="line">  92 -&gt; UC_X86_REG_K2</span><br><span class="line">  93 -&gt; UC_X86_REG_K3</span><br><span class="line">  94 -&gt; UC_X86_REG_K4</span><br><span class="line">  95 -&gt; UC_X86_REG_K5</span><br><span class="line">  96 -&gt; UC_X86_REG_K6</span><br><span class="line">  97 -&gt; UC_X86_REG_K7</span><br><span class="line">  98 -&gt; UC_X86_REG_MM0</span><br><span class="line">  99 -&gt; UC_X86_REG_MM1</span><br><span class="line"> 100 -&gt; UC_X86_REG_MM2</span><br><span class="line"> 101 -&gt; UC_X86_REG_MM3</span><br><span class="line"> 102 -&gt; UC_X86_REG_MM4</span><br><span class="line"> 103 -&gt; UC_X86_REG_MM5</span><br><span class="line"> 104 -&gt; UC_X86_REG_MM6</span><br><span class="line"> 105 -&gt; UC_X86_REG_MM7</span><br><span class="line"> 106 -&gt; UC_X86_REG_R8</span><br><span class="line"> 107 -&gt; UC_X86_REG_R9</span><br><span class="line"> 108 -&gt; UC_X86_REG_R10</span><br><span class="line"> 109 -&gt; UC_X86_REG_R11</span><br><span class="line"> 110 -&gt; UC_X86_REG_R12</span><br><span class="line"> 111 -&gt; UC_X86_REG_R13</span><br><span class="line"> 112 -&gt; UC_X86_REG_R14</span><br><span class="line"> 113 -&gt; UC_X86_REG_R15</span><br><span class="line"> 114 -&gt; UC_X86_REG_ST0</span><br><span class="line"> 115 -&gt; UC_X86_REG_ST1</span><br><span class="line"> 116 -&gt; UC_X86_REG_ST2</span><br><span class="line"> 117 -&gt; UC_X86_REG_ST3</span><br><span class="line"> 118 -&gt; UC_X86_REG_ST4</span><br><span class="line"> 119 -&gt; UC_X86_REG_ST5</span><br><span class="line"> 120 -&gt; UC_X86_REG_ST6</span><br><span class="line"> 121 -&gt; UC_X86_REG_ST7</span><br><span class="line"> 122 -&gt; UC_X86_REG_XMM0</span><br><span class="line"> 123 -&gt; UC_X86_REG_XMM1</span><br><span class="line"> 124 -&gt; UC_X86_REG_XMM2</span><br><span class="line"> 125 -&gt; UC_X86_REG_XMM3</span><br><span class="line"> 126 -&gt; UC_X86_REG_XMM4</span><br><span class="line"> 127 -&gt; UC_X86_REG_XMM5</span><br><span class="line"> 128 -&gt; UC_X86_REG_XMM6</span><br><span class="line"> 129 -&gt; UC_X86_REG_XMM7</span><br><span class="line"> 130 -&gt; UC_X86_REG_XMM8</span><br><span class="line"> 131 -&gt; UC_X86_REG_XMM9</span><br><span class="line"> 132 -&gt; UC_X86_REG_XMM10</span><br><span class="line"> 133 -&gt; UC_X86_REG_XMM11</span><br><span class="line"> 134 -&gt; UC_X86_REG_XMM12</span><br><span class="line"> 135 -&gt; UC_X86_REG_XMM13</span><br><span class="line"> 136 -&gt; UC_X86_REG_XMM14</span><br><span class="line"> 137 -&gt; UC_X86_REG_XMM15</span><br><span class="line"> 138 -&gt; UC_X86_REG_XMM16</span><br><span class="line"> 139 -&gt; UC_X86_REG_XMM17</span><br><span class="line"> 140 -&gt; UC_X86_REG_XMM18</span><br><span class="line"> 141 -&gt; UC_X86_REG_XMM19</span><br><span class="line"> 142 -&gt; UC_X86_REG_XMM20</span><br><span class="line"> 143 -&gt; UC_X86_REG_XMM21</span><br><span class="line"> 144 -&gt; UC_X86_REG_XMM22</span><br><span class="line"> 145 -&gt; UC_X86_REG_XMM23</span><br><span class="line"> 146 -&gt; UC_X86_REG_XMM24</span><br><span class="line"> 147 -&gt; UC_X86_REG_XMM25</span><br><span class="line"> 148 -&gt; UC_X86_REG_XMM26</span><br><span class="line"> 149 -&gt; UC_X86_REG_XMM27</span><br><span class="line"> 150 -&gt; UC_X86_REG_XMM28</span><br><span class="line"> 151 -&gt; UC_X86_REG_XMM29</span><br><span class="line"> 152 -&gt; UC_X86_REG_XMM30</span><br><span class="line"> 153 -&gt; UC_X86_REG_XMM31</span><br><span class="line"> 154 -&gt; UC_X86_REG_YMM0</span><br><span class="line"> 155 -&gt; UC_X86_REG_YMM1</span><br><span class="line"> 156 -&gt; UC_X86_REG_YMM2</span><br><span class="line"> 157 -&gt; UC_X86_REG_YMM3</span><br><span class="line"> 158 -&gt; UC_X86_REG_YMM4</span><br><span class="line"> 159 -&gt; UC_X86_REG_YMM5</span><br><span class="line"> 160 -&gt; UC_X86_REG_YMM6</span><br><span class="line"> 161 -&gt; UC_X86_REG_YMM7</span><br><span class="line"> 162 -&gt; UC_X86_REG_YMM8</span><br><span class="line"> 163 -&gt; UC_X86_REG_YMM9</span><br><span class="line"> 164 -&gt; UC_X86_REG_YMM10</span><br><span class="line"> 165 -&gt; UC_X86_REG_YMM11</span><br><span class="line"> 166 -&gt; UC_X86_REG_YMM12</span><br><span class="line"> 167 -&gt; UC_X86_REG_YMM13</span><br><span class="line"> 168 -&gt; UC_X86_REG_YMM14</span><br><span class="line"> 169 -&gt; UC_X86_REG_YMM15</span><br><span class="line"> 170 -&gt; UC_X86_REG_YMM16</span><br><span class="line"> 171 -&gt; UC_X86_REG_YMM17</span><br><span class="line"> 172 -&gt; UC_X86_REG_YMM18</span><br><span class="line"> 173 -&gt; UC_X86_REG_YMM19</span><br><span class="line"> 174 -&gt; UC_X86_REG_YMM20</span><br><span class="line"> 175 -&gt; UC_X86_REG_YMM21</span><br><span class="line"> 176 -&gt; UC_X86_REG_YMM22</span><br><span class="line"> 177 -&gt; UC_X86_REG_YMM23</span><br><span class="line"> 178 -&gt; UC_X86_REG_YMM24</span><br><span class="line"> 179 -&gt; UC_X86_REG_YMM25</span><br><span class="line"> 180 -&gt; UC_X86_REG_YMM26</span><br><span class="line"> 181 -&gt; UC_X86_REG_YMM27</span><br><span class="line"> 182 -&gt; UC_X86_REG_YMM28</span><br><span class="line"> 183 -&gt; UC_X86_REG_YMM29</span><br><span class="line"> 184 -&gt; UC_X86_REG_YMM30</span><br><span class="line"> 185 -&gt; UC_X86_REG_YMM31</span><br><span class="line"> 186 -&gt; UC_X86_REG_ZMM0</span><br><span class="line"> 187 -&gt; UC_X86_REG_ZMM1</span><br><span class="line"> 188 -&gt; UC_X86_REG_ZMM2</span><br><span class="line"> 189 -&gt; UC_X86_REG_ZMM3</span><br><span class="line"> 190 -&gt; UC_X86_REG_ZMM4</span><br><span class="line"> 191 -&gt; UC_X86_REG_ZMM5</span><br><span class="line"> 192 -&gt; UC_X86_REG_ZMM6</span><br><span class="line"> 193 -&gt; UC_X86_REG_ZMM7</span><br><span class="line"> 194 -&gt; UC_X86_REG_ZMM8</span><br><span class="line"> 195 -&gt; UC_X86_REG_ZMM9</span><br><span class="line"> 196 -&gt; UC_X86_REG_ZMM10</span><br><span class="line"> 197 -&gt; UC_X86_REG_ZMM11</span><br><span class="line"> 198 -&gt; UC_X86_REG_ZMM12</span><br><span class="line"> 199 -&gt; UC_X86_REG_ZMM13</span><br><span class="line"> 200 -&gt; UC_X86_REG_ZMM14</span><br><span class="line"> 201 -&gt; UC_X86_REG_ZMM15</span><br><span class="line"> 202 -&gt; UC_X86_REG_ZMM16</span><br><span class="line"> 203 -&gt; UC_X86_REG_ZMM17</span><br><span class="line"> 204 -&gt; UC_X86_REG_ZMM18</span><br><span class="line"> 205 -&gt; UC_X86_REG_ZMM19</span><br><span class="line"> 206 -&gt; UC_X86_REG_ZMM20</span><br><span class="line"> 207 -&gt; UC_X86_REG_ZMM21</span><br><span class="line"> 208 -&gt; UC_X86_REG_ZMM22</span><br><span class="line"> 209 -&gt; UC_X86_REG_ZMM23</span><br><span class="line"> 210 -&gt; UC_X86_REG_ZMM24</span><br><span class="line"> 211 -&gt; UC_X86_REG_ZMM25</span><br><span class="line"> 212 -&gt; UC_X86_REG_ZMM26</span><br><span class="line"> 213 -&gt; UC_X86_REG_ZMM27</span><br><span class="line"> 214 -&gt; UC_X86_REG_ZMM28</span><br><span class="line"> 215 -&gt; UC_X86_REG_ZMM29</span><br><span class="line"> 216 -&gt; UC_X86_REG_ZMM30</span><br><span class="line"> 217 -&gt; UC_X86_REG_ZMM31</span><br><span class="line"> 218 -&gt; UC_X86_REG_R8B</span><br><span class="line"> 219 -&gt; UC_X86_REG_R9B</span><br><span class="line"> 220 -&gt; UC_X86_REG_R10B</span><br><span class="line"> 221 -&gt; UC_X86_REG_R11B</span><br><span class="line"> 222 -&gt; UC_X86_REG_R12B</span><br><span class="line"> 223 -&gt; UC_X86_REG_R13B</span><br><span class="line"> 224 -&gt; UC_X86_REG_R14B</span><br><span class="line"> 225 -&gt; UC_X86_REG_R15B</span><br><span class="line"> 226 -&gt; UC_X86_REG_R8D</span><br><span class="line"> 227 -&gt; UC_X86_REG_R9D</span><br><span class="line"> 228 -&gt; UC_X86_REG_R10D</span><br><span class="line"> 229 -&gt; UC_X86_REG_R11D</span><br><span class="line"> 230 -&gt; UC_X86_REG_R12D</span><br><span class="line"> 231 -&gt; UC_X86_REG_R13D</span><br><span class="line"> 232 -&gt; UC_X86_REG_R14D</span><br><span class="line"> 233 -&gt; UC_X86_REG_R15D</span><br><span class="line"> 234 -&gt; UC_X86_REG_R8W</span><br><span class="line"> 235 -&gt; UC_X86_REG_R9W</span><br><span class="line"> 236 -&gt; UC_X86_REG_R10W</span><br><span class="line"> 237 -&gt; UC_X86_REG_R11W</span><br><span class="line"> 238 -&gt; UC_X86_REG_R12W</span><br><span class="line"> 239 -&gt; UC_X86_REG_R13W</span><br><span class="line"> 240 -&gt; UC_X86_REG_R14W</span><br><span class="line"> 241 -&gt; UC_X86_REG_R15W</span><br><span class="line"> 242 -&gt; UC_X86_REG_IDTR</span><br><span class="line"> 243 -&gt; UC_X86_REG_GDTR</span><br><span class="line"> 244 -&gt; UC_X86_REG_LDTR</span><br><span class="line"> 245 -&gt; UC_X86_REG_TR</span><br><span class="line"> 246 -&gt; UC_X86_REG_FPCW</span><br><span class="line"> 247 -&gt; UC_X86_REG_FPTAG</span><br><span class="line"> 248 -&gt; UC_X86_REG_MSR</span><br><span class="line"> 249 -&gt; UC_X86_REG_MXCSR</span><br><span class="line"> 250 -&gt; UC_X86_REG_FS_BASE</span><br><span class="line"> 251 -&gt; UC_X86_REG_GS_BASE</span><br><span class="line"> 252 -&gt; UC_X86_REG_FLAGS</span><br><span class="line"> 253 -&gt; UC_X86_REG_RFLAGS</span><br><span class="line"> 254 -&gt; UC_X86_REG_FIP</span><br><span class="line"> 255 -&gt; UC_X86_REG_FCS</span><br><span class="line"> 256 -&gt; UC_X86_REG_FDP</span><br><span class="line"> 257 -&gt; UC_X86_REG_FDS</span><br><span class="line"> 258 -&gt; UC_X86_REG_FOP</span><br><span class="line"> 259 -&gt; UC_X86_REG_ENDINGRSI</span><br></pre></td></tr></table></figure><p>64 位下：函数参数主要是 通过寄存器传递 的，而不是栈。前 6 个参数分别放在：</p><ul><li><p>rdi → 第 1 个参数</p></li><li><p>rsi → 第 2 个参数</p></li><li><p>rdx → 第 3 个参数</p></li><li><p>rcx → 第 4 个参数</p></li><li><p>r8 → 第 5 个参数</p></li><li><p>r9 → 第 6 个参数</p></li></ul><p>所以a3就是key也就是7</p><h2 id="exp："><a href="#exp：" class="headerlink" title="exp："></a>exp：</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">data: <span class="built_in">bytes</span>, key: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    result = <span class="built_in">bytearray</span>()</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">40</span> * b + (key ^ b)) &amp; <span class="number">0xFF</span> == e:</span><br><span class="line">                    result.append(b)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    enc = <span class="string">&quot;425MvHMxtLqZ3ty3RZkw3mwwulNRjkswbpkDMK+3CDCOtbe6kzAqPyrcEAI=&quot;</span></span><br><span class="line">    b = base64.b64decode(enc)</span><br><span class="line">    dec = decrypt(b, <span class="number">7</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(dec.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"><span class="keyword">except</span> UnicodeDecodeError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)<span class="keyword">or</span> <span class="keyword">as</span> e:</span><br><span class="line"><span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure><p>flag：DASCTF{un1c0rn_1s_u4fal_And_h0w_ab0ut_exec?}</p><h1 id="reference："><a href="#reference：" class="headerlink" title="reference："></a>reference：</h1><p><a href="https://cn-sec.com/archives/4619296.html">2025 羊城杯网络安全大赛 线上初赛 逆向 PLUS Writeup | CN-SEC 中文网</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h1&gt;&lt;p&gt;通过一道例题学习一下pyd逆向，pyd就是动态链接库，和dll一样，在linux平台以.so命名&lt;/p&gt;
&lt;h1 id=&quot;做题流程：</summary>
      
    
    
    
    <category term="ctf逆向中的misc" scheme="http://example.com/categories/ctf%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84misc/"/>
    
    <category term="py逆向" scheme="http://example.com/categories/ctf%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84misc/py%E9%80%86%E5%90%91/"/>
    
    
    <category term="pyd逆向" scheme="http://example.com/tags/pyd%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>tauri框架逆向</title>
    <link href="http://example.com/2025/10/27/ctf%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84misc/tauri%E6%A1%86%E6%9E%B6%E9%80%86%E5%90%91/"/>
    <id>http://example.com/2025/10/27/ctf%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84misc/tauri%E6%A1%86%E6%9E%B6%E9%80%86%E5%90%91/</id>
    <published>2025-10-26T16:00:00.000Z</published>
    <updated>2025-10-31T09:50:39.563Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是tauri框架？"><a href="#什么是tauri框架？" class="headerlink" title="什么是tauri框架？"></a>什么是tauri框架？</h1><p>Tauri 是一个用于构建桌面应用的开源框架：前端用任意会输出 HTML/JS/CSS 的框架（如 React/Vue/Svelte），后端用 Rust（或平台原生）打包成本地可执行文件。它通过 WebView 显示前端页面，并通过安全的 IPC（消息调用）把前端和 Rust 后端连接起来。</p><p>简单来说就是tarti框架构建出来的exe文件，集成了前端和后端代码，打包进了exe。运行这个exe，前端代码通过系统webview就可以在界面显示而不需要借助任何浏览器</p><p><img data-src="/images/逆向中的misc/tauri/app.png" alt="app"></p><p>通常tauri框架写出的app长上面那样</p><h1 id="tauri框架逆向："><a href="#tauri框架逆向：" class="headerlink" title="tauri框架逆向："></a>tauri框架逆向：</h1><h2 id="运行逻辑："><a href="#运行逻辑：" class="headerlink" title="运行逻辑："></a>运行逻辑：</h2><ul><li><p>你双击 <code>.exe</code>；</p></li><li><p>Rust 程序启动；</p></li><li><p>创建一个原生窗口；</p></li><li><p>在窗口中加载 WebView；</p></li><li><p>WebView 渲染 HTML/JS（从内嵌或外部资源读取）；</p></li><li><p>JS 通过 IPC 调用 Rust 函数，Rust 返回数据给前端。</p></li></ul><h2 id="逆向步骤："><a href="#逆向步骤：" class="headerlink" title="逆向步骤："></a>逆向步骤：</h2><p>一般flag都放在exe的静态资源部分。Tauri 会根据配置文件中是否开启压缩来打包静态资源文件，若压缩选项开启（默认情况），其会使用 brotli 算法对资源进行压缩后再打包。</p><p>我们可以找到静态资源所在地，然后dump下来用brotli解密后分析静态资源</p><p>拿2025年羊城杯的easyTauri.exe举例</p><h3 id="定位静态资源："><a href="#定位静态资源：" class="headerlink" title="定位静态资源："></a>定位静态资源：</h3><p>先shift+f12搜flag，如果没有就去找index.html，index.html就是最开始的web页面</p><p>定位到这个字符串后交叉引用，找到一个形似文件表结构的部分</p><p><img data-src="/images/逆向中的misc/tauri/file.png" alt="file"></p><p>其中</p><ul><li><p>0x0000000140642A40是文件名</p></li><li><p>0x0000000140642A48 ~ 0x0000000140642A4F是文件名长度，正好”/index_flag.html”就是16字节</p></li><li><p>0x0000000140642A50存储文件内容</p></li><li><p>0x0000000140642A58 ~ 0x0000000140642A5F是文件内容长度</p></li></ul><p>我们找到这个结构之后就把文件内容dump下来解密就好了</p><p><strong>注意 brotli 对文件的完整性要求似乎很高，多一个或少一个字节都会报错。</strong></p><p>这里给一个ida python的dump脚本：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os, idc</span><br><span class="line"></span><br><span class="line">start_ea = <span class="number">0x14063C8C1</span></span><br><span class="line">size = <span class="number">0x231</span></span><br><span class="line"></span><br><span class="line">out_path = os.path.join(os.path.dirname(idc.get_idb_path()) <span class="keyword">or</span> os.getcwd(), <span class="string">&quot;dump.bin&quot;</span>) //拼接ida分析程序地址和自定义的文件名</span><br><span class="line"></span><br><span class="line">data = idc.get_bytes(start_ea, size)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(out_path, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(data, <span class="built_in">str</span>): //这里<span class="keyword">if</span>分支是在处理python2中get_bytes函数返回<span class="built_in">str</span>类型的问题</span><br><span class="line">        f.write(data.encode(<span class="string">&#x27;latin-1&#x27;</span>)) //latin-<span class="number">1</span>是 <span class="number">1</span> 字节一对一映射，如果用utf-<span class="number">8</span>可能报错</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        f.write(data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Wrote:&quot;</span>, out_path)</span><br></pre></td></tr></table></figure><p>然后拿到这个新的dump.bin文件后再用brotli算法解密</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> brotli</span><br><span class="line">a = <span class="built_in">open</span>(<span class="string">r&quot;C:\Users\Lenovo\OneDrive\Desktop\dump.bin&quot;</span>, <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(a))</span><br><span class="line">decompressed = brotli.decompress(a)</span><br><span class="line"><span class="built_in">open</span>(<span class="string">&quot;dump&quot;</span>, <span class="string">&quot;wb&quot;</span>).write(decompressed)</span><br></pre></td></tr></table></figure><p>然后就拿到js写的前端文件了</p><h3 id="前端分析"><a href="#前端分析" class="headerlink" title="前端分析"></a>前端分析</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Tauri App<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/main.js&quot;</span> <span class="attr">defer</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">main</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://tauri.app&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to Tauri 2.0<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>你知道的，这个文件往往是测试的时候使用的，当你找到了这个文件，说明你可以阅读以下hint：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>   1. 我混淆了js，当你觉得那是一大坨恶心玩意的时候，应该试试开发一个最简Tauri项目<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>   2. 出题人吃过release无pdb的这一坨，当你分析完js一定能找到对应的native函数<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span> <span class="attr">id</span>=<span class="string">&quot;greet-form&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;greet-input&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter a Flag...&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Check<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;greet-msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>如果前端文件index没有flag，那就把所有js文件都dump下来看看</p><p><img data-src="/images/逆向中的misc/tauri/静态表.png" alt="静态表"></p><p>找到这种形似文件结构的最开始的地址，然后把他们全dump下来</p><p>把要求扔给ai写下面的脚本，但要求要说清楚</p><p>从0x140642660开始是文件结构，每个文件开始8个字节存储文件名地址，后8字节按小端序存储文件名对应字符串字节数，然后8个字节存文件内容地址，后8个字节存文件内容占大小，然后是下一个文件结构，帮我把所有的文件内容dump出来，然后通过brotli算法解密，还原js静态资源。只读js文件和html文件</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line">ag-<span class="number">0</span>-1j8in2hh6ag-<span class="number">1</span>-1j8in2hh6<span class="comment"># dump_js_html_only.py</span></span><br><span class="line"><span class="comment"># 功能：仅从文件结构中导出 .js 和 .html 文件，并尝试 brotli 解压</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os, sys, idc, idaapi, subprocess, tempfile, shutil</span><br><span class="line"></span><br><span class="line">TABLE_START = <span class="number">0x140642660</span>   <span class="comment"># 文件表起始地址</span></span><br><span class="line">ENTRY_SIZE = <span class="number">32</span>             <span class="comment"># 每个条目大小：8+8+8+8</span></span><br><span class="line">MAX_ENTRIES = <span class="number">10000</span></span><br><span class="line">OUT_DIR = os.path.join(os.path.dirname(idc.get_idb_path()) <span class="keyword">or</span> os.getcwd(), <span class="string">&quot;dump_js_html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(OUT_DIR):</span><br><span class="line">    os.makedirs(OUT_DIR)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_qword</span>(<span class="params">ea</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> idc.get_qword(ea)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        b = idc.get_bytes(ea, <span class="number">8</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> b:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        v = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i, by <span class="keyword">in</span> <span class="built_in">enumerate</span>(b <span class="keyword">if</span> <span class="built_in">isinstance</span>(b, <span class="built_in">bytes</span>) <span class="keyword">else</span> b.encode(<span class="string">&#x27;latin-1&#x27;</span>)):</span><br><span class="line">            v |= (by &amp; <span class="number">0xFF</span>) &lt;&lt; (i*<span class="number">8</span>)</span><br><span class="line">        <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_bytes</span>(<span class="params">ea, size</span>):</span><br><span class="line">    <span class="keyword">return</span> idc.get_bytes(ea, size)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 尝试导入 brotli 模块或 CLI</span></span><br><span class="line">brotli_decompress = <span class="literal">None</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> brotli</span><br><span class="line">    brotli_decompress = brotli.decompress</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] Using Python brotli module.&quot;</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">import</span> brotlicffi <span class="keyword">as</span> brotli</span><br><span class="line">        brotli_decompress = brotli.decompress</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] Using brotlicffi module.&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        brotli_decompress = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">have_brotli_cli = shutil.which(<span class="string">&quot;brotli&quot;</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> brotli_decompress <span class="keyword">and</span> have_brotli_cli:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] Using brotli CLI for decompression.&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="keyword">not</span> brotli_decompress:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[!] Warning: no brotli module/CLI found; will save raw data only.&quot;</span>)</span><br><span class="line"></span><br><span class="line">ea = TABLE_START</span><br><span class="line">entry_idx = <span class="number">0</span></span><br><span class="line">results = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(MAX_ENTRIES):</span><br><span class="line">    name_addr = read_qword(ea)</span><br><span class="line">    name_len  = read_qword(ea + <span class="number">8</span>)</span><br><span class="line">    content_addr = read_qword(ea + <span class="number">16</span>)</span><br><span class="line">    content_size = read_qword(ea + <span class="number">24</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> name_addr <span class="keyword">or</span> name_addr == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[*] End of table at <span class="subst">&#123;<span class="built_in">hex</span>(ea)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    name_bytes = read_bytes(name_addr, name_len)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> name_bytes:</span><br><span class="line">        ea += ENTRY_SIZE</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        filename = name_bytes.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        filename = name_bytes.decode(<span class="string">&quot;latin-1&quot;</span>, errors=<span class="string">&quot;replace&quot;</span>)</span><br><span class="line"></span><br><span class="line">    filename_clean = filename.replace(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;_&quot;</span>).replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;_&quot;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> (filename_clean.endswith(<span class="string">&quot;.js&quot;</span>) <span class="keyword">or</span> filename_clean.endswith(<span class="string">&quot;.html&quot;</span>)):</span><br><span class="line">        ea += ENTRY_SIZE</span><br><span class="line">        <span class="keyword">continue</span>  <span class="comment"># ⛔ 跳过非 js/html 文件</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+] Dumping <span class="subst">&#123;filename_clean&#125;</span> ...&quot;</span>)</span><br><span class="line"></span><br><span class="line">    data = read_bytes(content_addr, content_size)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;    [!] Failed to read <span class="subst">&#123;filename_clean&#125;</span>&quot;</span>)</span><br><span class="line">        ea += ENTRY_SIZE</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 尝试 brotli 解压</span></span><br><span class="line">    decompressed = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> brotli_decompress:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            decompressed = brotli_decompress(data)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;    [!] Brotli module failed: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> have_brotli_cli:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> tempfile.NamedTemporaryFile(delete=<span class="literal">False</span>) <span class="keyword">as</span> tmpf:</span><br><span class="line">                tmpf.write(data)</span><br><span class="line">                tmp_br = tmpf.name</span><br><span class="line">            tmp_out = tmp_br + <span class="string">&quot;.out&quot;</span></span><br><span class="line">            proc = subprocess.run([<span class="string">&quot;brotli&quot;</span>, <span class="string">&quot;-d&quot;</span>, <span class="string">&quot;-o&quot;</span>, tmp_out, tmp_br],</span><br><span class="line">                                  stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line">            <span class="keyword">if</span> proc.returncode == <span class="number">0</span> <span class="keyword">and</span> os.path.exists(tmp_out):</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(tmp_out, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> tf:</span><br><span class="line">                    decompressed = tf.read()</span><br><span class="line">            os.remove(tmp_br)</span><br><span class="line">            <span class="keyword">if</span> os.path.exists(tmp_out): os.remove(tmp_out)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;    [!] CLI brotli failed: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写出文件</span></span><br><span class="line">    out_path = os.path.join(OUT_DIR, filename_clean)</span><br><span class="line">    <span class="keyword">if</span> decompressed:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(out_path, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(decompressed)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;    [+] Wrote decompressed -&gt; <span class="subst">&#123;out_path&#125;</span>&quot;</span>)</span><br><span class="line">        results.append((filename_clean, <span class="string">&quot;decompressed&quot;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(out_path + <span class="string">&quot;.br&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(data, <span class="built_in">str</span>):</span><br><span class="line">                f.write(data.encode(<span class="string">&#x27;latin-1&#x27;</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                f.write(data)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;    [-] Saved raw brotli file -&gt; <span class="subst">&#123;out_path&#125;</span>.br&quot;</span>)</span><br><span class="line">        results.append((filename_clean, <span class="string">&quot;raw_only&quot;</span>))</span><br><span class="line"></span><br><span class="line">    ea += ENTRY_SIZE</span><br><span class="line">    entry_idx += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n=== Dump Finished ===&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> name, status <span class="keyword">in</span> results:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;status:<span class="number">12</span>&#125;</span> <span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;\nOutput folder: <span class="subst">&#123;OUT_DIR&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>出来的js文件里没有</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">__TAURI__</span>.<span class="property">core</span></span><br></pre></td></tr></table></figure><p>的可以直接删了，因为最后逻辑要交给后端rust的话，必须要用win内核调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; invoke &#125; = <span class="variable language_">window</span>.<span class="property">__TAURI__</span>.<span class="property">core</span>;</span><br></pre></td></tr></table></figure><p>通常设为变量名invoke，但也可能是自定义的调用名，所以只搜索<code>window.__TAURI__.core</code>就可以了</p><p>最后我们在html_actuator.js里找到get_flag的变量名</p><p>分析这个js文件：</p><p>用在线网站解混淆一下</p><p><a href="https://js-deobfuscator.vercel.app/#eNqdWQtT20gS/iuzutrCWoyR3wZCrngl4Srs7SWk9nLYx46ksa1FlnzSCHBY//fr7hlJI2GzZKmiSurXdH/d09MjP1medWhNs8iTQRyxD9dXH088mXEZJw2bPY2TccSYnAdpSwahOIsjyYNIJAz+jpkfe9lCRLL1v0wkq88iFB7qjS0S3vNy6bFlHxmWUi9OKqZeskTCW025IpWvdgqFt1paiDTlM8OtlyzN+ELsaY3cTj1AMOAQY51zTXBbyySWsVwtRYsTCeWLNDRmSeA32UJI7nPJi0Tc84SlIpyCLC6k/Q+mjVySPLO1NP55c+HdncaPL4ZDQnvTOFmUoJjKH+QiBAO/lRzG3qA480Kepsdji7vxvdjDxccWC3ygzBIhpLb51lQE1SBaZtIUIwJoLkPuiXkc+iIB3kUkIQ+cvQv5rNVqAX+/bsnNpAS8EEdQSDN3EYCdt2fo+Jt9xa3ovNlHlwzSbxvibQURVACmC6I2QdCyRUbV60MQ+fFDKxEAbCpPomDBMYvvEoCjUea0yCKjHLa8UPCkqLcG0SqbzKwrxrAkWp4Iw7QFIVxwb27Y9uIwW0TGChAMkTbJgo2KJFbQRrJ2lPv+NfilJAy4NBD6seTox0qw2RLKU3zGjVEWK+2TUs8QPAUga8K4e4lUtY6uFzJQL4sgAn2/EklFBgo1qcVJC+vt3JjyMIU12P4++xpnLIxTYUTJBHCrBh/iKvA1ezLJDHNQKz8Y5grIypA0eusiStDEkggiqC7Y9oLhNmMNN5ZzlgAoPJGMRz67E2KJO2gVRDP7hX6DHRCNvUczZtOp9nsqzysdRN2nbaYrJV0xXvTdYpWHORSVwWhNgwS6OVDN7JXsRCwgd8TfrGTuzj91VRd1xUfcfS/22pLzkPDlsn54eYmA2rsIBb5BY/WD+7Khohb1Fcr892gt4zQgB9EVcBGiEPdBnKW/5Iw//mBP7PFQcR+bbKUfV0zhULVzhk1bh9WqEBv5m7nHoP5+Fczj0Y5kGRQ/9fwwSCVzhceREkiWxgto3A9sFgYSOmYK2RURlCd2dKhHpSTS0hlNADduxhY6O7aaTD3tQaffVQHc8zATzarnE8M33IilIHvLOk5vZOfGW8ssnQOiZDTNIF8bDmvIY7giwyJt6LQ2cwumNCUPShwYHyF6rKDcNrHKpClJKR5pNoGs5okjLze5X8+osQEA/it+J1iawUwh51xSD0AtNhMyBYwjOC6FD6sSJzdVlg1tkdzc9x9WsAcVGDedCQRCza1aNdtqzzws1EnyMtYY6xfq/yoSvUjtXKl0YVpqIZKZ8N8l8cJsHBtqQAmaQ873lQBl4xMBXmQBezIkRZvOzVbd2nAKK2YF5sphq/n1Q7UI/sU4I/HwV4KsnEMQ6YnvU5iqbS3xoImnZfnJmJ61Ld3U1QuuBjCpZk3qtY7yCwyAhSGc4ODZjXmiEXx+46hY1Ku88lQyI6/0exiBseeWKOSoakYrFfJEyiSAQVIAtiSGfSrH/Pc4iIAOfct+pS8RTJ88DL6JonebDhXtN3ckETJLItXcc2brEbpjmzZaQVohSTf7P/Whfg68sH7RQ/Rp8cz92olReKwLMeeqll6JYGzViKvXeW9MkhXf1TD5fIQpJ+wNl0+zKvFU8oPpFJpp5KFtdY3bM+50z26xudTGG2BZu7WjoGqvPAqM1d8yx+gN6Bo0hjwVrxsdWKHy7NBSl+qcvVGl6vLY2qVklR5WuuKmmM39mlv9vhGtdhWoZLu8DVQyXvkeUIuhUHldnen5vbKqOepjTlBQTXPAYX8HmOjLALwAWof5K944xpYxiJWmc7XiaqDUaDRHNSDUS6v+oaKWXHTpxQ8bLZgadMWkp6trPvsZT/6xtYQyuHEmNdC09neM//rKsPlmAZ3/8gL6fbhiEoaaFB4FQIKzG5wmasJncJpyOBgWovW6sJUahFCC/zIC21RVouqdHP/hvgHz7hOchPcxzGJrTJ0apG5vr0++fLq8vYV7lbGhQyHhxg7fNi7x08aF+nJQEK/SmSbhfzEVNG6dx4MhF6LThKd2z+/6B/aTWhsJ/bbTHh7DU3fQdVGk4zrdAwcpSg3uaXSravzww83EfpLJqtTuuge+3zuGUzwVl9AtCoMN59F1bHsf3nc3crlH3M4WLidud3dvM9sldm8be0js/k+NzewRsQf2NnVB/OFPjS38AfFHW/V94h8cwTe0EqNjRFTD70KLvTuikasA/GYHh62dCarklHQeTCWQYBBYexzuQGSvNxoN4HvcqzXXa1LjjtuEqMXQ7enBothLF5GXrJYSpHi33XV6KN93um2320QHFdEomk7H5V6laPr+0B31jmFGZNew18FgDPNsw74ppBGYA5ucVKZtKjbf7bsHr9TTflAdT4fT0YD0vgSRHJ0kCV+BaNtx7CPcErjMoCP6nWPn0TmCUbmhqZ2exx2fqOXrG9I0CLu7BLBahpwh8gRjVo8UtVqBYqLH3U06SFT4lMQfq7Qi0qk9mdg/kjdN5DwzVgaPRLXqZHJcldXkqqw2MDla5/i43YHXRSQoE05feG3Cpchzr9fzpio7BspF2p65bptA9zvDDqQoB1q9vtmubEhp9LWDBC897kI8OTqly+QQPVbhVzpb4NTMGkRk5RmcmlyDXhmYlGh1O4NRV1XDM7FaYSiD2rOjAmlSIARUoRVAaeJ/K1bUepBPPR4XZo7Wxc7WW5QagBj6Q4c2dI93vNHI2NDYHNwBbWh4go5fmkT1Y/MwQUJ7quw4nb7Xplwpat4S2tM97JP5TuyOhtO+m5t3lfckNjFXIqmjNeJcc7r0uRYbeWvEMZy6bXF8s9PtjLpOvyO/nZ/cn+40d/o9wG/wD3/x7eff4bXXbncG/VFyvbr+97/gvT046Pfkl69L7sNbKKKZnKNYf9gedD8+vL/MvsBrZ3AwgFbLrz/gS7frdPv821TEJ/A6GMTvv16scC2YZKGJoYhz0OsOO3f/+ZRc8p0J5hkdLtG0n4zoyfWjtQmIykVxfy4iz4rNeB2f8lQMeg2Ob8VIpABx4bN1soKxgkRbU/hooOVaC75suCv8gegt+wyX0WhG7LM53m18QTzbVnfRnZ3aPcyVMW8o43quMccanq4ir5zTcI6A1MG5U05s5hDz0o9If6v8kpN7UU47r9BdpLNSk2YlIfG3H1A1vTC+ouXoecFyLhKcXEH22Qk5tj5z/zqOZl+Dk+DTWe/DB7zDa+PPPa1NwPyBw/dNNfiBqWDp3XrxYgFf3NHKE4tgcjzclObSKbv4qJ8Dr4dHGNgv7mEZnEUFXlHH1vk/r/TaH2Pu48eqJs7PkHudkALFco4/XV3ira7yM94m2/nvY2AR7k2lSfjgQV8gQfpcTHkWSv3BH1lmUeTXNx2NfWQ1rdg6fLKCFCoTEP5E87R1SD+iNK0gCmHg/lV9rUnPxVLOrcNO0/IFzQ4fY5iUoPCuhJzHPvwOnVJ5E4xgWUud8TA8i7NIWoftvtM0hdTuz+lQ8UvcEWCItNNgFp0rG3jHUeQgVT5qhnWIv880LfEoPL0I+BekVzy5u4i4G4KakrgTq4c48VPr8AZsu9lsBtoTlD3HtyJmqIwZauUQpFdBFEwD4efmiLFe/x9UYJJO">JS Deobfuscator</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">HTMLActuator</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">tileContainer</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.tile-container&quot;</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">scoreContainer</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.score-container&quot;</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">bestContainer</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.best-container&quot;</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">messageContainer</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.game-message&quot;</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">score</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">HTMLActuator</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">actuate</span> = <span class="keyword">function</span> (<span class="params">grid, metadata</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">if</span> (metadata.<span class="property">game</span>) &#123;</span><br><span class="line">    checkBox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.check-form&quot;</span>);</span><br><span class="line">    checkBoxHtml = <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;form class=&quot;above-game&quot; id=&quot;greet-form&quot;&gt;</span></span><br><span class="line"><span class="string">          &lt;input id=&quot;greet-input&quot; placeholder=&quot;Enter a Flag...&quot; /&gt;</span></span><br><span class="line"><span class="string">          &lt;button type=&quot;submit&quot;&gt;Check&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;/form&gt;</span></span><br><span class="line"><span class="string">      `</span>;</span><br><span class="line">    checkBox.<span class="property">innerHTML</span> = checkBoxHtml;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    self.<span class="title function_">clearContainer</span>(self.<span class="property">tileContainer</span>);</span><br><span class="line">    grid.<span class="property">cells</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">column</span>) &#123;</span><br><span class="line">      column.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">cell</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cell) &#123;</span><br><span class="line">          self.<span class="title function_">addTile</span>(cell);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    self.<span class="title function_">updateScore</span>(metadata.<span class="property">score</span>);</span><br><span class="line">    self.<span class="title function_">updateBestScore</span>(metadata.<span class="property">bestScore</span>);</span><br><span class="line">    <span class="keyword">if</span> (metadata.<span class="property">terminated</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (metadata.<span class="property">over</span>) &#123;</span><br><span class="line">        self.<span class="title function_">message</span>(<span class="literal">false</span>); <span class="comment">// You lose</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (metadata.<span class="property">won</span>) &#123;</span><br><span class="line">        self.<span class="title function_">message</span>(<span class="literal">true</span>); <span class="comment">// You win!</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Continues the game (both restart and keep playing)</span></span><br><span class="line"><span class="title class_">HTMLActuator</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">continueGame</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">clearMessage</span>();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">HTMLActuator</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">clearContainer</span> = <span class="keyword">function</span> (<span class="params">container</span>) &#123;</span><br><span class="line">  <span class="keyword">while</span> (container.<span class="property">firstChild</span>) &#123;</span><br><span class="line">    container.<span class="title function_">removeChild</span>(container.<span class="property">firstChild</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">HTMLActuator</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addTile</span> = <span class="keyword">function</span> (<span class="params">tile</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">var</span> wrapper = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> inner = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> position = tile.<span class="property">previousPosition</span> || &#123;</span><br><span class="line">    <span class="attr">x</span>: tile.<span class="property">x</span>,</span><br><span class="line">    <span class="attr">y</span>: tile.<span class="property">y</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> positionClass = <span class="variable language_">this</span>.<span class="title function_">positionClass</span>(position);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// We can&#x27;t use classlist because it somehow glitches when replacing classes</span></span><br><span class="line">  <span class="keyword">var</span> classes = [<span class="string">&quot;tile&quot;</span>, <span class="string">&quot;tile-&quot;</span> + tile.<span class="property">value</span>, positionClass];</span><br><span class="line">  <span class="keyword">if</span> (tile.<span class="property">value</span> &gt; <span class="number">2048</span>) &#123;</span><br><span class="line">    classes.<span class="title function_">push</span>(<span class="string">&quot;tile-super&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">applyClasses</span>(wrapper, classes);</span><br><span class="line">  inner.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;tile-inner&quot;</span>);</span><br><span class="line">  inner.<span class="property">textContent</span> = tile.<span class="property">value</span>;</span><br><span class="line">  <span class="keyword">if</span> (tile.<span class="property">previousPosition</span>) &#123;</span><br><span class="line">    <span class="comment">// Make sure that the tile gets rendered in the previous position first</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      classes[<span class="number">2</span>] = self.<span class="title function_">positionClass</span>(&#123;</span><br><span class="line">        <span class="attr">x</span>: tile.<span class="property">x</span>,</span><br><span class="line">        <span class="attr">y</span>: tile.<span class="property">y</span></span><br><span class="line">      &#125;);</span><br><span class="line">      self.<span class="title function_">applyClasses</span>(wrapper, classes); <span class="comment">// Update the position</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tile.<span class="property">mergedFrom</span>) &#123;</span><br><span class="line">    classes.<span class="title function_">push</span>(<span class="string">&quot;tile-merged&quot;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">applyClasses</span>(wrapper, classes);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Render the tiles that merged</span></span><br><span class="line">    tile.<span class="property">mergedFrom</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">merged</span>) &#123;</span><br><span class="line">      self.<span class="title function_">addTile</span>(merged);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    classes.<span class="title function_">push</span>(<span class="string">&quot;tile-new&quot;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">applyClasses</span>(wrapper, classes);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add the inner part of the tile to the wrapper</span></span><br><span class="line">  wrapper.<span class="title function_">appendChild</span>(inner);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Put the tile on the board</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">tileContainer</span>.<span class="title function_">appendChild</span>(wrapper);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">HTMLActuator</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">applyClasses</span> = <span class="keyword">function</span> (<span class="params">element, classes</span>) &#123;</span><br><span class="line">  element.<span class="title function_">setAttribute</span>(<span class="string">&quot;class&quot;</span>, classes.<span class="title function_">join</span>(<span class="string">&quot; &quot;</span>));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">HTMLActuator</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">normalizePosition</span> = <span class="keyword">function</span> (<span class="params">position</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">x</span>: position.<span class="property">x</span> + <span class="number">1</span>,</span><br><span class="line">    <span class="attr">y</span>: position.<span class="property">y</span> + <span class="number">1</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">HTMLActuator</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">positionClass</span> = <span class="keyword">function</span> (<span class="params">position</span>) &#123;</span><br><span class="line">  position = <span class="variable language_">this</span>.<span class="title function_">normalizePosition</span>(position);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;tile-position-&quot;</span> + position.<span class="property">x</span> + <span class="string">&quot;-&quot;</span> + position.<span class="property">y</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">HTMLActuator</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">updateScore</span> = <span class="keyword">function</span> (<span class="params">score</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">clearContainer</span>(<span class="variable language_">this</span>.<span class="property">scoreContainer</span>);</span><br><span class="line">  <span class="keyword">var</span> difference = score - <span class="variable language_">this</span>.<span class="property">score</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">score</span> = score;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">scoreContainer</span>.<span class="property">textContent</span> = <span class="variable language_">this</span>.<span class="property">score</span>;</span><br><span class="line">  <span class="keyword">if</span> (difference &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> addition = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    addition.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;score-addition&quot;</span>);</span><br><span class="line">    addition.<span class="property">textContent</span> = <span class="string">&quot;+&quot;</span> + difference;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">scoreContainer</span>.<span class="title function_">appendChild</span>(addition);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">HTMLActuator</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">updateBestScore</span> = <span class="keyword">function</span> (<span class="params">bestScore</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">bestContainer</span>.<span class="property">textContent</span> = bestScore;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">HTMLActuator</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">message</span> = <span class="keyword">function</span> (<span class="params">won</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> type = won ? <span class="string">&quot;game-won&quot;</span> : <span class="string">&quot;game-over&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> message = won ? <span class="string">&quot;You win!&quot;</span> : <span class="string">&quot;Game over!&quot;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">messageContainer</span>.<span class="property">classList</span>.<span class="title function_">add</span>(type);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">messageContainer</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;p&quot;</span>)[<span class="number">0</span>].<span class="property">textContent</span> = message;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">HTMLActuator</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">clearMessage</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// IE only takes one value to remove at a time.</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">messageContainer</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;game-won&quot;</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">messageContainer</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;game-over&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  invoke</span><br><span class="line">&#125; = <span class="variable language_">window</span>.<span class="property">__TAURI__</span>.<span class="property">core</span>;</span><br><span class="line"><span class="keyword">let</span> greetInputEl;</span><br><span class="line"><span class="keyword">let</span> greetMsgEl;</span><br><span class="line">(<span class="keyword">function</span> (<span class="params">_0x97aee2, _0x14d3d9</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> _0x151017 = _0x363b;</span><br><span class="line">  <span class="keyword">const</span> _0x2b0390 = <span class="title function_">_0x97aee2</span>();</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> _0x3b9dd4 = <span class="built_in">parseInt</span>(<span class="title function_">_0x151017</span>(<span class="number">176</span>)) / <span class="number">1</span> + <span class="built_in">parseInt</span>(<span class="title function_">_0x151017</span>(<span class="number">172</span>)) / <span class="number">2</span> + <span class="built_in">parseInt</span>(<span class="title function_">_0x151017</span>(<span class="number">170</span>)) / <span class="number">3</span> + -<span class="built_in">parseInt</span>(<span class="title function_">_0x151017</span>(<span class="number">171</span>)) / <span class="number">4</span> + -<span class="built_in">parseInt</span>(<span class="title function_">_0x151017</span>(<span class="number">167</span>)) / <span class="number">5</span> * (<span class="built_in">parseInt</span>(<span class="title function_">_0x151017</span>(<span class="number">168</span>)) / <span class="number">6</span>) + -<span class="built_in">parseInt</span>(<span class="title function_">_0x151017</span>(<span class="number">174</span>)) / <span class="number">7</span> * (-<span class="built_in">parseInt</span>(<span class="title function_">_0x151017</span>(<span class="number">166</span>)) / <span class="number">8</span>) + -<span class="built_in">parseInt</span>(<span class="title function_">_0x151017</span>(<span class="number">173</span>)) / <span class="number">9</span>;</span><br><span class="line">      <span class="keyword">if</span> (_0x3b9dd4 === _0x14d3d9) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        _0x2b0390.<span class="title function_">push</span>(_0x2b0390.<span class="title function_">shift</span>());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (_0x34886e) &#123;</span><br><span class="line">      _0x2b0390.<span class="title function_">push</span>(_0x2b0390.<span class="title function_">shift</span>());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(_0x3a0b, <span class="number">452532</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Encrypt_0xa31304</span>(<span class="params">_0x5031b3, _0xa31304</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> _0x22bac7 = _0x363b;</span><br><span class="line">  <span class="keyword">const</span> _0x5d7b84 = <span class="keyword">new</span> <span class="title class_">TextEncoder</span>()[<span class="title function_">_0x22bac7</span>(<span class="number">169</span>)](_0x5031b3);</span><br><span class="line">  <span class="keyword">const</span> _0x2db5b9 = <span class="keyword">new</span> <span class="title class_">TextEncoder</span>()[<span class="title function_">_0x22bac7</span>(<span class="number">169</span>)](_0xa31304);</span><br><span class="line">  <span class="keyword">const</span> _0x1f7f86 = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(<span class="number">256</span>);</span><br><span class="line">  <span class="keyword">let</span> _0x562e52 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> _0x24ca0d = <span class="number">0</span>; _0x24ca0d &lt; <span class="number">256</span>; _0x24ca0d++) &#123;</span><br><span class="line">    _0x1f7f86[_0x24ca0d] = _0x24ca0d;</span><br><span class="line">    _0x562e52 = (_0x562e52 + _0x1f7f86[_0x24ca0d] + _0x5d7b84[_0x24ca0d % _0x5d7b84[<span class="title function_">_0x22bac7</span>(<span class="number">175</span>)]]) % <span class="number">256</span>;</span><br><span class="line">    [_0x1f7f86[_0x24ca0d], _0x1f7f86[_0x562e52]] = [_0x1f7f86[_0x562e52], _0x1f7f86[_0x24ca0d]];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> _0x5b36c3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> _0x205ec1 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> _0x444cf9 = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(_0x2db5b9[<span class="title function_">_0x22bac7</span>(<span class="number">175</span>)]);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> _0x527286 = <span class="number">0</span>; _0x527286 &lt; _0x2db5b9[<span class="title function_">_0x22bac7</span>(<span class="number">175</span>)]; _0x527286++) &#123;</span><br><span class="line">    _0x5b36c3 = (_0x5b36c3 + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">    _0x205ec1 = (_0x205ec1 + _0x1f7f86[_0x5b36c3]) % <span class="number">256</span>;</span><br><span class="line">    [_0x1f7f86[_0x5b36c3], _0x1f7f86[_0x205ec1]] = [_0x1f7f86[_0x205ec1], _0x1f7f86[_0x5b36c3]];</span><br><span class="line">    <span class="keyword">const</span> _0x326832 = (_0x1f7f86[_0x5b36c3] + _0x1f7f86[_0x205ec1]) % <span class="number">256</span>;</span><br><span class="line">    _0x444cf9[_0x527286] = _0x2db5b9[_0x527286] ^ _0x1f7f86[_0x326832];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> _0x444cf9;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_0x363b</span>(<span class="params">_0x3e7d70, _0x4a2c88</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> _0x3a0bb6 = <span class="title function_">_0x3a0b</span>();</span><br><span class="line">  _0x363b = <span class="keyword">function</span> (<span class="params">_0x363b1f, _0x4025c1</span>) &#123;</span><br><span class="line">    _0x363b1f = _0x363b1f - <span class="number">166</span>;</span><br><span class="line">    <span class="keyword">let</span> _0x387f5b = _0x3a0bb6[_0x363b1f];</span><br><span class="line">    <span class="keyword">return</span> _0x387f5b;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">_0x363b</span>(_0x3e7d70, _0x4a2c88);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_0x3a0b</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> _0x37fb1e = [<span class="string">&quot;3283052tzDAvB&quot;</span>, <span class="string">&quot;542866JdmzNj&quot;</span>, <span class="string">&quot;4112658rTyTXQ&quot;</span>, <span class="string">&quot;16954tUYpad&quot;</span>, <span class="string">&quot;length&quot;</span>, <span class="string">&quot;457163LwGIuU&quot;</span>, <span class="string">&quot;2696pusaTH&quot;</span>, <span class="string">&quot;233035azfeoA&quot;</span>, <span class="string">&quot;66oGYEyB&quot;</span>, <span class="string">&quot;encode&quot;</span>, <span class="string">&quot;2094372kZRrIa&quot;</span>];</span><br><span class="line">  _0x3a0b = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> _0x37fb1e;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">_0x3a0b</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">uint8ArrayToBase64</span>(<span class="params">array</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> binary = <span class="title class_">Array</span>.<span class="title function_">from</span>(array).<span class="title function_">map</span>(<span class="function"><span class="params">byte</span> =&gt;</span> <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(byte)).<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">btoa</span>(binary);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">_0x9a2c6e7</span>(<span class="params"></span>) &#123;</span><br><span class="line">  greetInputEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#greet-input&quot;</span>);</span><br><span class="line">  greetMsgEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#greet-msg&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> getFlag = greetInputEl.<span class="property">value</span>;</span><br><span class="line">  <span class="keyword">const</span> ciphertext = <span class="title class_">Encrypt</span>_0xa31304(<span class="string">&quot;SadTongYiAiRC4HH&quot;</span>, getFlag);</span><br><span class="line">  greetMsgEl.<span class="property">textContent</span> = <span class="keyword">await</span> <span class="title function_">invoke</span>(<span class="string">&quot;ipc_command&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="title function_">uint8ArrayToBase64</span>(ciphertext)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;check-form&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;submit&quot;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    <span class="title function_">_0x9a2c6e7</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>发现是先rc4加密，再base64后传给后端逻辑</p><p>然后rc4由于是流密码，拿到密钥流就可以异或回去，注意这里不能把加密当解密函数用，因为加密数据是可读字符串，但解密数据ascii可能&gt;128</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _0x5d7b84 = <span class="keyword">new</span> <span class="title class_">TextEncoder</span>().<span class="title function_">encode</span>(key)</span><br><span class="line"><span class="keyword">const</span> _0x2db5b9 = <span class="keyword">new</span> <span class="title class_">TextEncoder</span>().<span class="title function_">encode</span>(input)</span><br></pre></td></tr></table></figure><p>在这个rc4实现中，&gt;128的字符被当成两个utf-8ag-0-1j8in2hh6ag-1-1j8in2hh6</p><p>正确获取密钥流代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原始混淆代码保持不变</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span>(<span class="params">_0x97aee2,_0x14d3d9</span>)&#123;<span class="keyword">const</span> _0x151017=_0x363b,_0x2b0390=<span class="title function_">_0x97aee2</span>();<span class="keyword">while</span>(!![])&#123;<span class="keyword">try</span>&#123;<span class="keyword">const</span> _0x3b9dd4=<span class="built_in">parseInt</span>(<span class="title function_">_0x151017</span>(<span class="number">0xb0</span>))/<span class="number">0x1</span>+<span class="built_in">parseInt</span>(<span class="title function_">_0x151017</span>(<span class="number">0xac</span>))/<span class="number">0x2</span>+<span class="built_in">parseInt</span>(<span class="title function_">_0x151017</span>(<span class="number">0xaa</span>))/<span class="number">0x3</span>+-<span class="built_in">parseInt</span>(<span class="title function_">_0x151017</span>(<span class="number">0xab</span>))/<span class="number">0x4</span>+-<span class="built_in">parseInt</span>(<span class="title function_">_0x151017</span>(<span class="number">0xa7</span>))/<span class="number">0x5</span>*(<span class="built_in">parseInt</span>(<span class="title function_">_0x151017</span>(<span class="number">0xa8</span>))/<span class="number">0x6</span>)+-<span class="built_in">parseInt</span>(<span class="title function_">_0x151017</span>(<span class="number">0xae</span>))/<span class="number">0x7</span>*(-<span class="built_in">parseInt</span>(<span class="title function_">_0x151017</span>(<span class="number">0xa6</span>))/<span class="number">0x8</span>)+-<span class="built_in">parseInt</span>(<span class="title function_">_0x151017</span>(<span class="number">0xad</span>))/<span class="number">0x9</span>;<span class="keyword">if</span>(_0x3b9dd4===_0x14d3d9)<span class="keyword">break</span>;<span class="keyword">else</span> _0x2b0390[<span class="string">&#x27;push&#x27;</span>](_0x2b0390[<span class="string">&#x27;shift&#x27;</span>]());&#125;<span class="keyword">catch</span>(_0x34886e)&#123;_0x2b0390[<span class="string">&#x27;push&#x27;</span>](_0x2b0390[<span class="string">&#x27;shift&#x27;</span>]());&#125;&#125;&#125;(_0x3a0b,<span class="number">0x6e7b4</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Encrypt_0x5031b3</span>(<span class="params">_0x5031b3, _0xa31304</span>)&#123;<span class="keyword">const</span> _0x22bac7=_0x363b,_0x5d7b84=<span class="keyword">new</span> <span class="title class_">TextEncoder</span>()[<span class="title function_">_0x22bac7</span>(<span class="number">0xa9</span>)](_0x5031b3),_0x2db5b9=<span class="keyword">new</span> <span class="title class_">TextEncoder</span>()[<span class="title function_">_0x22bac7</span>(<span class="number">0xa9</span>)](_0xa31304),_0x1f7f86=<span class="keyword">new</span> <span class="title class_">Uint8Array</span>(<span class="number">0x100</span>);<span class="keyword">let</span> _0x562e52=<span class="number">0x0</span>;<span class="keyword">for</span>(<span class="keyword">let</span> _0x24ca0d=<span class="number">0x0</span>; _0x24ca0d&lt;<span class="number">0x100</span>; _0x24ca0d++)&#123;_0x1f7f86[_0x24ca0d]=_0x24ca0d,_0x562e52=(_0x562e52+_0x1f7f86[_0x24ca0d]+_0x5d7b84[_0x24ca0d%_0x5d7b84[<span class="title function_">_0x22bac7</span>(<span class="number">0xaf</span>)]])%<span class="number">0x100</span>,[_0x1f7f86[_0x24ca0d],_0x1f7f86[_0x562e52]]=[_0x1f7f86[_0x562e52],_0x1f7f86[_0x24ca0d]];&#125;<span class="keyword">let</span> _0x5b36c3=<span class="number">0x0</span>,_0x205ec1=<span class="number">0x0</span>;<span class="keyword">const</span> _0x444cf9=<span class="keyword">new</span> <span class="title class_">Uint8Array</span>(_0x2db5b9[<span class="title function_">_0x22bac7</span>(<span class="number">0xaf</span>)]);<span class="keyword">for</span>(<span class="keyword">let</span> _0x527286=<span class="number">0x0</span>; _0x527286&lt;_0x2db5b9[<span class="title function_">_0x22bac7</span>(<span class="number">0xaf</span>)]; _0x527286++)&#123;_0x5b36c3=(_0x5b36c3+<span class="number">0x1</span>)%<span class="number">0x100</span>,_0x205ec1=(_0x205ec1+_0x1f7f86[_0x5b36c3])%<span class="number">0x100</span>,[_0x1f7f86[_0x5b36c3],_0x1f7f86[_0x205ec1]]=[_0x1f7f86[_0x205ec1],_0x1f7f86[_0x5b36c3]];<span class="keyword">const</span> _0x326832=(_0x1f7f86[_0x5b36c3]+_0x1f7f86[_0x205ec1])%<span class="number">0x100</span>;_0x444cf9[_0x527286]=_0x2db5b9[_0x527286]^_0x1f7f86[_0x326832];&#125;<span class="keyword">return</span> _0x444cf9;&#125;<span class="keyword">function</span> <span class="title function_">_0x363b</span>(<span class="params">_0x3e7d70, _0x4a2c88</span>)&#123;<span class="keyword">const</span> _0x3a0bb6=<span class="title function_">_0x3a0b</span>();<span class="keyword">return</span> _0x363b=<span class="keyword">function</span>(<span class="params">_0x363b1f, _0x4025c1</span>)&#123;_0x363b1f=_0x363b1f-<span class="number">0xa6</span>;<span class="keyword">let</span> _0x387f5b=_0x3a0bb6[_0x363b1f];<span class="keyword">return</span> _0x387f5b;&#125;,<span class="title function_">_0x363b</span>(_0x3e7d70,_0x4a2c88);&#125;<span class="keyword">function</span> <span class="title function_">_0x3a0b</span>(<span class="params"></span>)&#123;<span class="keyword">const</span> _0x37fb1e=[<span class="string">&#x27;3283052tzDAvB&#x27;</span>,<span class="string">&#x27;542866JdmzNj&#x27;</span>,<span class="string">&#x27;4112658rTyTXQ&#x27;</span>,<span class="string">&#x27;16954tUYpad&#x27;</span>,<span class="string">&#x27;length&#x27;</span>,<span class="string">&#x27;457163LwGIuU&#x27;</span>,<span class="string">&#x27;2696pusaTH&#x27;</span>,<span class="string">&#x27;233035azfeoA&#x27;</span>,<span class="string">&#x27;66oGYEyB&#x27;</span>,<span class="string">&#x27;encode&#x27;</span>,<span class="string">&#x27;2094372kZRrIa&#x27;</span>];_0x3a0b=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">return</span> _0x37fb1e;&#125;;<span class="keyword">return</span> <span class="title function_">_0x3a0b</span>();&#125;</span><br><span class="line"><span class="comment">// 提取keystream的代码</span></span><br><span class="line"><span class="keyword">const</span> key = <span class="string">&quot;SAdt0ngY1AIrC4hH&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> plaintext = <span class="string">&#x27;a&#x27;</span>.<span class="title function_">repeat</span>(<span class="number">64</span>);  <span class="comment">// 64个&#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用原始函数加密</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> encrypted = <span class="title class_">Encrypt</span>_0x5031b3(key, plaintext);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 提取keystream: ciphertext XOR plaintext = keystream</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> keystream = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> aCharCode = <span class="string">&#x27;a&#x27;</span>.<span class="title function_">charCodeAt</span>(<span class="number">0</span>);  <span class="comment">// 97</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; encrypted.<span class="property">length</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">    keystream.<span class="title function_">push</span>(encrypted[i] ^ aCharCode);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 按要求的格式输出</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;KEYSTREAM = [&#x27;</span>, keystream.<span class="title function_">join</span>(<span class="string">&#x27;,&#x27;</span>), <span class="string">&#x27;]&#x27;</span>);</span><br></pre></td></tr></table></figure><p>KEYSTREAM = [ 232,0,230,97,0,0,88,88,0,118,233,0,91,8,29,213,0,224,188,251,252,20,20,0,0,0,0,0,0,0,222,119,0,0,177,0,0,0,0,0,0,0,149,8,120,233,187,175,0,3,3,0,238,96,0,0,241,87,73,96,0,31,31,0 ]</p><h3 id="后端分析："><a href="#后端分析：" class="headerlink" title="后端分析："></a>后端分析：</h3><p>定位关键函数：</p><p>由于我们传入参数时js代码是这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">greetMsgEl.<span class="property">textContent</span> = <span class="keyword">await</span> <span class="title function_">invoke</span>(<span class="string">&quot;ipc_command&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="title function_">uint8ArrayToBase64</span>(ciphertext)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>所以直接在ida pro找ipc_command和name字符串就能定位到后端逻辑函数了</p><p>找到后发现</p><p><img data-src="/images/逆向中的misc/tauri/定位函数.png" alt="定位函数"></p><p>把name（前端加密结果）传入v89，后边就分析v89就可以了</p><p>把这整个函数扔给ai，ai分析出是一个tea加密+一个base64加密</p><p>exp:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后端 .rdata 那串 base64（你给出的）</span></span><br><span class="line">b64 = <span class="string">&quot;daF/DkQxixGmzn0aPFW2E2PhM8NabRtLjp6pI+c8TtY3WMuPxfnvlAsp9aluf8noZy/T6Sz9DJg=&quot;</span></span><br><span class="line">ct = base64.b64decode(b64)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 你给的 KEYSTREAM（RC4 xor 流）</span></span><br><span class="line">KEYSTREAM = [<span class="number">232</span>,<span class="number">0</span>,<span class="number">230</span>,<span class="number">97</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">88</span>,<span class="number">88</span>,<span class="number">0</span>,<span class="number">118</span>,<span class="number">233</span>,<span class="number">0</span>,<span class="number">91</span>,<span class="number">8</span>,<span class="number">29</span>,<span class="number">213</span>,<span class="number">0</span>,<span class="number">224</span>,<span class="number">188</span>,<span class="number">251</span>,<span class="number">252</span>,<span class="number">20</span>,<span class="number">20</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">222</span>,<span class="number">119</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">177</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">149</span>,<span class="number">8</span>,<span class="number">120</span>,<span class="number">233</span>,<span class="number">187</span>,<span class="number">175</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">238</span>,<span class="number">96</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">241</span>,<span class="number">87</span>,<span class="number">73</span>,<span class="number">96</span>,<span class="number">0</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">0</span>]</span><br><span class="line">KS = <span class="built_in">bytes</span>(KEYSTREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从反编译还原的常数（对应 C++ 中出现的那些十进制常量）</span></span><br><span class="line">C1 = <span class="number">1668048215</span>   <span class="comment"># 0x636c6557</span></span><br><span class="line">C2 = <span class="number">1949527375</span>   <span class="comment"># 0x74336d4f</span></span><br><span class="line">C3 = <span class="number">1937076784</span>   <span class="comment"># 0x73757230</span></span><br><span class="line">C4 = <span class="number">1432441972</span>   <span class="comment"># 0x55615474</span></span><br><span class="line">DELTA = <span class="number">2117703607</span>  <span class="comment"># 0x7e3997b7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">swap32</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> ((x &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">24</span>) | ((x &amp; <span class="number">0xFF00</span>) &lt;&lt; <span class="number">8</span>) | ((x &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF00</span>) | ((x &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_block</span>(<span class="params">block8</span>):</span><br><span class="line">    <span class="comment"># block8: 8 bytes (as stored in ct)</span></span><br><span class="line">    a = <span class="built_in">int</span>.from_bytes(block8[<span class="number">0</span>:<span class="number">4</span>], <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">    b = <span class="built_in">int</span>.from_bytes(block8[<span class="number">4</span>:<span class="number">8</span>], <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">    v11 = swap32(a)</span><br><span class="line">    v12 = swap32(b)</span><br><span class="line">    sum_ = DELTA * <span class="number">32</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        v12 = (v12 - ( ((<span class="number">16</span> * v11 + C3) ^ (sum_ + v11)) ^ ((v11 &gt;&gt; <span class="number">5</span>) + C4) )) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        v11 = (v11 - ( ((<span class="number">16</span> * v12 + C1) ^ (v12 + sum_)) ^ ((v12 &gt;&gt; <span class="number">5</span>) + C2) )) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        sum_ = (sum_ - DELTA) &amp; <span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">    <span class="keyword">return</span> v11.to_bytes(<span class="number">4</span>,<span class="string">&#x27;little&#x27;</span>) + v12.to_bytes(<span class="number">4</span>,<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1) TEA-like 解密（对 ct 按 8 字节块）</span></span><br><span class="line">plain = <span class="built_in">bytearray</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(ct), <span class="number">8</span>):</span><br><span class="line">    block = ct[i:i+<span class="number">8</span>]</span><br><span class="line">    plain += decrypt_block(block)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2) 解出的是个 base64 字符串，去除尾部可能的 0x00，再 decode</span></span><br><span class="line">plain_b64 = <span class="built_in">bytes</span>(plain).rstrip(<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">middle = base64.b64decode(plain_b64)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3) 用你给的 KEYSTREAM 异或（取 middle 长度）</span></span><br><span class="line">res = <span class="built_in">bytes</span>(middle[i] ^ KS[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(middle)))</span><br><span class="line"><span class="built_in">print</span>(res.decode())</span><br><span class="line"><span class="comment"># -&gt; flag&#123;cf8be09b1c8a415f8b5e8f1dac71d4af&#125;</span></span><br></pre></td></tr></table></figure><h1 id="reference"><a href="#reference" class="headerlink" title="reference:"></a>reference:</h1><p><a href="https://blog.yllhwa.com/2023/05/09/Tauri%20%E6%A1%86%E6%9E%B6%E7%9A%84%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%8F%90%E5%8F%96%E6%96%B9%E6%B3%95%E6%8E%A2%E7%A9%B6/">Tauri 框架的静态资源提取方法探究 | yllhwa&#39;s blog</a></p><p><a href="https://110.41.78.46/bk/index.php/archives/548/">https://110.41.78.46/bk/index.php/archives/548/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是tauri框架？&quot;&gt;&lt;a href=&quot;#什么是tauri框架？&quot; class=&quot;headerlink&quot; title=&quot;什么是tauri框架？&quot;&gt;&lt;/a&gt;什么是tauri框架？&lt;/h1&gt;&lt;p&gt;Tauri 是一个用于构建桌面应用的开源框架：前端用任意会输出 HT</summary>
      
    
    
    
    <category term="ctf逆向中的misc" scheme="http://example.com/categories/ctf%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84misc/"/>
    
    
    <category term="tauri" scheme="http://example.com/tags/tauri/"/>
    
  </entry>
  
  <entry>
    <title>py逆向做题总结</title>
    <link href="http://example.com/2025/10/23/ctf%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84misc/py%E5%81%9A%E9%A2%98/"/>
    <id>http://example.com/2025/10/23/ctf%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84misc/py%E5%81%9A%E9%A2%98/</id>
    <published>2025-10-22T16:00:00.000Z</published>
    <updated>2025-10-30T14:18:23.401Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目给了exe或者直接给了pyc文件"><a href="#题目给了exe或者直接给了pyc文件" class="headerlink" title="题目给了exe或者直接给了pyc文件"></a>题目给了exe或者直接给了pyc文件</h1><h2 id="处理exe（解包为-pyc-文件）"><a href="#处理exe（解包为-pyc-文件）" class="headerlink" title="处理exe（解包为 pyc 文件）"></a>处理exe（解包为 pyc 文件）</h2><p>有的题直接给 <code>.exe</code> 文件，这通常是 <strong>PyInstaller 打包的 Python 程序</strong>。<br>我们需要先将 <code>.exe</code> 提取出 <code>.pyc</code> 文件夹。</p><h3 id="使用工具：pyinstxtractor-py"><a href="#使用工具：pyinstxtractor-py" class="headerlink" title="使用工具：pyinstxtractor.py"></a>使用工具：<strong>pyinstxtractor.py</strong></h3><ul><li>GitHub地址: <a href="https://github.com/extremecoders-re/pyinstxtractor">https://github.com/extremecoders-re/pyinstxtractor</a></li><li>作用：从 PyInstaller 打包的 exe/elf 文件中提取出 <code>.pyc</code> 文件与资源。</li><li>支持：Python 2.x / 3.x 各版本（与目标程序相同版本最稳）</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用对应 Python 版本运行（与目标 exe 一致！）</span></span><br><span class="line">python pyinstxtractor.py target.exe</span><br></pre></td></tr></table></figure><p>运行后会生成 <code>target.exe_extracted/</code> 文件夹。<br>在里面可以看到 <code>.pyc</code> 文件和 <code>PYZ-00.pyz_extracted/</code> 目录。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>反编译出的 <code>.pyc</code> 文件<strong>魔数要正确</strong>：<ul><li>每个 Python 版本的魔数（magic number）不同；</li><li>可以从同版本的 <code>struct.pyc</code> 或官方魔数表复制。</li></ul></li></ul><div class="table-container"><table><thead><tr><th>Python版本</th><th>魔数字节</th></tr></thead><tbody><tr><td>Py2.x</td><td>8字节（magic + timestamp）</td></tr><tr><td>Py3.0–3.2</td><td>12字节（magic + timestamp + size）</td></tr><tr><td>Py3.3+</td><td>16字节（magic + flags + timestamp/hash）</td></tr></tbody></table></div><ul><li><strong>一定要用与原程序一致的 Python 版本运行 <code>pyinstxtractor.py</code></strong>，否则解包后的 <code>PYZ-00.pyz_extracted</code> 可能是空的。</li></ul><hr><h2 id="处理-pyc-文件"><a href="#处理-pyc-文件" class="headerlink" title="处理 pyc 文件"></a>处理 pyc 文件</h2><p>解包后获得 <code>.pyc</code> 文件，我们需要将其反编译成 <code>.py</code> 源码。</p><hr><h3 id="工具一：uncompyle6"><a href="#工具一：uncompyle6" class="headerlink" title="工具一：uncompyle6"></a>工具一：<strong>uncompyle6</strong></h3><ul><li>GitHub: <a href="https://github.com/rocky/python-uncompyle6">https://github.com/rocky/python-uncompyle6</a></li><li>支持 Python 1.5 ~ 3.7，部分支持 3.8、3.9。</li><li>PyPI安装：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install uncompyle6</span><br></pre></td></tr></table></figure><ul><li>命令行用法：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uncompyle6 1.pyc &gt; 1.py</span><br></pre></td></tr></table></figure><hr><h3 id="工具二：pycdc"><a href="#工具二：pycdc" class="headerlink" title="工具二：pycdc"></a>工具二：<strong>pycdc</strong></h3><ul><li>GitHub: <a href="https://github.com/zrax/pycdc">https://github.com/zrax/pycdc</a></li><li>支持 Python 3.9 及更高版本；</li><li>构建或下载编译好的 pycdc.exe：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pycdc.exe yourfile.pyc &gt; yourfile.py</span><br></pre></td></tr></table></figure><hr><h3 id="工具三（针对高版本）PyLingual"><a href="#工具三（针对高版本）PyLingual" class="headerlink" title="工具三（针对高版本）PyLingual"></a>工具三（针对高版本）<strong>PyLingual</strong></h3><ul><li>GitHub: <a href="https://github.com/diprajpatra/pylingual">https://github.com/diprajpatra/pylingual</a> 可以直接按readme里的步骤部署,也可以直接在在线网站逆向pyc <a href="https://pylingual.io/">https://pylingual.io/</a></li><li>适用于 Python 3.11~3.12 字节码分析；</li><li>命令行用法（需在 <code>conda py312</code> 环境下）：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pylingual 1.pyc</span><br></pre></td></tr></table></figure><h4 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li><code>.pyc</code> 反编译出来的 <code>.py</code> 文件可能：<ul><li><code>while</code>、<code>if</code> 分支混乱；</li><li>列表、条件逻辑丢失；</li><li>要<strong>人工修复逻辑结构</strong>。</li></ul></li><li>若 <code>.pyc</code> 文件加入了<strong>花指令（junk bytecode）</strong>，需手动修复。</li></ul><h1 id="pyc-字节码（Bytecode）分析"><a href="#pyc-字节码（Bytecode）分析" class="headerlink" title="pyc 字节码（Bytecode）分析"></a>pyc 字节码（Bytecode）分析</h1><p>当题目直接给了 pyc 字节码或源码无法反编译时，可以手动分析。</p><h2 id="工具：Python-内置-dis-模块"><a href="#工具：Python-内置-dis-模块" class="headerlink" title="工具：Python 内置 dis 模块"></a>工具：<strong>Python 内置 dis 模块</strong></h2><ul><li><p><code>dis</code> 是 <strong>Python 内置的字节码反汇编工具</strong>。<br>它可以把 Python 的函数、模块或者 code object 的 <strong>字节码 (<code>co_code</code>)</strong> 转换成人类可读的形式（类似汇编指令），显示每条 opcode 和它的参数。</p></li><li><p>官方文档：<a href="https://docs.python.org/3/library/dis.html">dis — Disassembler for Python bytecode &#8212; Python 3.14.0 documentation</a></p></li><li><p>用法：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dis</span><br><span class="line">dis.dis(your_function)</span><br></pre></td></tr></table></figure><ul><li>或直接命令行：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m dis yourfile.pyc</span><br></pre></td></tr></table></figure><h2 id="手动还原思路"><a href="#手动还原思路" class="headerlink" title="手动还原思路"></a>手动还原思路</h2><ul><li>参考 u-tools 的「程序员手册」搜索 <code>dis</code> 指令说明；</li><li>每个 Python 版本字节码结构略不同：<ul><li><strong>Python 2：每条指令 3 字节/1字节</strong></li><li><strong>Python 3：每条指令 2 字节/1字节</strong></li></ul></li></ul><p>通过分析 opcode，可手动还原出 Python 逻辑。</p><h1 id="pyc字节码花指令处理"><a href="#pyc字节码花指令处理" class="headerlink" title="pyc字节码花指令处理"></a>pyc字节码花指令处理</h1><p>花指令即插入无效或干扰反编译的字节码。</p><h2 id="步骤流程"><a href="#步骤流程" class="headerlink" title="步骤流程"></a>步骤流程</h2><ol><li><p><strong>识别花指令</strong></p><ul><li>结合 uncompyle6 的输出,如果pyc字节码加花没办法正确反编译回py文件</li><li>实际字节码判断,若有无用字节码,就是花指令</li><li>参考 Python Opcodes表: <a href="https://unpyc.sourceforge.net/Opcodes.html">https://unpyc.sourceforge.net/Opcodes.html</a> 查指令含义。</li></ul></li><li><p><strong>定位花指令</strong></p><ul><li>用机器码定位</li></ul></li><li><p><strong>修改花指令</strong></p></li><li><p><strong>修改code object总长度</strong></p></li></ol><p>pyc文件结构:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    PyObject_HEAD</span><br><span class="line">    <span class="type">int</span> co_argcount;        <span class="comment">/* #arguments, except *args */</span></span><br><span class="line">    <span class="type">int</span> co_nlocals;     <span class="comment">/* #local variables */</span></span><br><span class="line">    <span class="type">int</span> co_stacksize;       <span class="comment">/* #entries needed for evaluation stack */</span></span><br><span class="line">    <span class="type">int</span> co_flags;       <span class="comment">/* CO_..., see below */</span></span><br><span class="line">    PyObject *co_code;      <span class="comment">/* instruction opcodes */</span></span><br><span class="line">    PyObject *co_consts;    <span class="comment">/* list (constants used) */</span></span><br><span class="line">    PyObject *co_names;     <span class="comment">/* list of strings (names used) */</span></span><br><span class="line">    PyObject *co_varnames;  <span class="comment">/* tuple of strings (local variable names) */</span></span><br><span class="line">    PyObject *co_freevars;  <span class="comment">/* tuple of strings (free variable names) */</span></span><br><span class="line">    PyObject *co_cellvars;      <span class="comment">/* tuple of strings (cell variable names) */</span></span><br><span class="line">    <span class="comment">/* The rest doesn&#x27;t count for hash/cmp */</span></span><br><span class="line">    PyObject *co_filename;  <span class="comment">/* string (where it was loaded from) */</span></span><br><span class="line">    PyObject *co_name;      <span class="comment">/* string (name, for reference) */</span></span><br><span class="line">    <span class="type">int</span> co_firstlineno;     <span class="comment">/* first source line number */</span></span><br><span class="line">    PyObject *co_lnotab;    <span class="comment">/* string (encoding addr&lt;-&gt;lineno mapping) */</span></span><br><span class="line">&#125; PyCodeObject;</span><br></pre></td></tr></table></figure><p>其中我们关注的就是co_code字段</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> marshal</span><br><span class="line">code = marshal.load(<span class="built_in">open</span>(<span class="string">&quot;1.pyc&quot;</span>, <span class="string">&quot;rb&quot;</span>))  <span class="comment"># 你的pyc路径</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(code.co_code))</span><br></pre></td></tr></table></figure><p>   根据长度在winhex搜索这个数值,找到的第一个,就是长度,code object长度用四个字节存储,这四个字节前是marshal中byte对象的标识,一个’s’(0x73),这四个字节后就是code object内容</p><h1 id="PyArmor-加壳与加密分析"><a href="#PyArmor-加壳与加密分析" class="headerlink" title="PyArmor 加壳与加密分析"></a>PyArmor 加壳与加密分析</h1><p>PyArmor 是常见的 Python 加密与授权保护工具。<br>PyArmor<strong>是把源码/字节码用加密包装并在运行时由专有 runtime（如 <code>pyarmor_runtime.pyd</code>）解密后执行</strong>。<br>因此你看到的 <code>.py</code> 文件通常只包含一个<strong>启动壳（stub）</strong>，它调用 runtime，并把加密的二进制 blob 交给 runtime 解密并加载——这就是你看到的 <code>__pyarmor__(__name__, __file__, b&#39;...&#39;)</code>。</p><p>原理图:</p><p><img data-src="/images/逆向中的misc/py/pyarmor原理.png" alt="pyarmor原理"></p><h2 id="工具：PyArmor"><a href="#工具：PyArmor" class="headerlink" title="工具：PyArmor"></a>工具：<strong>PyArmor</strong></h2><ul><li>GitHub: <a href="https://github.com/dashingsoft/pyarmor">https://github.com/dashingsoft/pyarmor</a></li><li>官方文档: <a href="https://pyarmor.readthedocs.io/en/latest/">https://pyarmor.readthedocs.io/en/latest/</a></li><li>安装：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyarmor</span><br></pre></td></tr></table></figure><ul><li>常用命令：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化项目</span></span><br><span class="line">pyarmor init --src=src --entry=main.py my_project</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成加密文件</span></span><br><span class="line"><span class="built_in">cd</span> my_project</span><br><span class="line">pyarmor gen</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接加密单个文件</span></span><br><span class="line">pyarmor gen main.py</span><br></pre></td></tr></table></figure><h2 id="常见特征"><a href="#常见特征" class="headerlink" title="常见特征"></a>常见特征</h2><ul><li><p>目录中含 <code>pytransform/</code>、<code>license.lic</code>；</p></li><li><p>存在 <code>_pytransform.dll</code> / <code>pytransform.pyd</code>；</p></li><li><p>反编译 <code>.pyc</code> 失败；</p></li><li><p>程序运行时导入 <code>pytransform</code> 模块。</p></li><li><p>文件夹中有pyarmor字样</p></li></ul><h2 id="解题"><a href="#解题" class="headerlink" title="解题:"></a>解题:</h2><p><a href="https://github.com/Lil-House/Pyarmor-Static-Unpack-1shot">GitHub - Lil-House/Pyarmor-Static-Unpack-1shot: ✅ No execution ✅ Pyarmor 8.0 - latest 9.1.x ✅ Universal ✅ Statically convert obfuscated scripts to disassembly and (experimentally) source code.</a></p><p>下载release</p><p>打开文件夹</p><p><img data-src="/images/逆向中的misc/py/pyarmor.png" alt="pyarmor"></p><p>如果runtime不用显式指定,在这个目录下用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python shot.py 被混淆程序所在文件路径</span><br></pre></td></tr></table></figure><p>如果题目也把runtime给你了,那就用下面的包含.pyd的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python shot.py -r /path/to/pyarmor_runtime.pyd /path/to/obfuscated_scripts</span><br></pre></td></tr></table></figure><p>有的程序为了防御这种攻击,会把PyArmor 加密文件的标识符去掉,我们给它在开头加上就行</p><p>比如:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#src.py</span></span><br><span class="line"><span class="keyword">from</span> pyarmor_runtime_000000 <span class="keyword">import</span> __pyarmor__</span><br><span class="line">__pyarmor__(__name__, __file__, <span class="string">b&#x27;\x00\x03\r\x00\xf3\r\r\n\x80\x00\x01\x00\x08\x00\x00\x00\x04\x00\x00\x00@\x00\x00\x00d\n\x00\x00\x12\t\x04\x00y&quot;\x04&quot;\xc0\xa4\t\xad2\\\x17\x13D\x0c\x81\xeb\x00\x00\x00\x00\x00\x00\x00\x00[\xc1%I\xfe56\xaa\x1cc\xc9\xf2E\xa3\x86\xc1\x88=sB\xf08\x14\&#x27;U\xfc\t\x10\xc7%\x1a\xb6\xc4\xa6QvBDK\xfd\xf5\xb0&amp;NZ&amp;n\xe41@VC\x11&amp;j\x8fs\x18\xd6\xe3iQ\xf8_\x9e\xdb\xfa\x92~\xfb\xe7f\xdf#\x00\xa3fv\xb5\x9b\xa13\x99 \x83\xc3\x93\xf2\x1d=\xe2-\x93zb\xb0\x10&amp;\n\xc4\xb8\xb9\x83\x99^\xd0\x94G9\xb9\xa0D\xedX\xff\x01\xbd&gt;\xa9\xe8\xf03]\xdd7\x87\x84\x13;%\xae\xd5\xe8\xcc\xd1\xa8\xe0\xda\xc2\x9f0\x02\xb88J\xac\xe5pS-\x14\x86\xdb\xc4/\xea\xa8\xd3\x05\x04V\x94\xfd_\xf3\xd7\xf1\x7f#\x8d\x9e\xd71\xb1\xfd\xb4\xb9\xd9\xf7&gt;y\xfb\x12\x8f\x9a\xe1\x8d\xe2X\xf9\xcb\xe2\xe3\xa2\xd7\xfc\xfa\xa0\x91n\xb9\xbc\xc0\xf0#\xfd\x83\xad\xb2\\K\xee\x88R\x80\xff\xcf\x93\x8f\x13\xe5\x01`\xbe$)\xad\xa6\xdc;\x8e\\\x0c\xae\x87yJ\xd9\xedF/P\x89\xe8\xb6\xebI\xb1u\x9b&quot;pt\xc3v\x19 \x83\xae\x89\x07\x1fmR\xd9AX4C\x05fa\x81\xf5\xab\xf5\x9a\xfe\xe2\xa2\x88HX\&#x27;\x9c\x9f\xea\x1d\x7f\xeb\n-\xa3\tFDsM\x99MF\xb6\xa9.\x1a\x86n\x95\xc4\x85f\xf8\x90\x076\xb5_\xeb.\xddn\x94f\x12\xb7\x04\xbb_\xd1\x87XO\x054&lt;\x9a\\1%H\xe4eBo)\xf2\xf5\xc6\xe1\xbd\x10i\xe2\xefD\x98\xdc\xea\xf0\xc0\xd1\xdc\x8c&amp;J\x7fX\x87\xc5\xfb\x05d\xb2\xc4\xc5\x0b\xfc\xf8\x9e0R\xb2&#123;em\xb2\x98\\\x05\xd3\xbe_\xf3\x07\x04\x05\x82p\x1b\xa7\x19\xf2\x02\x8e~\x12\xa3;\xb1\xfeb\xdd\x83\x04\xf4VM\xba\xe1&#125;\x8ff\x91\xa0\x94&#125;\xef\x12(\xdf\xa9j\xd4gA\xaa\tB\xf0\\=m%\xa4B\xbd\x1b\xe2AD\xfb\x98\xdf\xfd\xf6\xe5\x80-B\x90a\xf4E_\xa7\xec\x8eBx\xb8\x80\xef\x08X]\x0b\x18\xa3\xab\xf4\x8b\xe8\t\xfd\xd9o\&#x27;\x96&lt;\x1d\xf6\xdb\xe1\xe4\xb5\x8ec5o\x85\x92\xf4\x1e&lt;g\xecJI\xf3\x01\x90\x1e\xb7\x00\xda\t:&#125;\xc7I\x8c\xa5\x01\x13b!\xf2\xcd6JUy\xc5\xfc\xd8Q\x8f\x13\xdb\x0f\xfe\xbf\xd7\xe8\x992\xe4\xdf\x17\xd0\xef\xa5QC\xa6przcd\x9f\x8aS\x963\xa7\x0c\xc4\x97\x11j\xa8\xcf\x19\x1a\xc6\xff\xb1\x1d|\xe9n\x129\x19\xad\x08\x80\xc9\x98=q6\xc7U\xc8\x12\xe2\x0bSt\xc9,\xb4\x07\xd5X\xad\r&#125;\xb1 \xe4\xf6\xfb\xb6m\x11\xf9\x1e\x8c|\xd7\xf5\xd0\x99\x01t\xa39\xd0&amp;X\xa8\&#x27;^\xa5\xd1\x98&#123;\xed\xca\xe1\x95E\x08&amp;\xd1\x0e\xecF^\xc6\xad\x15h\xadV\xfe~\xb2&lt;Xe\xa2$\xf6\x82\xa8Wk\xd1%1\x9d\xcc\x08\x88\xfe\xbck\xb6t\xe4\xc0\xc8F\xf7\xa3\xee\xd8UMb(\xeb\xe9#\xfa( \x97Kp\xe4\xe6\x13&gt;\xbcZ\xab\x89\x99Uy\xe5\xf7s\xcda\x8a\xcb`\x0f\x02]e\xc6:\x84\xf4J\xda3n\x1a\x01?\x83\x98L\xf2P\xae\x10\x80A\xf7\x86\x17F7\xb3 7\xe7\xfb\xed\xed\x0c&quot;v\&#x27;\xf0W\x97\xc7\xdaMe=\xc1\x1c\xf9\xc3\xe2\xa3\x08\x0e\xe0\x0c\xd9\x10\xd7\x0e\x7fJ\xf5\x12\x94\x19\xbf\xf3\xc4K\xe1\xb2b\x07\xa6:\xa6a\x9eW\xf9B\x0e\xab\x9c5\xd4B\xdeN!\xeb\xa9\xb5K\xf4\xcan\xed\x04\x7fp\x87\x95\x14\x18\r-\xa9R\x95H\x9f++\x8f!!\xb5\xc8W\xbeG\x1a\xb0\x1c\x1b\xcdb\xb2y\x89\x16\xab\xbe\xdb)0\xe6\x07\x8a\x1fv\x02n\x83\xfd\x88q\xf3\xa8\xaf4\x84t\x0e\x95I\xf7\x11\x02Q\t.K\x10_\x88\x89\xf4\x98\xaf\xeb\x9d\xc6\x02&quot;u\xb6\x1dbOv\xc6\xfed%\x83-3\x8e\xde\x0ed&quot;\x16\x95j@\x07R\xd5PumB@&quot;\xa4`\xa5\xe7*V\x12\xf2\x90A\x95\xd9\xaal\xb8\x1a\xe6\xcc\x0b1\\\xca\x03m\xa1\xaf;c&#123;\x14\&#x27;\x14\xb4\xb2\x13\xf2\x9e\xe6\xaf\xcf&lt;\x86\x16\xc6&gt;\x86\x01?\xf6J\xa4\x9b/\xce\xd4\xec+\xc9\xf6Y\x9f\xef\x08\x88\x05\xe1B\x12\xc4\xca4\x03?\x9b\x9e\xa9r\x99\xeb\x08\xc9Tfm\xb9,\x8e&quot;\xfcK\xd3\x9dx\x97\x0ff\x15\x08\xfb\x89\xdd\xd0Z\x85W?\x9c\xb9\xd3\x10\xaf\x9dG\x96f\xae ed\tu\x0e\x8e\xccX\xe1\xe4\x82\xbc\xe9\xeb\xa2\xd6\xa44\xf4\xeb]p\xad\xa0k\t\x84\x0f\xba\xed\xc8\x18\xbc\xd3\xc02\x97\x8a\x97B\xd69\xc4\x8c\x11\xca\xeb*\xbed\xefv\x95\x96H\xf7\xb4\xb6\xbd\xfb\xc6q\xc7\x90,eCkf\xc5\xb5\x91\xb1J\x85\xab\xc4\x06\xff\xdb\xae\x03]Cd\xa1\xe4\xdf\x80\xddk2\xb4\xe7\xac\xac\x05i\\6\xf8:\x87Ps\xbcM\x06\n\xce\xdc\xafo\xc1\xd8\xf4\xd5p\x8d\xe1\xa3P\x99e\xc6Z4t\xc5\xdc\xc02.\xa8\x08\x97\xbcJ\xc4ga\xd1\xe6\xc5t\xf1\xf9\x1a\t\xc3\x95\x8a\x05\xea\x99\xe3^\xe9\x05r\xda\xb5\x97\xd4\xbd\x01\x9f\x86\xae!?\x13\xf3\xeb\x93\xc5\x80v\x01F\x96\xd9\xb6\xf6C\xb0w\x9ciH\xbc\xd3\x1c\xa5R\xd0\x08;d\xd8\xac\xbf\x1c\xff\xfca\xf2Ey\xac\x00rY\xf2A\xeb\r\x9f\x8a\xcf\xb6\xa97\xf4\x82\x12\xee,&lt;\xaa\xec\xa7RY`\xb1\x1e\xe3\xac,\xb8\xee\xe2\xc0\xc47\x9e\xf4B\\\xb1?\xd7[I\xf8\x19\xd5\xbe\x87(S\x9e$\xffq\xb0p\x8e2\x85XCE\x84\x8c\x97\xebw\xa3\x00\\_\x13\xf5Jw5\xfeK\x95\xb2\xbb\xd4\x92F\xa0\x9a\xb54\x97\x03\xaa\xe0\x98q\x0b\xdd\xbd\xf3\xe3\xfc\xfdU\x1aH\xbc\x13\x00gP\xe6\xe7\xb3\xa6\x91hP\xd3\&#x27;r\x8c\xab\xa39\xe6\x14\x0f\x15;\tt\x9bf\xa6\x7f\xc8\xe5\xf7\x16\x19\xf8\x9a\xc0n\x7fa\x1c\xf5I\xefU\xf5O\xfb\xfc\xad\x05\xadYB\x17\xb3~xL\x8d\x9f\x05\xc0\xcaWp\xf5x\xd4\xcf\xddX\x96\xad]P[`\x9ei\xfdap\xe2\xf4\xc2w\xf2\xbc\xd1 \xff\x13\xccz\xd0&amp;+\xc8\xa00\xe2\x11\xdb\xa2.\x961\xa2\x0fs(R8\xdd\x898Ve&#125;\x8f&gt;S\x83\x14\x83P\x8bA@s\xe5\x8d\xda\xb2\xf9\xba\x00\xb3\xd0Q\x1d\xaaZ\xae\x03\x9e\x92=.\x13|\xb1\x8dK4\x96A\xa5\xdeM\xbc\xd9dOxB_\xc5\x10\xbdp\xccD1\xc1$d\xdc8\xc5\x18\xd3e\x1a)[s\xecn\xd2htl\x8c\x1a0y\xd8a&amp;Q\xb5\xd7\xcd\xb2&gt;\x1b\xe1\xfdKA\xeb^v&#123;#\xba\x0eo\xef\xf5\x1c,\xe5X\x05\xc7s\xf6\xa7\xfa\xd9\xed\x87\x18\xa0&#123;C\\\xc4\xef6^\xcf%\xc9[\xb7\x87\xb0\xac\tN\xd1\x04\xaa\xa2\x10\xa4kg\xa1Pn\xcb\xfd\xfflL]\x92h&#125;&lt;\xa2\xfej1\x83\xe6\xfb\x97\x9c\xae\xe8\x88\xf1\xbdN\x0f\xde\xfd\x8d\xe6\x87^S\x94\x0c\xad\xee%\t\xb5\xd6\xfb\xac\xb7d0\\\xe8\xb9\xfe\x04\xc2\x92&quot;@\xd7\x08GY%\xdf%\xba\x83\x18\x17\x7f\x00\&#x27;\x1c\&#x27;/\xa7\x7f\xe2\xf7\xc8\x9b 2(\x9cO\xa7\x7fI\xc4\xe7l\x0b\x0f\xda\xe9uR%\xaeb\x9dm\x85\xab\xbf\xe7\x95\x88\xc9\xff\xe0\xd2\x85\xaah\x0e\xd3\xf8\xe2\x89\xd1\x96ix\xe7aic\xb8\x10\x08\x9cJ,\xc6o\xbb\xe0(\x10&#125;\x0c\xb9\x9a\x11\xdf\rR\x9c\x00\x95\x88xO\xeb\xba\xbe+Qi[`u\x86\xce\xf4\xe2C\xd0\xb7\x00_#j\x19.&#123;\xeb4\xecc\xb8N^K&quot;\xab\x0b\x9e\xd7u\xe1\x1c\xe8\x1dL\xfcC\xf2\xbfS\xf5\x95\x00\xe7&gt;\x0e\x9ew\xf6\x83\xee\n\xd1\x1e\xb5\xceV\x93\x9clg\xeaV\xab\xf9\xec\xc7\x01\x9f\x0c\xe5\xd1h0\xafbMC\x13\xd8zJ\xab\x81\x7f\x88|\x0b\x95&lt;(\x15d\x90\xb7\xd7\x9e,\xb5\x14\n\xfe4\xe3\x1a\xa5\x9b&#125;\xf1\xa0\r\x96.5\x99\xce\xc9E\xed\x97\xa3\n4O\xb5\xdb\xc8\xbf\xb4\x88\xdb\xd5V\x0f\xfd\xda\r\x1d9x\xe1\xa0\xc5\xc6L\x08\xda\xc8\x88\x87Z?\x9d\xa8\xd5\xcdI\x16\xb5Q`&gt;\xb8\x1fSbN\xd9\xf2F\x01\xeb\x07\xf2.9\x87\x8e\xab\xb6\x8e\x1e\x8b\x04\xc3\xcb?\xd3F\x18g6r\xc4\x1dh$\xc9|w\xe5+/\xb4X\x94\x1ax\xf5a\x05::\x1c^\xa1\x8e\x08E\x84\xde)2m\x9cD\xb7UBsE\x82\x01\xf6\xa8\xd6E\&#x27;\xe4\x7f^\xdd\xf7\xbb4\xb0*&#125;\x12=\x1f3\x1b9\x9d\xd1\xfc\x8c\xbd\x9bC\x83Z+\xdb\x06\&#x27;_\xf2\xb9\xd6\x8d\x8e\xa0M\xc8\x8a\x13\xfeDC\xc8\xa0\x96?h\xba\xb7&quot;\xb7\x15x\xd2\xb0P\xc9\xc3c~\xdd`\x81\xb8JKJ\xe0\xcd\x80\xe6/&#125;\xce&amp;\x01h\xce\xa6\x8e\xfa*\xf4(l]\xc5\xb1a&#123;&quot;\xbe\xc9\xf3\xd3\xdc\xad\xe5!\xd3\xfd&quot;hR\&#x27;&amp;\xaf\xad\xf6\xb5\x04\xb5\xe1\x98g8\xcc\xe3f\xa9\x8d\&#x27;\xd0\xc4\x94\xf2\x865\x82&gt;U\xdba\x98:\x02V\xad\xfb\x81\xb4PDy&lt;\xdd\xeb\x01\xa9\x99^)\x8bK\xc8E\x04AM\x88\xd4\x99H\x9a\\\x8c\x13OIxmZ\xc5\x19\xe8\xc1\x19\x82E\xf7\x01SNr\xf70\xa4\xe1\x92\xa6\xed\x1d\tZ\xbfD0\xc6\x80\xe5\xf8\xdd\xa9\xd8\xe3\xa2\xb1y\xc5;\x9d\xd6c\x8as\x07\x0fBa&quot;\xc2Mw\x9f,w\x1b\xc7\x98\x8a\xd3\x93\xb0\&#x27;\xdb\xact\x99\x11Vq&lt;\x8d$c\x8bX\xd3\x04\x9d\x92\x17\xa9\x91&#125;\x9fc\xc5x8\xc3\xea\xb2&gt;&lt;\x88krU\x055\x1cN\x8d\xf7\&#x27;S&gt;\x14\xc9pV\xbe\x1fj\xed\xa5\t\xbc\xbfD\xed$\x88\x00n7&lt;\xf5\xd6\xe9h\xaf@\x94\xfb\x1am\x9a\xa4\x1a\xf5Z\xcb\xf9\x80\xb6\x9d\xd6\xf1\x9f\xce\x1e\xaf\x97=\xdcrj\xcfh\xc2\x1dS\xdd\x18\x15\xb5\xc3O=\x0e\xba\x07\x0b\xb1J\x01A\x7fl\xcf?\&#x27;\xb0e\x9aO\xed2\xf7\xf4\xa1\xd3\xdf\x11_H\x8f\x8f\x03\x7f\xeej\x954\r\x1aA\xdanM\x8f\xef\x9dq\xc6\xf5\x16E3\x10\x80\x88\xa0\xd0Q\xfc\xf1\x8b\xf1\xcf\xb5\xed\xa54P\x18\xb4\xc9\x02:&#125;\xc6\xf8\x17\xaa\x8a\xcd\xb88\x03\xecI\xe7\x9a\xef\xab9\x1e\x7f9\x1ah\xef\x1c\xef\x13m\x9bfqb\x1a\x8a\xe1\x02\x8e\xf9\xa1\x9d\x90\xb2$\xcbS\x10QS\x96\xa8\xea\x8bx\xc11\x93\x1c\xb9\x0b\x80~\xde\x9b\xc4\xa2N\xe0N~Q\xaf\xc0@\x01\x9d=[@\r1T\xec\xb9\xd3\xe0q\x94\xd1\xf7\x983\x10*\xad\x1a\xd3hs\x98&#125;\xd8\xfd\x05\n\xd1u\xf7d\xd2\x9a\xc6\x95\xba\x0cJ\\GSC\xbb\&#x27;\x18\x1f\xaa\x12/|q\x0b\x81\xb4)\x15&#125;\xa0\xf9S\xb3\xcb\x86\xdcQ)2OH\x11\xde.\xcb\xe1Z!DA\xd3Q&lt;N&gt;\xa0k\n-Z)r5\xa3k\x9f\x91&amp;\xc7\xb8\xfe\x1814\x16xh\x97^\xe3\x03:\xb0f\x14\xce\\\x85\xe4k_\xadf2\xe5\xb1`\x8f8\xfc\xf6#x\x1f\x98\xdex7+\x98=G\xb1M&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>开头没有标识符,根据运行环境可知特征码是PY000000,我们帮它加上PY000000,工具才能正确识别这个pyarmor加密</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyarmor_runtime_000000 <span class="keyword">import</span> __pyarmor__</span><br><span class="line">__pyarmor__(__name__, __file__, <span class="string">b&#x27;PY000000\x00\x03\r\x00\xf3\r\r\n\x80\x00\x01\x00\x08\x00\x00\x00\x04\x00</span></span><br><span class="line"><span class="string">后面的省略</span></span><br></pre></td></tr></table></figure><p><img data-src="/images/逆向中的misc/py/pyarmor成功.png" alt="pyarmor成功"></p><p>成功后会出现这种图形化界面,现在我们去到被混淆的文件发现多了很多文件,后缀是.py的文件就是解密后的py源码</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><div class="table-container"><table><thead><tr><th>阶段</th><th>工具</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>exe 解包</td><td>pyinstxtractor.py</td><td><code>python pyinstxtractor.py target.exe</code></td><td>提取 pyc</td></tr><tr><td>pyc 反编译</td><td>uncompyle6</td><td><code>uncompyle6 -o ./out ./file.pyc</code></td><td>还原 py</td></tr><tr><td>pyc 反编译</td><td>pycdc</td><td><code>pycdc file.pyc &gt; file.py</code></td><td>还原 py</td></tr><tr><td>高版本 pyc</td><td>pylingual</td><td><code>python pylingual.py file.pyc</code></td><td>分析 py312</td></tr><tr><td>字节码分析</td><td>dis</td><td><code>python -m dis file.pyc</code></td><td>查看汇编</td></tr><tr><td>修复花指令</td><td>WinHex</td><td>手动修补</td><td>去花</td></tr><tr><td>加壳识别</td><td>pyarmor</td><td><code>python shot.py -r /path/to/pyarmor_runtime.pyd /path/to/obfuscated_scripts</code></td><td>加密分析</td></tr></tbody></table></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目给了exe或者直接给了pyc文件&quot;&gt;&lt;a href=&quot;#题目给了exe或者直接给了pyc文件&quot; class=&quot;headerlink&quot; title=&quot;题目给了exe或者直接给了pyc文件&quot;&gt;&lt;/a&gt;题目给了exe或者直接给了pyc文件&lt;/h1&gt;&lt;h2 id=&quot;处</summary>
      
    
    
    
    <category term="ctf逆向中的misc" scheme="http://example.com/categories/ctf%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84misc/"/>
    
    <category term="py逆向" scheme="http://example.com/categories/ctf%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84misc/py%E9%80%86%E5%90%91/"/>
    
    
    <category term="py逆向" scheme="http://example.com/tags/py%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>DLL专题</title>
    <link href="http://example.com/2025/10/15/pe%E9%80%86%E5%90%91/dll%E4%B8%93%E9%A2%98/"/>
    <id>http://example.com/2025/10/15/pe%E9%80%86%E5%90%91/dll%E4%B8%93%E9%A2%98/</id>
    <published>2025-10-14T16:00:00.000Z</published>
    <updated>2025-10-23T10:10:35.877Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>DLL（Dynamic Link Library，动态链接库）是 Windows 下的一种可执行模块，<br>可以被多个程序同时加载使用。可以导出函数  </p><p>常见用途：</p><ul><li><p>封装公共函数（比如数学库、图形库）</p></li><li><p>插件系统（比如浏览器插件）</p></li><li><p>逆向工程与注入（CTF、安全研究中常用）</p></li></ul><h1 id="DLL基础："><a href="#DLL基础：" class="headerlink" title="DLL基础："></a>DLL基础：</h1><h2 id="DllMain："><a href="#DllMain：" class="headerlink" title="DllMain："></a>DllMain：</h2><ul><li><p>dll<strong>没有 <code>main</code> 或 <code>WinMain</code></strong>。</p></li><li><p>它有一个可选的 <strong><code>DllMain</code></strong> 入口点函数。这个函数<strong>不是</strong>给普通用户调用的，而是<strong>操作系统加载器</strong>在特定事件发生时（DLL 被加载、卸载、进程创建线程、线程结束）自动调用的。</p></li><li><p>它的主要目的是进行<strong>初始化和清理工作</strong>（例如，创建/销毁全局对象、初始化线程本地存储 TLS）。如果不需要这些，完全可以不实现 <code>DllMain</code>。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">BOOL APIENTRY <span class="title function_">DllMain</span><span class="params">(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call) &#123;</span><br><span class="line">        <span class="keyword">case</span> DLL_PROCESS_ATTACH: <span class="comment">// DLL被映射到进程的地址空间</span></span><br><span class="line">            <span class="comment">// 初始化代码，例如创建互斥体、加载资源</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> DLL_THREAD_ATTACH: <span class="comment">// 进程创建了一个新线程</span></span><br><span class="line">            <span class="comment">// 线程相关的初始化</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> DLL_THREAD_DETACH: <span class="comment">// 线程正常退出</span></span><br><span class="line">            <span class="comment">// 线程相关的清理</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> DLL_PROCESS_DETACH: <span class="comment">// DLL被从进程的地址空间卸载</span></span><br><span class="line">            <span class="comment">// 清理代码，例如释放资源</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE; <span class="comment">// 返回TRUE表示成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="导出函数，有两种方式："><a href="#导出函数，有两种方式：" class="headerlink" title="导出函数，有两种方式："></a>导出函数，有两种方式：</h2><h3 id="写-def文件"><a href="#写-def文件" class="headerlink" title="写.def文件"></a>写.def文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">; mylib.def</span><br><span class="line">LIBRARY <span class="string">&quot;MyLibrary&quot;</span></span><br><span class="line">EXPORTS</span><br><span class="line">    AddFunction @<span class="number">1</span></span><br><span class="line">    MultiplyFunction @<span class="number">2</span></span><br><span class="line">    MyExportedVariable DATA ; 导出变量需要DATA关键字</span><br></pre></td></tr></table></figure><p>然后在编译时链接这个文件。这种方式可以精确控制导出函数的名字和序号。</p><h3 id="使用关键字（更常见）"><a href="#使用关键字（更常见）" class="headerlink" title="使用关键字（更常见）"></a>使用关键字（更常见）</h3><p>可在如下所示的函数声明中使用 <strong>__declspec(dllexport)</strong> 关键字。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__declspec(dllexport) <span class="type">double</span> WINAPI <span class="title function_">my_C_export</span><span class="params">(<span class="type">double</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* Modify x and return it. */</span></span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">2.0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>必须在声明的最左侧添加 <strong>__declspec(dllexport)</strong> 关键字。 这种方法的优点是该函数不需要在 DEF 文件中列出，并且导出状态与定义一致。</p><p>如果要避免使用 C++ 名称修饰来提供 C++ 函数，必须按如下方式声明函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">__declspec(dllexport) <span class="type">double</span> WINAPI <span class="title function_">my_undecorated_Cpp_export</span><span class="params">(<span class="type">double</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Modify x and return it.</span></span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">2.0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>链接器将使该函数显示为 my_undecorated_Cpp_export，即源代码中显示的名称，没有任何修饰。</p><h1 id="编写一个dll并编译"><a href="#编写一个dll并编译" class="headerlink" title="编写一个dll并编译"></a>编写一个dll并编译</h1><p>mydll.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__declspec(dllexport) <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line">__declspec(dllexport) <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;t b);</span><br></pre></td></tr></table></figure><p>这里我们下面的源文件是.c，所以不加extern “C”</p><p>mydll.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mydll.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line">BOOL WINAPI <span class="title function_">DllMain</span><span class="params">(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -shared -o mydll.dll mydll.c -Wl,--out-implib,libmydll.a</span><br></pre></td></tr></table></figure><p>解释一下参数：</p><ul><li><p><code>-shared</code>：告诉 gcc 生成动态链接库</p></li><li><p><code>-o mydll.dll</code>：输出 DLL 文件</p></li><li><p><code>-Wl,--out-implib,libmydll.a</code>：同时生成一个静态导入库（方便别人链接）</p></li></ul><p>这里的静态导入库的作用是可以把dll和exe合成一个文件。方便发布,一般我们直接<strong>gcc -shared -o mydll.dll mydll.c</strong>就可以</p><p>main.c（测试函数）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span>  <span class="params">(*<span class="type">add_t</span>)</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>)</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span>  <span class="params">(*<span class="type">mul_t</span>)</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    HMODULE h = LoadLibraryA(<span class="string">&quot;C:\\Users\\Lenovo\\OneDrive\\Desktop\\c++andpy\\cpp\\mydll\\mydll.dll&quot;</span>); <span class="comment">// 或者写绝对路径</span></span><br><span class="line">    <span class="keyword">if</span> (!h) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;LoadLibrary failed: %lu\n&quot;</span>, GetLastError());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">add_t</span> add = (<span class="type">add_t</span>)GetProcAddress(h, <span class="string">&quot;add&quot;</span>);</span><br><span class="line">    <span class="type">mul_t</span> mul = (<span class="type">mul_t</span>)GetProcAddress(h, <span class="string">&quot;mul&quot;</span>);</span><br><span class="line">    <span class="type">int</span> a=<span class="number">10</span>,b=<span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> sum;</span><br><span class="line">    sum=add(a,b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sum=%d\n&quot;</span>,sum);</span><br><span class="line">    <span class="type">int</span> m=mul(a,b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;mul=%d\n&quot;</span>,m);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sum=30</span><br><span class="line">mul=200</span><br></pre></td></tr></table></figure><h1 id="DLL调试："><a href="#DLL调试：" class="headerlink" title="DLL调试："></a>DLL调试：</h1><p>dll调试如果用vscode的话太逆天，掌握不好注入器和被注入exe之间的关系，用vs就很轻松</p><p><img data-src="/images/dll专题/资源管理器.png" alt="资源管理器">   </p><p>右键我们的文件夹，点最下面的属性</p><p><img data-src="/images/dll专题/编译dll.png" alt="编译dll"></p><p>然后配置类型需要改成动态库.dll</p><p><img data-src="/images/dll专题/目标exe.png" alt="目标exe"></p><p>在调试的行那，右边的命令放要注入的exe路径，然后在我们的dll对应的.c文件那直接像正常的.c文件那样下断点就可以了</p><p><img data-src="/images/dll专题/断点.png" alt="断点"></p><p>然后直接运行这个dll对应的.c源程序，在exe文件的进程空间导入dll文件（dll注入或loadlibrary）后，我们就可以正常调试了</p><h1 id="DLL注入"><a href="#DLL注入" class="headerlink" title="DLL注入"></a>DLL注入</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;DLL（Dynamic Link Library，动态链接库）是 Windows 下的一种可执行模块，&lt;br&gt;可以被多个程序同时加载使用。可</summary>
      
    
    
    
    <category term="pe逆向" scheme="http://example.com/categories/pe%E9%80%86%E5%90%91/"/>
    
    <category term="pe逆向基础" scheme="http://example.com/categories/pe%E9%80%86%E5%90%91/pe%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="DLL" scheme="http://example.com/tags/DLL/"/>
    
  </entry>
  
  <entry>
    <title>windows窗口运行逻辑和常用api</title>
    <link href="http://example.com/2025/10/15/pe%E9%80%86%E5%90%91/windows%E7%AA%97%E5%8F%A3%E8%BF%90%E8%A1%8C%E9%80%BB%E8%BE%91%E5%92%8C%E5%B8%B8%E7%94%A8api/"/>
    <id>http://example.com/2025/10/15/pe%E9%80%86%E5%90%91/windows%E7%AA%97%E5%8F%A3%E8%BF%90%E8%A1%8C%E9%80%BB%E8%BE%91%E5%92%8C%E5%B8%B8%E7%94%A8api/</id>
    <published>2025-10-14T16:00:00.000Z</published>
    <updated>2025-10-16T15:38:36.117Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>windows窗口编程就是创造一个窗口并实现消息循环，我们需要逆向的是窗口消息处理函数</p><h1 id="流程："><a href="#流程：" class="headerlink" title="流程："></a>流程：</h1><h2 id="入口点："><a href="#入口点：" class="headerlink" title="入口点："></a>入口点：</h2><p>窗口的入口点是WinMain()函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> WINAPI <span class="title function_">WinMain</span><span class="params">(</span></span><br><span class="line"><span class="params">    HINSTANCE hInstance, </span></span><br><span class="line"><span class="params">    HINSTANCE hPreInstance,</span></span><br><span class="line"><span class="params">    LPSTR lpCmdeLine,</span></span><br><span class="line"><span class="params">    <span class="type">int</span> nCmdShow</span></span><br><span class="line"><span class="params">)</span> </span><br></pre></td></tr></table></figure><ul><li><p>HINSTANCE hInstance ：</p><ul><li><p>含义：当前模块（process module）的实例句柄。</p></li><li><p>现代 Windows（32/64 位）中 <code>HINSTANCE</code> 与 <code>HMODULE</code> 等价，表示模块基址（即 exe 或 dll 的加载基址）。也就是说 <code>HINSTANCE == HMODULE</code>。</p></li><li><p>常用场景：作为资源加载的句柄参数（<code>LoadIcon(hInstance, MAKEINTRESOURCE(IDI_APP))</code>、<code>FindResource(hInstance, ...)</code> 等）；也常用来创建窗口类 <code>WNDCLASSEX.hInstance</code>。</p></li><li><p>获取方式：程序入口 <code>WinMain</code> 会直接给出；也可以在任意地方用 <code>GetModuleHandle(NULL)</code> 获取当前可执行模块句柄，或 <code>GetModuleHandle(&quot;mylib.dll&quot;)</code> 获取指定 DLL 的句柄。</p></li><li><p>x86/x64 区别：无差别。都是指向模块基址的句柄（底层为值型，大小随平台指针宽度而定）。</p></li><li><p>只有在16位可执行程序里会有差别，因为16位同时多开exe，并不是独立的分割内存，而如今都是每个进程分配4gb</p></li></ul></li><li><p>HINSTANCE hPreInstance 已废弃，填null即可</p></li><li><p>LPSTR lpcmdeline：含义：指向以空字符结尾的命令行字符串（<code>char*</code>，ANSI 版 <code>WinMain</code> 使用）。</p></li><li><p>int nCmdShow：含义：程序窗口的初始显示状态，由操作系统或调用者（例如从快捷方式的“运行方式”设置或 <code>ShowWindow</code> 参数）传入。通常传给 <code>ShowWindow(hwnd, nCmdShow)</code>。</p></li></ul><h2 id="1-创建一个窗口类"><a href="#1-创建一个窗口类" class="headerlink" title="1.创建一个窗口类"></a>1.创建一个窗口类</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WNDCLASSW myClass = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">myClass.lpszClassName = <span class="string">L&quot;51hook&quot;</span>;</span><br><span class="line">myClass.lpfnWndProc = WindowProc;</span><br></pre></td></tr></table></figure><p>其中WNDCLASSW的定义：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">tagWNDCLASSEX</span> &#123;</span><br><span class="line">    UINT cbSize;</span><br><span class="line">    UINT style;</span><br><span class="line">    WNDPROC lpfnWndProc;    <span class="comment">// 窗口过程指针</span></span><br><span class="line">    <span class="type">int</span> cbClsExtra;</span><br><span class="line">    <span class="type">int</span> cbWndExtra;</span><br><span class="line">    HINSTANCE hInstance;</span><br><span class="line">    HICON hIcon;</span><br><span class="line">    HCURSOR hCursor;</span><br><span class="line">    HBRUSH hbrBackground;</span><br><span class="line">    LPCTSTR lpszMenuName;</span><br><span class="line">    LPCTSTR lpszClassName;</span><br><span class="line">    HICON hIconSm;</span><br><span class="line">&#125; WNDCLASSEX;</span><br></pre></td></tr></table></figure><p>其中最重要的就是   WNDPROC lpfnWndProc;    // 窗口过程指针。做逆向只需要学会它的用法</p><h2 id="2-注册窗口类"><a href="#2-注册窗口类" class="headerlink" title="2.注册窗口类"></a>2.注册窗口类</h2><p>RegisterClassW(&amp;myClass);</p><h2 id="3-创建窗口"><a href="#3-创建窗口" class="headerlink" title="3.创建窗口"></a>3.创建窗口</h2><p>用 CreateWindowW</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.创建窗口</span></span><br><span class="line">    HWND hwindow = <span class="built_in">CreateWindowW</span>(</span><br><span class="line">        myClass.lpszClassName,</span><br><span class="line"></span><br><span class="line">        <span class="string">L&quot;51hook&quot;</span>,</span><br><span class="line">        WS_OVERLAPPEDWINDOW,</span><br><span class="line">        CW_USEDEFAULT,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        CW_USEDEFAULT,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="literal">NULL</span>,</span><br><span class="line">        <span class="literal">NULL</span>,</span><br><span class="line">        hInstance,</span><br><span class="line">        <span class="number">0</span></span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p>函数定义：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HWND <span class="title">CreateWindowEx</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  DWORD dwExStyle,</span></span></span><br><span class="line"><span class="params"><span class="function">  LPCTSTR lpClassName,</span></span></span><br><span class="line"><span class="params"><span class="function">  LPCTSTR lpWindowName,</span></span></span><br><span class="line"><span class="params"><span class="function">  DWORD dwStyle,</span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> nWidth, <span class="type">int</span> nHeight,</span></span></span><br><span class="line"><span class="params"><span class="function">  HWND hWndParent,</span></span></span><br><span class="line"><span class="params"><span class="function">  HMENU hMenu,</span></span></span><br><span class="line"><span class="params"><span class="function">  HINSTANCE hInstance,</span></span></span><br><span class="line"><span class="params"><span class="function">  LPVOID lpParam</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p><code>dwExStyle</code>/<code>dwStyle</code>：窗口扩展样式 / 样式（WS<strong>、WS_EX</strong>）</p></li><li><p><code>lpClassName</code>：类名（或 Atom）</p></li><li><p><code>lpWindowName</code>：窗口标题（Caption）</p></li><li><p><code>hMenu</code>：菜单或子控件 ID（对于子窗口/控件是控件 ID）</p></li><li><p><code>lpParam</code>：传递给 <code>WM_CREATE</code> 的 <code>CREATESTRUCT*</code> 的 <code>lpCreateParams</code> 字段（常用于传递指针）<br>逆向：</p></li><li><p><code>CreateWindowEx</code> 返回的 <code>HWND</code> 常会被存到全局或成员变量中，搜索 <code>mov [global], eax</code>（x86）或 <code>mov [rip+..], rax</code>（x64）可定位。</p></li><li><p>若使用类 atom（整数），<code>lpClassName</code> 参数的高位为小值。</p></li></ul><p><strong>补充：winapi中A版本和W版本（就是函数后的字母）区别只有参数可不可以是unicode的区别，W版本可以用unicode编码，比如说可以写字符串L’这是unicode编码’</strong></p><h2 id="4-显示窗口"><a href="#4-显示窗口" class="headerlink" title="4.显示窗口"></a>4.显示窗口</h2><p>ShowWindow(hwindow, SW_SHOWNORMAL);</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">ShowWindow</span><span class="params">(HWND hWnd, <span class="type">int</span> nCmdShow)</span></span>;</span><br><span class="line"><span class="function">BOOL <span class="title">UpdateWindow</span><span class="params">(HWND hWnd)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><p><code>ShowWindow</code> 常在窗口创建后调用以显示窗口（<code>nCmdShow</code>=SW_SHOW, SW_SHOWNORMAL 等）</p></li><li><p><code>UpdateWindow</code> 触发 <code>WM_PAINT</code>（如果需要）</p></li></ul><h2 id="5-消息循环"><a href="#5-消息循环" class="headerlink" title="5.消息循环"></a>5.消息循环</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MSG msg;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">GetMessage</span>(&amp;msg, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">TranslateMessage</span>(&amp;msg);</span><br><span class="line">        <span class="built_in">DispatchMessage</span>(&amp;msg);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="GetMessage"><a href="#GetMessage" class="headerlink" title="GetMessage:"></a>GetMessage:</h3><p>获取消息，如果不是WM_quit就接着循环</p><h3 id="TranslateMessage-DispatchMessage"><a href="#TranslateMessage-DispatchMessage" class="headerlink" title="TranslateMessage / DispatchMessage"></a>TranslateMessage / DispatchMessage</h3><ul><li><p><code>TranslateMessage</code>：将虚拟键消息转换为字符消息（WM_KEYDOWN -&gt; WM_CHAR）</p></li><li><p><code>DispatchMessage</code>：把消息派发到目标窗口的 WndProc（最终调用 <code>CallWindowProc</code>）</p></li></ul><h2 id="6-分析WndProc"><a href="#6-分析WndProc" class="headerlink" title="6.分析WndProc"></a>6.分析WndProc</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WindowProc</span><span class="params">(   <span class="comment">//消息处理函数</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ HWND   hwnd, <span class="comment">//窗口句柄</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ UINT   uMsg, <span class="comment">// 接收的消息</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ WPARAM wParam, <span class="comment">//小参数，低6位放</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ LPARAM lParam <span class="comment">//long 参数，高16位放鼠标x坐标，低16位放鼠标y坐标</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (uMsg)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_CREATE:</span><br><span class="line">        <span class="built_in">MessageBoxW</span>(hwnd, <span class="string">L&quot;窗口创建了&quot;</span>, <span class="string">L&quot;提示&quot;</span>, MB_OK);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_CLOSE:</span><br><span class="line">        <span class="built_in">MessageBoxW</span>(hwnd, <span class="string">L&quot;窗口关闭了&quot;</span>, <span class="string">L&quot;提示&quot;</span>, MB_OK);</span><br><span class="line">        <span class="built_in">DestroyWindow</span>(hwnd);</span><br><span class="line">        <span class="built_in">PostQuitMessage</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">DefWindowProcW</span>(hwnd,uMsg,wParam,lParam);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中函数参数：</p><div class="table-container"><table><thead><tr><th>参数</th><th>类型</th><th>典型用途</th><th>注意点</th></tr></thead><tbody><tr><td><code>HWND hwnd</code></td><td>窗口句柄</td><td>唯一标识窗口实例</td><td>用于区分不同窗口</td></tr><tr><td><code>UINT uMsg</code></td><td>消息ID</td><td>指定当前消息类型</td><td>用于 <code>switch</code> 分发</td></tr><tr><td><code>WPARAM wParam</code></td><td>辅助参数</td><td>消息相关状态/标志/ID</td><td>含义因消息而异</td></tr><tr><td><code>LPARAM lParam</code></td><td>扩展参数</td><td>附加数据，如坐标、句柄</td><td>依赖消息类型解释</td></tr></tbody></table></div><p>最常见的wparam和lparam的用法：</p><div class="table-container"><table><thead><tr><th>消息类型</th><th>wParam 含义</th></tr></thead><tbody><tr><td><code>WM_KEYDOWN</code></td><td>虚拟键码（VK_XXX）</td></tr><tr><td><code>WM_LBUTTONDOWN</code></td><td>鼠标按键状态（MK_CONTROL / MK_SHIFT 等标志）</td></tr><tr><td><code>WM_COMMAND</code></td><td>高16位是通知码（如按钮点击），低16位是控件ID(父窗口内的代号)</td></tr><tr><td><code>WM_TIMER</code></td><td>定时器ID</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>消息</th><th>lParam 含义</th></tr></thead><tbody><tr><td><code>WM_MOUSEMOVE</code>(鼠标移动), <code>WM_LBUTTONDOWN</code>(鼠标左键被按下) 等</td><td>低16位 = X坐标， 高16位 = Y坐标</td></tr><tr><td><code>WM_COMMAND</code>(操作菜单、控件，快捷键、加速键，或程序调用 SendMessage(hwnd, WM_COMMAND, …) 时，系统就会发送这个消息给对应的窗口过程。)</td><td>如果来自控件（子窗口）：lParam 是该控件的 HWND。如果来自菜单/加速键：lParam 为 0（因此可以用来区分）</td></tr></tbody></table></div><p>具体消息和处理逆向我们还需要进一步积累，这里只是起抛砖引玉的作用 </p><h1 id="实际例子："><a href="#实际例子：" class="headerlink" title="实际例子："></a>实际例子：</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WindowProc</span><span class="params">(   <span class="comment">//消息处理函数</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ HWND   hwnd,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ UINT   uMsg,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ WPARAM wParam,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ LPARAM lParam</span></span></span><br><span class="line"><span class="params"><span class="function">)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (uMsg)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_CREATE:</span><br><span class="line">        <span class="built_in">MessageBoxW</span>(hwnd, <span class="string">L&quot;窗口创建了&quot;</span>, <span class="string">L&quot;提示&quot;</span>, MB_OK);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_CLOSE:</span><br><span class="line">        <span class="built_in">MessageBoxW</span>(hwnd, <span class="string">L&quot;窗口关闭了&quot;</span>, <span class="string">L&quot;提示&quot;</span>, MB_OK);</span><br><span class="line">        <span class="built_in">DestroyWindow</span>(hwnd);</span><br><span class="line">        <span class="built_in">PostQuitMessage</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">DefWindowProcW</span>(hwnd,uMsg,wParam,lParam);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> WINAPI <span class="title">WinMain</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    HINSTANCE hInstance,</span></span></span><br><span class="line"><span class="params"><span class="function">    HINSTANCE hPreInstance,</span></span></span><br><span class="line"><span class="params"><span class="function">    LPSTR lpCmdeLine,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">int</span> nCmdShow</span></span></span><br><span class="line"><span class="params"><span class="function">)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1.创建一个窗口类</span></span><br><span class="line">    WNDCLASSW myClass = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    myClass.lpszClassName = <span class="string">L&quot;51hook&quot;</span>;</span><br><span class="line">    myClass.lpfnWndProc = WindowProc;</span><br><span class="line">    <span class="comment">//2.注册窗口类</span></span><br><span class="line">    <span class="built_in">RegisterClassW</span>(&amp;myClass);</span><br><span class="line">    <span class="comment">//3.创建窗口</span></span><br><span class="line">    HWND hwindow = <span class="built_in">CreateWindowW</span>(</span><br><span class="line">        myClass.lpszClassName,</span><br><span class="line"> </span><br><span class="line">        <span class="string">L&quot;51hook&quot;</span>,</span><br><span class="line">        WS_OVERLAPPEDWINDOW,</span><br><span class="line">        CW_USEDEFAULT,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        CW_USEDEFAULT,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="literal">NULL</span>,</span><br><span class="line">        <span class="literal">NULL</span>,</span><br><span class="line">        hInstance,</span><br><span class="line">        <span class="number">0</span></span><br><span class="line">    );</span><br><span class="line">    <span class="comment">//4.显示窗口</span></span><br><span class="line">    <span class="built_in">ShowWindow</span>(hwindow, SW_SHOWNORMAL);</span><br><span class="line">​</span><br><span class="line">    <span class="comment">//5.获取消息</span></span><br><span class="line">    MSG msg = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">GetMessageW</span>(&amp;msg, <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="built_in">DispatchMessageW</span>(&amp;msg);<span class="comment">//分发消息给消息处理函数</span></span><br><span class="line">    &#125;</span><br><span class="line">​</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h1&gt;&lt;p&gt;windows窗口编程就是创造一个窗口并实现消息循环，我们需要逆向的是窗口消息处理函数&lt;/p&gt;
&lt;h1 id=&quot;流程：&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="pe逆向" scheme="http://example.com/categories/pe%E9%80%86%E5%90%91/"/>
    
    <category term="pe逆向基础" scheme="http://example.com/categories/pe%E9%80%86%E5%90%91/pe%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="窗口逆向" scheme="http://example.com/tags/%E7%AA%97%E5%8F%A3%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>强网杯2023-dotdot复现</title>
    <link href="http://example.com/2025/10/12/%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6/%E5%BC%BA%E7%BD%91%E6%9D%AF2023-dotdot%E5%A4%8D%E7%8E%B0/"/>
    <id>http://example.com/2025/10/12/%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6/%E5%BC%BA%E7%BD%91%E6%9D%AF2023-dotdot%E5%A4%8D%E7%8E%B0/</id>
    <published>2025-10-11T16:00:00.000Z</published>
    <updated>2025-10-12T13:03:17.678Z</updated>
    
    
    
    
    <category term="逆向中的密码学" scheme="http://example.com/categories/%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    <category term="对称加密题单" scheme="http://example.com/categories/%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E9%A2%98%E5%8D%95/"/>
    
    
    <category term="aes" scheme="http://example.com/tags/aes/"/>
    
  </entry>
  
  <entry>
    <title>pe中的hook实现</title>
    <link href="http://example.com/2025/10/09/pe%E9%80%86%E5%90%91/pe_hook/"/>
    <id>http://example.com/2025/10/09/pe%E9%80%86%E5%90%91/pe_hook/</id>
    <published>2025-10-08T16:00:00.000Z</published>
    <updated>2025-10-22T16:22:30.260Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>pe中的hook技术是指通过 DLL 注入（例如 CreateRemoteThread 注入、SetWindowsHookEx、frida-gadget 等实现方式）将代码注入目标进程，替换目标exe文件中的某个函数为自己的函数，而在这过程中我们没办法获得目标exe源码，只能用另一个进程去操作目标进程。本篇记录了IAT HOOK和inline hook。在日常生活中hook更多还是用frida的插桩技术实现（封装好了），不过底层hook的机制还是要了解，因为frida一旦被全方位检测拦截就没招了</p><p>注意：代码来自文末链接，但他讲的有问题，我把正确的代码改进后放在我的文章了</p><h1 id="IAT-hook"><a href="#IAT-hook" class="headerlink" title="IAT hook"></a>IAT hook</h1><p>原理：</p><p>进程运行时IAT表里存储了我们函数的真实地址rva，我们如果用注入的dll更改IAT里的地址为我们dll里实现的函数地址，就实现了hook。相当于elf文件中的got表劫持 </p><p>头文件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="type">void</span>* g_IATaddr = <span class="literal">NULL</span>;                <span class="comment">// 指向 IAT 条目（存放函数指针的内存地址）</span></span><br><span class="line"><span class="type">void</span>* g_originalMessageBoxW = <span class="literal">NULL</span>;    <span class="comment">// 保存原始 MessageBoxW 的函数地址</span></span><br><span class="line">BOOL <span class="title function_">installhook</span><span class="params">()</span>; <span class="comment">// 安装钩子</span></span><br><span class="line">BOOL <span class="title function_">uninstallhook</span><span class="params">()</span>; <span class="comment">// 卸载钩子</span></span><br><span class="line">DWORD* <span class="title function_">getIATaddr</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* dllname, <span class="type">const</span> <span class="type">char</span>* funcname, WORD ordinal)</span>; <span class="comment">// 获取IAT地址</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mydll.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> WINAPI <span class="title function_">hookMessageboxW</span><span class="params">(HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType)</span></span><br><span class="line">&#123;</span><br><span class="line">    MessageBoxA(<span class="literal">NULL</span>, <span class="string">&quot;Hooked!&quot;</span>, <span class="string">&quot;Hooked&quot;</span>, MB_OK);</span><br><span class="line">    <span class="comment">// 如果需要调用原函数，可以在这里调用</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">DWORD* <span class="title function_">getIATaddr</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* dllname, <span class="type">const</span> <span class="type">char</span>* funcname, WORD ordinal)</span></span><br><span class="line">&#123;</span><br><span class="line">    HMODULE hModule = GetModuleHandle(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (hModule == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;GetModuleHandle failed\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;GetModuleHandle success\n&quot;</span>);</span><br><span class="line">    DWORD dwmodule = (DWORD)hModule;</span><br><span class="line"></span><br><span class="line">    PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)dwmodule;</span><br><span class="line">    PIMAGE_NT_HEADERS pNtHeader = (PIMAGE_NT_HEADERS)(dwmodule + pDosHeader-&gt;e_lfanew);</span><br><span class="line">    PIMAGE_OPTIONAL_HEADER pOptionalHeader = &amp;pNtHeader-&gt;OptionalHeader;</span><br><span class="line">    PIMAGE_IMPORT_DESCRIPTOR pImageImportTable = (PIMAGE_IMPORT_DESCRIPTOR)(</span><br><span class="line">        pOptionalHeader-&gt;DataDirectory[<span class="number">1</span>].VirtualAddress + dwmodule);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (pImageImportTable-&gt;Name)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span>* iatDllName = (<span class="type">char</span>*)(pImageImportTable-&gt;Name + dwmodule);</span><br><span class="line">        <span class="keyword">if</span> (_stricmp(iatDllName, dllname) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            PIMAGE_THUNK_DATA pINT = (PIMAGE_THUNK_DATA)(pImageImportTable-&gt;OriginalFirstThunk + dwmodule);</span><br><span class="line">            PIMAGE_THUNK_DATA pIAT = (PIMAGE_THUNK_DATA)(pImageImportTable-&gt;FirstThunk + dwmodule);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (pINT-&gt;u1.Function)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (pINT-&gt;u1.Ordinal &amp; <span class="number">0x80000000</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    WORD importOrdinal = (WORD)(pINT-&gt;u1.Ordinal &amp; <span class="number">0xFFFF</span>);</span><br><span class="line">                    <span class="keyword">if</span> (importOrdinal == ordinal)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">return</span> (DWORD*)pIAT;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    PIMAGE_IMPORT_BY_NAME pIBN = (PIMAGE_IMPORT_BY_NAME)(pINT-&gt;u1.AddressOfData + dwmodule);</span><br><span class="line">                    <span class="comment">// 字符串内容比较</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">strcmp</span>((<span class="type">char</span>*)pIBN-&gt;Name, funcname) == <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">return</span> (DWORD*)pIAT;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                pINT++;</span><br><span class="line">                pIAT++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        pImageImportTable++; <span class="comment">// 遍历下一个 DLL</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOL <span class="title function_">installhook</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!g_IATaddr) <span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">    SIZE_T ptrSize = <span class="keyword">sizeof</span>(<span class="type">void</span>*);</span><br><span class="line">    DWORD oldProtect;</span><br><span class="line">    <span class="keyword">if</span> (!VirtualProtect(g_IATaddr, ptrSize, PAGE_EXECUTE_READWRITE, &amp;oldProtect)) &#123;</span><br><span class="line">        OutputDebugStringA(<span class="string">&quot;installhook: VirtualProtect failed\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 IAT 条目读取并保存原始函数指针</span></span><br><span class="line">    g_originalMessageBoxW = *(<span class="type">void</span>**)g_IATaddr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写入 hook 函数地址（按指针宽度写入）</span></span><br><span class="line">    *(<span class="type">void</span>**)g_IATaddr = (<span class="type">void</span>*)hookMessageboxW;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 恢复保护</span></span><br><span class="line">    VirtualProtect(g_IATaddr, ptrSize, oldProtect, &amp;oldProtect);</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOL <span class="title function_">uninstallhook</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!g_IATaddr) <span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">    SIZE_T ptrSize = <span class="keyword">sizeof</span>(<span class="type">void</span>*);</span><br><span class="line">    DWORD oldProtect;</span><br><span class="line">    <span class="keyword">if</span> (!VirtualProtect(g_IATaddr, ptrSize, PAGE_EXECUTE_READWRITE, &amp;oldProtect)) &#123;</span><br><span class="line">        OutputDebugStringA(<span class="string">&quot;uninstallhook: VirtualProtect failed\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 恢复原始函数地址（若已保存）</span></span><br><span class="line">    <span class="keyword">if</span> (g_originalMessageBoxW) &#123;</span><br><span class="line">        *(<span class="type">void</span>**)g_IATaddr = g_originalMessageBoxW;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    VirtualProtect(g_IATaddr, ptrSize, oldProtect, &amp;oldProtect);</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOL WINAPI <span class="title function_">DllMain</span><span class="params">(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (fdwReason == DLL_PROCESS_ATTACH)</span><br><span class="line">    &#123;</span><br><span class="line">        DisableThreadLibraryCalls(hinstDLL); <span class="comment">// 建议保留</span></span><br><span class="line">        OutputDebugStringA(<span class="string">&quot;DLL_PROCESS_ATTACH\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        g_IATaddr = getIATaddr(<span class="string">&quot;user32.dll&quot;</span>, <span class="string">&quot;MessageBoxW&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (g_IATaddr) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!installhook()) &#123;</span><br><span class="line">                OutputDebugStringA(<span class="string">&quot;DllMain: installhook failed\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                OutputDebugStringA(<span class="string">&quot;DllMain: hook installed\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            OutputDebugStringA(<span class="string">&quot;DllMain: getIATaddr returned NULL\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (fdwReason == DLL_PROCESS_DETACH)</span><br><span class="line">    &#123;</span><br><span class="line">        OutputDebugStringA(<span class="string">&quot;DLL_PROCESS_DETACH\n&quot;</span>);</span><br><span class="line">        uninstallhook();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以随便写个主进程函数，然后把这个dll文件注入看能否hook成功。注入dll的方式有很多，可以看我注入dll的那篇。当然最简单是用github上别人造好的轮子来搞dll注入。这里放一个我觉得还不错的项目<a href="https://github.com/Joe1sn/S-inject">GitHub - Joe1sn/S-inject: 支持x86/x64的DLL和Shellcode 的Windows注入的免杀工具，支持图形化界面</a></p><p>主进程函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ID_BTN_SHOW 1001</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 窗口过程</span></span><br><span class="line">LRESULT CALLBACK <span class="title function_">WndProc</span><span class="params">(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (msg)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_CREATE:</span><br><span class="line">        <span class="comment">// 在窗口上创建一个按钮</span></span><br><span class="line">        CreateWindowW(<span class="string">L&quot;BUTTON&quot;</span>, <span class="string">L&quot;点击我弹窗&quot;</span>,</span><br><span class="line">                      WS_TABSTOP | WS_VISIBLE | WS_CHILD | BS_DEFPUSHBUTTON,</span><br><span class="line">                      <span class="number">20</span>, <span class="number">20</span>, <span class="number">150</span>, <span class="number">30</span>,</span><br><span class="line">                      hwnd, (HMENU)ID_BTN_SHOW, (HINSTANCE)GetWindowLongPtr(hwnd, GWLP_HINSTANCE), <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">        <span class="keyword">if</span> (LOWORD(wParam) == ID_BTN_SHOW &amp;&amp; HIWORD(wParam) == BN_CLICKED) &#123;</span><br><span class="line">            <span class="comment">// 按钮被点击 — 弹窗</span></span><br><span class="line">            MessageBoxW(hwnd, <span class="string">L&quot;Hello World&quot;</span>, <span class="string">L&quot;Hello&quot;</span>, MB_OK | MB_ICONINFORMATION);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">        PostQuitMessage(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> DefWindowProcW(hwnd, msg, wParam, lParam);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 程序入口（GUI 程序使用 WinMain）</span></span><br><span class="line"><span class="type">int</span> WINAPI <span class="title function_">WinMain</span><span class="params">(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, <span class="type">int</span> nShowCmd)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">wchar_t</span> CLASS_NAME[] = <span class="string">L&quot;SampleWindowClass&quot;</span>;</span><br><span class="line"></span><br><span class="line">    WNDCLASSW wc = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    wc.lpfnWndProc = WndProc;</span><br><span class="line">    wc.hInstance = hInstance;</span><br><span class="line">    wc.lpszClassName = CLASS_NAME;</span><br><span class="line">    wc.hCursor = LoadCursor(<span class="literal">NULL</span>, IDC_ARROW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!RegisterClassW(&amp;wc)) &#123;</span><br><span class="line">        MessageBoxW(<span class="literal">NULL</span>, <span class="string">L&quot;RegisterClass failed&quot;</span>, <span class="string">L&quot;Error&quot;</span>, MB_OK | MB_ICONERROR);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    HWND hwnd = CreateWindowExW(</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        CLASS_NAME,</span><br><span class="line">        <span class="string">L&quot;示例 - 点击按钮弹窗&quot;</span>,</span><br><span class="line">        WS_OVERLAPPEDWINDOW,</span><br><span class="line">        CW_USEDEFAULT, CW_USEDEFAULT, <span class="number">300</span>, <span class="number">150</span>,</span><br><span class="line">        <span class="literal">NULL</span>,</span><br><span class="line">        <span class="literal">NULL</span>,</span><br><span class="line">        hInstance,</span><br><span class="line">        <span class="literal">NULL</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!hwnd) &#123;</span><br><span class="line">        MessageBoxW(<span class="literal">NULL</span>, <span class="string">L&quot;CreateWindow failed&quot;</span>, <span class="string">L&quot;Error&quot;</span>, MB_OK | MB_ICONERROR);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ShowWindow(hwnd, nShowCmd);</span><br><span class="line">    UpdateWindow(hwnd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消息循环</span></span><br><span class="line">    MSG msg;</span><br><span class="line">    <span class="keyword">while</span> (GetMessage(&amp;msg, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>)) &#123;</span><br><span class="line">        TranslateMessage(&amp;msg);</span><br><span class="line">        DispatchMessage(&amp;msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>)msg.wParam;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在x64复现成功了，上面代码兼容x86，如果想hookx86程序要在编译时编译成x86dll。我把复现过程的问题列下面：</p><h2 id="可能出现问题1："><a href="#可能出现问题1：" class="headerlink" title="可能出现问题1："></a>可能出现问题1：</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> WINAPI <span class="title function_">hookMessageboxW</span><span class="params">(HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType)</span></span><br><span class="line">&#123;</span><br><span class="line">    MessageBoxA(<span class="literal">NULL</span>, <span class="string">&quot;Hooked!&quot;</span>, <span class="string">&quot;Hooked&quot;</span>, MB_OK);</span><br><span class="line">    <span class="comment">// 如果需要调用原函数，可以在这里调用</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>这里面hook时用的MessageBoxW，会导致循环调用，会卡死</p></li><li><p>定义hookMessageboxW时没加WINAPI ，这会导致调用约定不一致，会报错</p></li></ul><h2 id="可能出现问题2："><a href="#可能出现问题2：" class="headerlink" title="可能出现问题2："></a>可能出现问题2：</h2><p>不要用他视频里的DWORD来一味声明，不然64位系统里地址是64位，会被截断导致地址错误</p><h2 id="可能出现问题3："><a href="#可能出现问题3：" class="headerlink" title="可能出现问题3："></a>可能出现问题3：</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>((<span class="type">char</span>*)pIBN-&gt;Name, funcname) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (DWORD*)pIAT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>症状</strong>：函数查找失败（总找不到目标函数）。<br><strong>原因</strong>：<code>pIBN-&gt;Name == funcname</code> 比较的是地址而非内容。<br><strong>修复</strong>：用 <code>_stricmp((char*)pIBN-&gt;Name, funcname)</code> 或 <code>strcmp</code>（按是否区分大小写）。</p><h1 id="inline-hook"><a href="#inline-hook" class="headerlink" title="inline hook"></a>inline hook</h1><p>上面的IAT表有个问题，就是不在导入表里的函数你没办法hook啊，所以inline hook就是用来解决这个问题的。</p><ul><li>原理：</li></ul><p>直接修改目标函数的前几条机器指令（通常是函数入口），替换成跳转指令（如 b <new_func> 或 ldr pc, [addr]）；</p><ul><li>优点：</li></ul><p>可以 Hook 几乎任意函数（导出或非导出、静态或动态）</p><p>精细控制，适合保护/加壳/代码注入等底层用途</p><ul><li>缺点：</li></ul><p>对 CPU 架构高度依赖（ARM64、ARMv7）</p><p>对汇编、内存保护、缓存等有要求（必须关闭写保护）</p><p>稳定性较低，不当使用可能 crash</p><p>代码：</p><p>main.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> WINAPI <span class="title function_">MyMessageBoxW</span><span class="params">(</span></span><br><span class="line"><span class="params">    _In_opt_ HWND hWnd,</span></span><br><span class="line"><span class="params">    _In_opt_ LPCWSTR lpText,</span></span><br><span class="line"><span class="params">    _In_opt_ LPCWSTR lpCaption,</span></span><br><span class="line"><span class="params">    _In_ UINT uType)</span>;</span><br><span class="line">BOOL <span class="title function_">InstallHook</span><span class="params">()</span>;</span><br><span class="line">BOOL <span class="title function_">UnInstallHook</span><span class="params">()</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>main.cpp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mydll.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uintptr_t</span> g_unhookfun = <span class="number">0</span>;</span><br><span class="line">BYTE g_oldcode[<span class="number">16</span>] = &#123; <span class="number">0</span> &#125;; <span class="comment">// 保存原函数前16个字节</span></span><br><span class="line">BYTE g_newcode[<span class="number">16</span>] = &#123; <span class="number">0</span> &#125;; <span class="comment">// hook 指令占用前12字节，剩余用 NOP 填充</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 思路：</span></span><br><span class="line"><span class="comment">// 1、找到我们要HOOK函数地址</span></span><br><span class="line"><span class="comment">// 2、保存要HOOK的函数的前16个字节</span></span><br><span class="line"><span class="comment">// 3、构建 mov rax, imm64; jmp rax （12字节）指令写入目标函数前</span></span><br><span class="line"><span class="comment">// 4、安装/卸载时写回/恢复这16字节</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> WINAPI <span class="title function_">MyMessageBoxW</span><span class="params">(</span></span><br><span class="line"><span class="params">    HWND hWnd,</span></span><br><span class="line"><span class="params">    LPCWSTR lpText,</span></span><br><span class="line"><span class="params">    LPCWSTR lpCaption,</span></span><br><span class="line"><span class="params">    UINT uType)</span></span><br><span class="line">&#123;</span><br><span class="line">    UnInstallHook();</span><br><span class="line">    <span class="type">int</span> result = MessageBoxW(hWnd, <span class="string">L&quot;51HOOK&quot;</span>, lpCaption, uType);</span><br><span class="line">    InstallHook();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建 mov rax, imm64; jmp rax （12 字节）</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">BuildMovRaxJmp</span><span class="params">(BYTE* buf, <span class="type">uintptr_t</span> target)</span></span><br><span class="line">&#123;</span><br><span class="line">    buf[<span class="number">0</span>] = <span class="number">0x48</span>; buf[<span class="number">1</span>] = <span class="number">0xB8</span>; <span class="comment">// mov rax, imm64</span></span><br><span class="line">    <span class="built_in">memcpy</span>(buf + <span class="number">2</span>, &amp;target, <span class="number">8</span>);  <span class="comment">// imm64 (little endian)</span></span><br><span class="line">    buf[<span class="number">10</span>] = <span class="number">0xFF</span>; buf[<span class="number">11</span>] = <span class="number">0xE0</span>; <span class="comment">// jmp rax</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 安装钩子</span></span><br><span class="line">BOOL <span class="title function_">InstallHook</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    DWORD oldProtect = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (g_unhookfun == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 改写前12字节为 mov rax, imm64; jmp rax</span></span><br><span class="line">    BuildMovRaxJmp(g_newcode, (<span class="type">uintptr_t</span>)MyMessageBoxW);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把剩下的字节用 NOP 填充（保证覆盖 16 字节）</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">12</span>; i &lt; <span class="number">16</span>; ++i) g_newcode[i] = <span class="number">0x90</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!VirtualProtect((LPVOID)g_unhookfun, <span class="keyword">sizeof</span>(g_newcode), PAGE_EXECUTE_READWRITE, &amp;oldProtect)) <span class="keyword">return</span> FALSE;</span><br><span class="line">    <span class="built_in">memcpy</span>((<span class="type">void</span>*)g_unhookfun, g_newcode, <span class="keyword">sizeof</span>(g_newcode));</span><br><span class="line">    VirtualProtect((LPVOID)g_unhookfun, <span class="keyword">sizeof</span>(g_newcode), oldProtect, &amp;oldProtect);</span><br><span class="line">    FlushInstructionCache(GetCurrentProcess(), (LPCVOID)g_unhookfun, <span class="keyword">sizeof</span>(g_newcode));</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 卸载钩子</span></span><br><span class="line">BOOL <span class="title function_">UnInstallHook</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    DWORD oldProtect = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (g_unhookfun == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!VirtualProtect((LPVOID)g_unhookfun, <span class="keyword">sizeof</span>(g_oldcode), PAGE_EXECUTE_READWRITE, &amp;oldProtect)) <span class="keyword">return</span> FALSE;</span><br><span class="line">    <span class="built_in">memcpy</span>((<span class="type">void</span>*)g_unhookfun, g_oldcode, <span class="keyword">sizeof</span>(g_oldcode));</span><br><span class="line">    VirtualProtect((LPVOID)g_unhookfun, <span class="keyword">sizeof</span>(g_oldcode), oldProtect, &amp;oldProtect);</span><br><span class="line">    FlushInstructionCache(GetCurrentProcess(), (LPCVOID)g_unhookfun, <span class="keyword">sizeof</span>(g_oldcode));</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化函数</span></span><br><span class="line">BOOL <span class="title function_">InitHook</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 找到要Hook函数的地址</span></span><br><span class="line">    HMODULE hModule = LoadLibraryA(<span class="string">&quot;user32.dll&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (hModule == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    g_unhookfun = (<span class="type">uintptr_t</span>)GetProcAddress(hModule, <span class="string">&quot;MessageBoxW&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存函数的前16个字节（旧函数的前若干字节）</span></span><br><span class="line">    <span class="built_in">memcpy</span>(g_oldcode, (<span class="type">void</span>*)g_unhookfun, <span class="keyword">sizeof</span>(g_oldcode));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建 hook 指令到 g_newcode（在 InstallHook 会写入）</span></span><br><span class="line">    BuildMovRaxJmp(g_newcode, (<span class="type">uintptr_t</span>)MyMessageBoxW);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">12</span>; i &lt; <span class="number">16</span>; ++i) g_newcode[i] = <span class="number">0x90</span>; <span class="comment">// NOP 填充</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOL WINAPI <span class="title function_">DllMain</span><span class="params">(HINSTANCE hInstance, DWORD callReason, LPVOID lpReserved)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (callReason == DLL_PROCESS_ATTACH)</span><br><span class="line">    &#123;</span><br><span class="line">        InitHook();</span><br><span class="line">        InstallHook();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (callReason == DLL_PROCESS_DETACH)</span><br><span class="line">    &#123;</span><br><span class="line">        UnInstallHook();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我是在x64程序上复现的，关键在于对jmp指令的处理，x86版本要稍作修改，按视频里的来</p><h1 id="Reference："><a href="#Reference：" class="headerlink" title="Reference："></a>Reference：</h1><p>【【保姆级教程】16 节吃透 Windows PE 文件格式！从解析到 Hook 攻防全覆盖】<a href="https://www.bilibili.com/video/BV1cXT4z7Etf?p=8&amp;vd_source=ef1be23ebedc3f547905767af45d9f93">https://www.bilibili.com/video/BV1cXT4z7Etf?p=8&amp;vd_source=ef1be23ebedc3f547905767af45d9f93</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h1&gt;&lt;p&gt;pe中的hook技术是指通过 DLL 注入（例如 CreateRemoteThread 注入、SetWindowsHookEx、fr</summary>
      
    
    
    
    <category term="pe逆向" scheme="http://example.com/categories/pe%E9%80%86%E5%90%91/"/>
    
    <category term="pe逆向基础" scheme="http://example.com/categories/pe%E9%80%86%E5%90%91/pe%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="pe_hook" scheme="http://example.com/tags/pe-hook/"/>
    
  </entry>
  
  <entry>
    <title>pe文件结构</title>
    <link href="http://example.com/2025/10/09/pe%E9%80%86%E5%90%91/pe%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/"/>
    <id>http://example.com/2025/10/09/pe%E9%80%86%E5%90%91/pe%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</id>
    <published>2025-10-08T16:00:00.000Z</published>
    <updated>2025-10-20T13:11:19.787Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>pe文件指在windows平台上的可执行文件(.exe，.dll，.com)了解他们的结构虽然对做题没什么用，但如果想开发新型外挂，防御新型外挂都是基于底层原理创新的</p><p>pe文件结构总览：</p><p><img data-src="/images/pe文件结构/pe文件结构.png" alt="pe文件结构"></p><h1 id="地址的基本概念"><a href="#地址的基本概念" class="headerlink" title="地址的基本概念"></a>地址的基本概念</h1><ul><li><p>VA（Virtual Address）：虚拟地址<br>PE 文件映射到内存空间时，数据在内存空间中对应的地址。</p></li><li><p>ImageBase：映射基址<br>PE 文件在内存空间中的映射起始位置，是个 VA 地址。</p></li><li><p>RVA（Relative Virtual Address）：相对虚拟地址<br>PE 文件在内存中的 VA 相对于 ImageBase 的偏移量。</p></li><li><p>FOA（File Offset Address，FOA）：文件偏移地址<br>PE 文件在磁盘上存放时，数据相对于文件开头位置的偏移量，文件偏移地址等于文件地址。</p></li></ul><p>转换关系：</p><ul><li><p>VA = ImageBase + RVA</p></li><li><p>RVA-节区段首地址的RVA=FOA-节区段首地址的FOA</p></li></ul><h1 id="pe文件格式"><a href="#pe文件格式" class="headerlink" title="pe文件格式"></a>pe文件格式</h1><h2 id="DOS-HEADER"><a href="#DOS-HEADER" class="headerlink" title="DOS_HEADER"></a>DOS_HEADER</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_DOS_HEADER</span> &#123;</span>      <span class="comment">// DOS .EXE header</span></span><br><span class="line">    WORD   e_magic;                     <span class="comment">// Magic number</span></span><br><span class="line">    WORD   e_cblp;                      <span class="comment">// Bytes on last page of file</span></span><br><span class="line">    WORD   e_cp;                        <span class="comment">// Pages in file</span></span><br><span class="line">    WORD   e_crlc;                      <span class="comment">// Relocations</span></span><br><span class="line">    WORD   e_cparhdr;                   <span class="comment">// Size of header in paragraphs</span></span><br><span class="line">    WORD   e_minalloc;                  <span class="comment">// Minimum extra paragraphs needed</span></span><br><span class="line">    WORD   e_maxalloc;                  <span class="comment">// Maximum extra paragraphs needed</span></span><br><span class="line">    WORD   e_ss;                        <span class="comment">// Initial (relative) SS value</span></span><br><span class="line">    WORD   e_sp;                        <span class="comment">// Initial SP value</span></span><br><span class="line">    WORD   e_csum;                      <span class="comment">// Checksum</span></span><br><span class="line">    WORD   e_ip;                        <span class="comment">// Initial IP value</span></span><br><span class="line">    WORD   e_cs;                        <span class="comment">// Initial (relative) CS value</span></span><br><span class="line">    WORD   e_lfarlc;                    <span class="comment">// File address of relocation table</span></span><br><span class="line">    WORD   e_ovno;                      <span class="comment">// Overlay number</span></span><br><span class="line">    WORD   e_res[<span class="number">4</span>];                    <span class="comment">// Reserved words</span></span><br><span class="line">    WORD   e_oemid;                     <span class="comment">// OEM identifier (for e_oeminfo)</span></span><br><span class="line">    WORD   e_oeminfo;                   <span class="comment">// OEM information; e_oemid specific</span></span><br><span class="line">    WORD   e_res2[<span class="number">10</span>];                  <span class="comment">// Reserved words</span></span><br><span class="line">    LONG   e_lfanew;                    <span class="comment">// File address of new exe header</span></span><br><span class="line">&#125; IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这是dos头在微软的定义，我们只需要了解</p><p>（1）e_magic： DOS 映像文件格式标记，与 MS-DOS 兼容的 PE 文件都将该值设为 0x4D5A，对应的 ASCII 字符为：MZ。<br>（2）e_ip： DOS 代码的初始化指令入口。<br>（3）e_cs： DOS 代码的初始化代码段入口。<br>（4）e_lfanew：PE 文件头 _IMAGE_NT_HEADERS 结构的 FA 偏移地址，即指向 _IMAGE_NT_HEADERS 结构。</p><h2 id="DOS-STUB"><a href="#DOS-STUB" class="headerlink" title="DOS_STUB"></a>DOS_STUB</h2><p>该结构未在 winnt.h 中定义，其内容随着链接时使用的链接器不同而不同，通常用于保存在 DOS 环境中的可执行代码。<br>例如：该结构中的代码用于显示字符串：“This program cannot run in DOS mode”。</p><h2 id="NT-HEADER"><a href="#NT-HEADER" class="headerlink" title="NT_HEADER"></a>NT_HEADER</h2><p>位于 <code>e_lfanew</code> 处，结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_NT_HEADERS</span> &#123;</span></span><br><span class="line">    DWORD Signature; <span class="comment">// &quot;PE\0\0&quot;</span></span><br><span class="line">    IMAGE_FILE_HEADER FileHeader;</span><br><span class="line">    IMAGE_OPTIONAL_HEADER OptionalHeader;</span><br><span class="line">&#125; IMAGE_NT_HEADERS;</span><br></pre></td></tr></table></figure><ul><li><p><code>Signature</code> 必须是 <code>PE\0\0</code>（0x00004550）。</p></li><li><p><code>FileHeader</code> 是 pe文件头，<code>OptionalHeader</code>（尽管名字叫 optional）几乎对可执行文件必需，包含入口点、ImageBase、节对齐等。</p></li></ul><h2 id="FILE-HEADER"><a href="#FILE-HEADER" class="headerlink" title="FILE_HEADER"></a>FILE_HEADER</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_FILE_HEADER</span> &#123;</span></span><br><span class="line">    WORD    Machine;</span><br><span class="line">    WORD    NumberOfSections;</span><br><span class="line">    DWORD   TimeDateStamp;</span><br><span class="line">    DWORD   PointerToSymbolTable;</span><br><span class="line">    DWORD   NumberOfSymbols;</span><br><span class="line">    WORD    SizeOfOptionalHeader;</span><br><span class="line">    WORD    Characteristics;</span><br><span class="line">&#125; IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>要掌握的只有：</p><p>（1）Machine：平台类型，映像文件只能在指定的平台或模拟指定平台的系统上运行。在 winnt.h 中定义的 Machine 如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_MACHINE_UNKNOWN           0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_MACHINE_TARGET_HOST       0x0001  <span class="comment">// Useful for indicating we want to interact with the host and not a WoW guest.</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_MACHINE_I386              0x014c  <span class="comment">// Intel 386.</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_MACHINE_R3000             0x0162  <span class="comment">// MIPS little-endian, 0x160 big-endian</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_MACHINE_R4000             0x0166  <span class="comment">// MIPS little-endian</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_MACHINE_R10000            0x0168  <span class="comment">// MIPS little-endian</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_MACHINE_WCEMIPSV2         0x0169  <span class="comment">// MIPS little-endian WCE v2</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_MACHINE_ALPHA             0x0184  <span class="comment">// Alpha_AXP</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_MACHINE_SH3               0x01a2  <span class="comment">// SH3 little-endian</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_MACHINE_SH3DSP            0x01a3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_MACHINE_SH3E              0x01a4  <span class="comment">// SH3E little-endian</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_MACHINE_SH4               0x01a6  <span class="comment">// SH4 little-endian</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_MACHINE_SH5               0x01a8  <span class="comment">// SH5</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_MACHINE_ARM               0x01c0  <span class="comment">// ARM Little-Endian</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_MACHINE_THUMB             0x01c2  <span class="comment">// ARM Thumb/Thumb-2 Little-Endian</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_MACHINE_ARMNT             0x01c4  <span class="comment">// ARM Thumb-2 Little-Endian</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_MACHINE_AM33              0x01d3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_MACHINE_POWERPC           0x01F0  <span class="comment">// IBM PowerPC Little-Endian</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_MACHINE_POWERPCFP         0x01f1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_MACHINE_IA64              0x0200  <span class="comment">// Intel 64</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_MACHINE_MIPS16            0x0266  <span class="comment">// MIPS</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_MACHINE_ALPHA64           0x0284  <span class="comment">// ALPHA64</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_MACHINE_MIPSFPU           0x0366  <span class="comment">// MIPS</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_MACHINE_MIPSFPU16         0x0466  <span class="comment">// MIPS</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_MACHINE_AXP64             IMAGE_FILE_MACHINE_ALPHA64</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_MACHINE_TRICORE           0x0520  <span class="comment">// Infineon</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_MACHINE_CEF               0x0CEF</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_MACHINE_EBC               0x0EBC  <span class="comment">// EFI Byte Code</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_MACHINE_AMD64             0x8664  <span class="comment">// AMD64 (K8)</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_MACHINE_M32R              0x9041  <span class="comment">// M32R little-endian</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_MACHINE_ARM64             0xAA64  <span class="comment">// ARM64 Little-Endian</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_MACHINE_CEE               0xC0EE</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（2）NumberOfSections：Section 的数目，即 Section Table 数组的元素个数。Windows Loader 限制 Section 的数目为 96 。<br>（3）TimeDateStamp：文件创建的日期和时间。<br>（4）PointerToSymbolTable：PE符号表的 RVA 偏移量，如果 PE符号表不存在，则该值为 0 。<br>（5）NumberOfSymbols：PE符号表中的符号个数。<br>（6）SizeOfOptionalHeader：_IMAGE_OPTIONAL_HEADER 结构的大小，对于 obj 文件，该值为 0 。<br>（7）Characteristics：PE 文件的属性。在 winnt.h 中定义的 Characteristics 如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_RELOCS_STRIPPED           0x0001  <span class="comment">// Relocation info stripped from file.</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_EXECUTABLE_IMAGE          0x0002  <span class="comment">// File is executable  (i.e. no unresolved external references).</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_LINE_NUMS_STRIPPED        0x0004  <span class="comment">// Line nunbers stripped from file.</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_LOCAL_SYMS_STRIPPED       0x0008  <span class="comment">// Local symbols stripped from file.</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_AGGRESIVE_WS_TRIM         0x0010  <span class="comment">// Aggressively trim working set</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_LARGE_ADDRESS_AWARE       0x0020  <span class="comment">// App can handle &gt;2gb addresses</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_BYTES_REVERSED_LO         0x0080  <span class="comment">// Bytes of machine word are reversed.</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_32BIT_MACHINE             0x0100  <span class="comment">// 32 bit word machine.</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_DEBUG_STRIPPED            0x0200  <span class="comment">// Debugging info stripped from file in .DBG file</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP   0x0400  <span class="comment">// If Image is on removable media, copy and run from the swap file.</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_NET_RUN_FROM_SWAP         0x0800  <span class="comment">// If Image is on Net, copy and run from the swap file.</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_SYSTEM                    0x1000  <span class="comment">// System File.</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_DLL                       0x2000  <span class="comment">// File is a DLL.</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_UP_SYSTEM_ONLY            0x4000  <span class="comment">// File should only be run on a UP machine</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_FILE_BYTES_REVERSED_HI         0x8000  <span class="comment">// Bytes of machine word are reversed.</span></span></span><br></pre></td></tr></table></figure><h2 id="OPTIONAL-HEADER"><a href="#OPTIONAL-HEADER" class="headerlink" title="OPTIONAL_HEADER"></a>OPTIONAL_HEADER</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_OPTIONAL_HEADER</span> &#123;</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Standard fields.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    WORD    Magic;</span><br><span class="line">    BYTE    MajorLinkerVersion;</span><br><span class="line">    BYTE    MinorLinkerVersion;</span><br><span class="line">    DWORD   SizeOfCode;</span><br><span class="line">    DWORD   SizeOfInitializedData;</span><br><span class="line">    DWORD   SizeOfUninitializedData;</span><br><span class="line">    DWORD   AddressOfEntryPoint;</span><br><span class="line">    DWORD   BaseOfCode;</span><br><span class="line">    DWORD   BaseOfData;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// NT additional fields.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    DWORD   ImageBase;</span><br><span class="line">    DWORD   SectionAlignment;</span><br><span class="line">    DWORD   FileAlignment;</span><br><span class="line">    WORD    MajorOperatingSystemVersion;</span><br><span class="line">    WORD    MinorOperatingSystemVersion;</span><br><span class="line">    WORD    MajorImageVersion;</span><br><span class="line">    WORD    MinorImageVersion;</span><br><span class="line">    WORD    MajorSubsystemVersion;</span><br><span class="line">    WORD    MinorSubsystemVersion;</span><br><span class="line">    DWORD   Win32VersionValue;</span><br><span class="line">    DWORD   SizeOfImage;</span><br><span class="line">    DWORD   SizeOfHeaders;</span><br><span class="line">    DWORD   CheckSum;</span><br><span class="line">    WORD    Subsystem;</span><br><span class="line">    WORD    DllCharacteristics;</span><br><span class="line">    DWORD   SizeOfStackReserve;</span><br><span class="line">    DWORD   SizeOfStackCommit;</span><br><span class="line">    DWORD   SizeOfHeapReserve;</span><br><span class="line">    DWORD   SizeOfHeapCommit;</span><br><span class="line">    DWORD   LoaderFlags;</span><br><span class="line">    DWORD   NumberOfRvaAndSizes;</span><br><span class="line">    IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];</span><br><span class="line">&#125; IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_OPTIONAL_HEADER64</span> &#123;</span></span><br><span class="line">    WORD        Magic;</span><br><span class="line">    BYTE        MajorLinkerVersion;</span><br><span class="line">    BYTE        MinorLinkerVersion;</span><br><span class="line">    DWORD       SizeOfCode;</span><br><span class="line">    DWORD       SizeOfInitializedData;</span><br><span class="line">    DWORD       SizeOfUninitializedData;</span><br><span class="line">    DWORD       AddressOfEntryPoint;</span><br><span class="line">    DWORD       BaseOfCode;</span><br><span class="line">    ULONGLONG   ImageBase;</span><br><span class="line">    DWORD       SectionAlignment;</span><br><span class="line">    DWORD       FileAlignment;</span><br><span class="line">    WORD        MajorOperatingSystemVersion;</span><br><span class="line">    WORD        MinorOperatingSystemVersion;</span><br><span class="line">    WORD        MajorImageVersion;</span><br><span class="line">    WORD        MinorImageVersion;</span><br><span class="line">    WORD        MajorSubsystemVersion;</span><br><span class="line">    WORD        MinorSubsystemVersion;</span><br><span class="line">    DWORD       Win32VersionValue;</span><br><span class="line">    DWORD       SizeOfImage;</span><br><span class="line">    DWORD       SizeOfHeaders;</span><br><span class="line">    DWORD       CheckSum;</span><br><span class="line">    WORD        Subsystem;</span><br><span class="line">    WORD        DllCharacteristics;</span><br><span class="line">    ULONGLONG   SizeOfStackReserve;</span><br><span class="line">    ULONGLONG   SizeOfStackCommit;</span><br><span class="line">    ULONGLONG   SizeOfHeapReserve;</span><br><span class="line">    ULONGLONG   SizeOfHeapCommit;</span><br><span class="line">    DWORD       LoaderFlags;</span><br><span class="line">    DWORD       NumberOfRvaAndSizes;</span><br><span class="line">    IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];</span><br><span class="line">&#125; IMAGE_OPTIONAL_HEADER64, *PIMAGE_OPTIONAL_HEADER64;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN64</span></span><br><span class="line"><span class="keyword">typedef</span> IMAGE_OPTIONAL_HEADER64             IMAGE_OPTIONAL_HEADER;</span><br><span class="line"><span class="keyword">typedef</span> PIMAGE_OPTIONAL_HEADER64            PIMAGE_OPTIONAL_HEADER;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="keyword">typedef</span> IMAGE_OPTIONAL_HEADER32             IMAGE_OPTIONAL_HEADER;</span><br><span class="line"><span class="keyword">typedef</span> PIMAGE_OPTIONAL_HEADER32            PIMAGE_OPTIONAL_HEADER;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>需要记的：</p><ul><li><p><code>Magic</code> 指示 PE32（0x10b）或 PE32+（0x20b，用于 x64）。PE32+ 没有某些 32-bit 字段（如 <code>BaseOfData</code>）。</p></li><li><p>重要字段：</p><ul><li><p><code>AddressOfEntryPoint</code>（RVA） — 程序入口点（EP）。</p></li><li><p><code>ImageBase</code> — 默认加载基址（x86 常 0x400000，x64 常 0x140000000）。</p></li><li><p><code>SectionAlignment</code> 内存对齐粒度，即 PE 文件映射到内存时的对齐粒度；默认值为系统页面大小 0x1000（4KB）；该值必须大于或等于 FileAligment 的值。</p></li><li><p><code>FileAlignment</code> — 磁盘对齐粒度，即 PE 文件在磁盘中存储时的对齐粒度；默认值为磁盘页面大小 0x200（512B）；如果 SectionAlignment 的值小于系统页面大小，则该值必须与 SectionAlignment 的值相同。</p></li><li><p><code>SizeOfImage</code> — 映像在内存中的总大小（按 <code>SectionAlignment</code> 对齐）。</p></li><li><p><code>SizeOfHeaders</code> — 所有头部（包括节表）在文件中的合占大小（按 <code>FileAlignment</code> 对齐）。</p></li><li><p><code>DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES]</code> — 数据目录数组，指向导入表/导出表/资源/重定位/证书等。每个目录是 <code>(RVA, Size)</code>。这是进入各种表的门。</p></li></ul></li></ul><h2 id="Section-Table（节表-Section-Headers）"><a href="#Section-Table（节表-Section-Headers）" class="headerlink" title="Section Table（节表 / Section Headers）"></a>Section Table（节表 / Section Headers）</h2><p>在 <code>IMAGE_NT_HEADERS</code> 之后，紧跟 <code>NumberOfSections</code> 个 <code>IMAGE_SECTION_HEADER</code>。每个节描述文件和内存中的一个区域（例如 <code>.text</code>, <code>.rdata</code>, <code>.data</code>, <code>.rsrc</code> 等）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_SECTION_HEADER</span> &#123;</span></span><br><span class="line">    BYTE  Name[<span class="number">8</span>];             <span class="comment">// 节名（如 &quot;.text&quot;）</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">      DWORD PhysicalAddress;</span><br><span class="line">      DWORD VirtualSize;</span><br><span class="line">    &#125; Misc;</span><br><span class="line">    DWORD VirtualAddress;      <span class="comment">// RVA（节在内存中的起始 RVA）</span></span><br><span class="line">    DWORD SizeOfRawData;       <span class="comment">// 文件中该节占用字节数（按 FileAlignment）</span></span><br><span class="line">    DWORD PointerToRawData;    <span class="comment">// 文件偏移（file offset）到节数据</span></span><br><span class="line">    DWORD PointerToRelocations;</span><br><span class="line">    DWORD PointerToLinenumbers;</span><br><span class="line">    WORD  NumberOfRelocations;</span><br><span class="line">    WORD  NumberOfLinenumbers;</span><br><span class="line">    DWORD Characteristics;     <span class="comment">// 可读/可写/可执行 等标志</span></span><br><span class="line">&#125; IMAGE_SECTION_HEADER;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>常见节：</p><ul><li><p><code>.text</code> — 代码段（可执行、只读）。</p></li><li><p><code>.rdata</code> — 只读数据（导出表、字符串、常量）。</p></li><li><p><code>.data</code> — 已初始化的可读写数据。</p></li><li><p><code>.bss</code> / uninitialized data — 在 PE 通常以 <code>VirtualSize</code> 指定但 <code>SizeOfRawData</code> 可能为 0。</p></li><li><p><code>.rsrc</code> — 资源（图标、对话框、版本信息等）。</p></li><li><p><code>.reloc</code> — 基址重定位表（如果启用了 ASLR 或 ImageBase 不是默认值时需要）。</p></li><li><p><code>.pdata</code> / <code>.xdata</code>（x64 异常/函数表）等。</p></li></ul><h2 id="可选文件头中的数据目录表："><a href="#可选文件头中的数据目录表：" class="headerlink" title="可选文件头中的数据目录表："></a>可选文件头中的数据目录表：</h2><p><strong>Data Directory</strong> 位于 <code>IMAGE_OPTIONAL_HEADER</code> 内，是一个固定长度的数组（通常 16 项，<code>IMAGE_NUMBEROF_DIRECTORY_ENTRIES</code>）。每项结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_DATA_DIRECTORY</span> &#123;</span></span><br><span class="line">    DWORD VirtualAddress; <span class="comment">// RVA（或对于某些目录是 file offset 特例）</span></span><br><span class="line">    DWORD Size;</span><br><span class="line">&#125; IMAGE_DATA_DIRECTORY;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们只需要记住里面的导出表，导入表，重定位表</p><h3 id="导出表："><a href="#导出表：" class="headerlink" title="导出表："></a>导出表：</h3><p>位于 <strong>数据目录表第 0 项</strong><br>（<code>IMAGE_DIRECTORY_ENTRY_EXPORT = 0</code>）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_EXPORT_DIRECTORY</span> &#123;</span></span><br><span class="line">    DWORD   Characteristics;       <span class="comment">// 通常为0，保留字段</span></span><br><span class="line">    DWORD   TimeDateStamp;         <span class="comment">// 时间戳（编译时间）</span></span><br><span class="line">    WORD    MajorVersion;          <span class="comment">// 主版本号（可选）</span></span><br><span class="line">    WORD    MinorVersion;          <span class="comment">// 次版本号（可选）</span></span><br><span class="line">    DWORD   Name;                  <span class="comment">// 模块名字符串的 RVA（如 &quot;KERNEL32.dll&quot;）</span></span><br><span class="line">    DWORD   Base;                  <span class="comment">// 导出序号起始值（通常为1）</span></span><br><span class="line">    DWORD   NumberOfFunctions;     <span class="comment">// EAT (Export Address Table) 的函数总数</span></span><br><span class="line">    DWORD   NumberOfNames;         <span class="comment">// 按名称导出的函数数量</span></span><br><span class="line">    DWORD   AddressOfFunctions;    <span class="comment">// RVA → DWORD 数组（EAT），每项为函数的 RVA</span></span><br><span class="line">    DWORD   AddressOfNames;        <span class="comment">// RVA → DWORD 数组，保存函数名的 RVA</span></span><br><span class="line">    DWORD   AddressOfNameOrdinals; <span class="comment">// RVA → WORD 数组，保存函数名对应的序号索引</span></span><br><span class="line">&#125; IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;</span><br></pre></td></tr></table></figure><p><code>Name</code> 导出表文件名首地址<br><code>Base</code> 导出函数起始序号<br><code>NumberOfFunctions</code>是dll文件中导出函数的个数：<strong>最大的序号-最小序号+1</strong><br><code>NumberOfNames</code>以名称导出函数的个数：即在dll文件中<strong>函数后面不加noname的数量</strong></p><p>首先我们要知道dll文件通常怎么编写导出哪些函数，一般是用.def文件存储函数和序号,编译时指定这个def文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LIBRARY mydll</span><br><span class="line">EXPORTS</span><br><span class="line">    sum @<span class="number">2</span></span><br><span class="line">    Add @<span class="number">3</span> NONAME</span><br><span class="line">    mul @<span class="number">7</span></span><br></pre></td></tr></table></figure><p>上面这个例子里NumberOfFunctions就是6=7-2+1；</p><p>NumberOfNames就是2</p><h4 id="在DLL文件中如何找到要用的函数呢？"><a href="#在DLL文件中如何找到要用的函数呢？" class="headerlink" title="在DLL文件中如何找到要用的函数呢？"></a>在DLL文件中如何找到要用的函数呢？</h4><p><strong>AddressOfNames存的是函数名称起始位置的偏移。<br>AddressOfNameOrdinals存的是序号，加上Base等于dll文件中函数后面的序号。<br>AddressOfFunctions存的是真正函数存储位置的偏移。</strong></p><p>从右向左看</p><p>要找到MessageBoxW的函数地址，首先从AddressOfNames在AddressOfNameOrdinals中的索引找到MessageBoxW的序号，在AddressOfFunctions按序号找到地址。</p><p><img data-src="/images/pe文件结构/导出表.png" alt="导出表"></p><h3 id="导入表"><a href="#导入表" class="headerlink" title="导入表"></a>导入表</h3><p>一个文件只有一个导出表，有多个导入表</p><p>INT：导入名称表，无论在文件中还是在内存中都是指向函数的名称</p><p>IAT: 导入地址表，在文件中时，与INT是一样的指向函数名称，在内存中保存的是函数实际地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_IMPORT_DESCRIPTOR</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        DWORD   Characteristics;        <span class="comment">// 原先叫 OriginalFirstThunk</span></span><br><span class="line">        DWORD   OriginalFirstThunk;     <span class="comment">// 指向 IMAGE_THUNK_DATA 数组</span></span><br><span class="line">    &#125; DUMMYUNIONNAME;</span><br><span class="line">    DWORD   TimeDateStamp;              <span class="comment">// 时间戳（若为绑定导入，则非零）</span></span><br><span class="line">    DWORD   ForwarderChain;             <span class="comment">// 转发器链表索引（一般为 0）</span></span><br><span class="line">    DWORD   Name;                       <span class="comment">// 导入模块名字符串的 RVA（如 &quot;USER32.dll&quot;）</span></span><br><span class="line">    DWORD   FirstThunk;                 <span class="comment">// 指向 IAT（IMAGE_THUNK_DATA 数组）</span></span><br><span class="line">&#125; IMAGE_IMPORT_DESCRIPTOR, *PIMAGE_IMPORT_DESCRIPTOR;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_THUNK_DATA32</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        DWORD ForwarderString;      <span class="comment">// 转发字符串 RVA</span></span><br><span class="line">        DWORD Function;             <span class="comment">// 实际函数地址（IAT 填充后）</span></span><br><span class="line">        DWORD Ordinal;              <span class="comment">// 按序号导入时，高位标志+序号</span></span><br><span class="line">        DWORD AddressOfData;        <span class="comment">// 指向 IMAGE_IMPORT_BY_NAME 的 RVA</span></span><br><span class="line">    &#125; u1;</span><br><span class="line">&#125; IMAGE_THUNK_DATA32;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_IMPORT_BY_NAME</span> &#123;</span></span><br><span class="line">    WORD    Hint;       <span class="comment">// 建议序号（可加快查找速度）</span></span><br><span class="line">    CHAR    Name[<span class="number">1</span>];    <span class="comment">// 函数名字符串（以 &#x27;\0&#x27; 结束）</span></span><br><span class="line">&#125; IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这三个结构体之间的关系可以用图表示</p><p><img data-src="/images/pe文件结构/导入表.png" alt="导入表"></p><h4 id="IMAGE-THUNK-DATA32四个字段的工作方式："><a href="#IMAGE-THUNK-DATA32四个字段的工作方式：" class="headerlink" title="_IMAGE_THUNK_DATA32四个字段的工作方式："></a>_IMAGE_THUNK_DATA32四个字段的工作方式：</h4><h5 id="u1-AddressOfData"><a href="#u1-AddressOfData" class="headerlink" title="u1.AddressOfData"></a>u1.AddressOfData</h5><p> 按名称导入时的初始状态。这是最常见的导入方式。它是一个 <strong>RVA</strong>，指向 <code>IMAGE_IMPORT_BY_NAME</code> 结构体。</p><p>Loader 执行时：</p><ol><li><p>检查高位标志（是否为按序号导入）</p></li><li><p>如果按名称导入 → 从 <code>AddressOfData</code> 找到字符串 <code>&quot;MessageBoxA&quot;</code></p></li><li><p>调用 <code>GetProcAddress(&quot;MessageBoxA&quot;)</code></p></li><li><p>把查到的实际函数地址 <strong>写回到同一个 thunk 里</strong><br>→ 此时该 DWORD 的含义变成了 <code>Function</code></p></li></ol><h5 id="u1-Function"><a href="#u1-Function" class="headerlink" title="u1.Function"></a>u1.Function</h5><div class="table-container"><table><thead><tr><th>阶段</th><th>字段含义</th></tr></thead><tbody><tr><td>程序加载前</td><td><code>AddressOfData</code>（指向函数名结构）</td></tr><tr><td>程序徐加载后</td><td><code>Function</code>（函数实际地址）</td></tr></tbody></table></div><p>所以你用 IDA 或 PE-Bear 打开导入表时，<br>可以看到一列是函数地址（已经被修正），那就是 <code>u1.Function</code> 的值。</p><h5 id="u1-Ordinal"><a href="#u1-Ordinal" class="headerlink" title="u1.Ordinal"></a>u1.Ordinal</h5><p>如果是 <strong>按序号导入</strong>（而不是按名称），<br>那么 <code>IMAGE_THUNK_DATA</code> 的最高位会被置为 1,这个时候序号是ordinal的低16位</p><p>Loader 检查后，会直接按序号查找导出表中的对应函数。</p><h5 id="u1-ForwarderString"><a href="#u1-ForwarderString" class="headerlink" title="u1.ForwarderString"></a>u1.ForwarderString</h5><p><strong>具体工作流程</strong></p><ol><li><p>程序启动，系统加载器解析其导入表。</p></li><li><p>加载器看到需要从 <code>Old.dll</code> 导入一个函数。</p></li><li><p>加载器检查该函数对应的 <code>IMAGE_THUNK_DATA</code> 结构。</p></li><li><p>如果发现这个条目被标记为一个转发（Loader 看到字符串里有 <code>.</code>，就知道它是转发函数），那么 <code>u1.ForwarderString</code> 字段中存储的值就是一个 RVA。</p></li><li><p>这个 RVA 指向 PE 文件内部的一个字符串，这个字符串就是转发的目标，例如 <code>&quot;NewDLL.NewFunction&quot;</code>。</p></li><li><p>加载器于是会转而加载 <code>NewDLL.dll</code>，获取 <code>NewFunction</code> 的地址，并填充到程序的 IAT 中。</p></li></ol><h3 id="重定位表"><a href="#重定位表" class="headerlink" title="重定位表"></a>重定位表</h3><h4 id="为什么需要重定位表："><a href="#为什么需要重定位表：" class="headerlink" title="为什么需要重定位表："></a>为什么需要重定位表：</h4><p>假设你编译了一个 DLL：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">编译期设定的镜像基址 (ImageBase) = <span class="number">0x10000000</span></span><br></pre></td></tr></table></figure><p>代码里可能存在这样的指令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov eax, [<span class="number">0x10003000</span>]  ; 访问全局变量的绝对地址</span><br></pre></td></tr></table></figure><p>但是当系统加载这个 DLL 时，如果地址 <code>0x10000000</code> 已经被别的模块占用，<br>Windows 就会把它加载到另一个位置，比如 <code>0x20000000</code>。</p><p> 那么所有访问 <code>0x10003000</code> 的指令都错了！</p><p><strong>重定位表的任务：</strong><br>告诉系统：“文件里哪些地方用了绝对地址”，好让 Loader 在加载时给它们加上偏移量修正</p><h4 id="重定位表的结构层级"><a href="#重定位表的结构层级" class="headerlink" title="重定位表的结构层级:"></a>重定位表的结构层级:</h4><p>整体结构是由若干个 <strong>重定位块 (Base Relocation Block)</strong> 组成。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_BASE_RELOCATION</span> &#123;</span></span><br><span class="line">    DWORD VirtualAddress; <span class="comment">// 该块对应的页基址（相对整个镜像）</span></span><br><span class="line">    DWORD SizeOfBlock;    <span class="comment">// 该块的大小（包括头和所有偏移项）</span></span><br><span class="line">    <span class="comment">// 后面紧跟若干个 WORD 类型的重定位项（类型 + 偏移）</span></span><br><span class="line">&#125; IMAGE_BASE_RELOCATION;</span><br><span class="line"><span class="comment">//采取这种基址加偏移的存储结构优点是能节省空间，这种结构只需要8+4n字节可以存n个，但不是这种结构需要8n字节才能存n个</span></span><br></pre></td></tr></table></figure><p>重定位项 (WORD) 结构</p><p>每个 <code>WORD</code> 包含两个部分（共 16 位）：</p><div class="table-container"><table><thead><tr><th>位段</th><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>高 4 位</td><td>Type</td><td>重定位类型</td></tr><tr><td>低 12 位</td><td>Offset</td><td>该页内偏移</td></tr></tbody></table></div><p>type类型在微软中的定义：</p><div class="table-container"><table><thead><tr><th>Type 值</th><th>名称</th><th>用途</th></tr></thead><tbody><tr><td>0</td><td><code>IMAGE_REL_BASED_ABSOLUTE</code></td><td>无效项（跳过/对齐用）</td></tr><tr><td>1</td><td><code>IMAGE_REL_BASED_HIGH</code></td><td>高16位修正（16位系统遗留）</td></tr><tr><td>2</td><td><code>IMAGE_REL_BASED_LOW</code></td><td>低16位修正</td></tr><tr><td>3</td><td><code>IMAGE_REL_BASED_HIGHLOW</code></td><td>32位绝对地址修正（最常用）</td></tr><tr><td>10</td><td><code>IMAGE_REL_BASED_DIR64</code></td><td>64位绝对地址修正</td></tr></tbody></table></div><p>在内存中的结构：</p><p><img data-src="/images/pe文件结构/重定位表.png" alt="重定位表"></p><h4 id="重定位表的工作原理（Windows-Loader-处理流程）"><a href="#重定位表的工作原理（Windows-Loader-处理流程）" class="headerlink" title="重定位表的工作原理（Windows Loader 处理流程）"></a>重定位表的工作原理（Windows Loader 处理流程）</h4><p><strong>1.系统加载映像文件：</strong></p><ul><li><p>期望基址 = <code>ImageBase</code>（例如 0x10000000）</p></li><li><p>实际加载地址 = <code>LoadBase</code>（例如 0x20000000）</p></li></ul><p><strong>2.计算偏移差：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Delta = LoadBase - ImageBase;   <span class="comment">// = 0x10000000</span></span><br></pre></td></tr></table></figure><p><strong>3.遍历每个重定位块：</strong></p><ul><li><p>找到 <code>IMAGE_BASE_RELOCATION.VirtualAddress</code></p></li><li><p>遍历其中的所有 <code>WORD</code> 项</p></li></ul><p><strong>4.按类型修正目标地址：</strong></p><ul><li>如果类型是 <code>IMAGE_REL_BASED_HIGHLOW</code>：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DWORD* pAddr = (DWORD*)(imageBase + VirtualAddress + Offset);</span><br><span class="line">*pAddr += Delta;</span><br></pre></td></tr></table></figure><p><strong>5.加载器修正完这些地址后：</strong></p><ul><li><p>所有全局变量、函数指针都指向正确的绝对地址；</p></li><li><p><code>.reloc</code> 区域在内存中可以被释放（某些加载器会保留用于卸载）</p></li></ul><div class="table-container"><table><thead><tr><th>阶段</th><th>内容</th></tr></thead><tbody><tr><td>编译期</td><td>生成以固定 ImageBase 链接的可执行文件</td></tr><tr><td>加载期</td><td>如果装入地址 ≠ ImageBase，则触发重定位</td></tr><tr><td><code>.reloc</code></td><td>记录所有需要修改绝对地址的地方</td></tr><tr><td>Loader</td><td>根据差值修正每个位置的值</td></tr><tr><td>类型</td><td><code>HIGHLOW</code>（32位） 或 <code>DIR64</code>（64位）</td></tr></tbody></table></div><h3 id="TLS表"><a href="#TLS表" class="headerlink" title="TLS表"></a>TLS表</h3><p>什么是TLS?<br><strong>TLS是 Thread Local Storage的缩写线程局部存储。主要是为了解决多线程中变量同步的问题。</strong></p><h4 id="tls变量："><a href="#tls变量：" class="headerlink" title="tls变量："></a>tls变量：</h4><p>TLS变量只需要定义一次，类似全局变量，但定义完后每一个线程都能获取TLS变量的副本，解决了不能同步访问TLS的问题。节约了时间和成本。</p><h4 id="tls回调函数："><a href="#tls回调函数：" class="headerlink" title="tls回调函数："></a>tls回调函数：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="title function_">VOID</span> <span class="params">(NTAPI *PIMAGE_TLS_CALLBACK)</span><span class="params">(</span></span><br><span class="line"><span class="params">    PVOID DllHandle,</span></span><br><span class="line"><span class="params">    DWORD Reason,      <span class="comment">// DLL_PROCESS_ATTACH / DLL_THREAD_ATTACH / DLL_THREAD_DETACH / DLL_PROCESS_DETACH</span></span></span><br><span class="line"><span class="params">    PVOID Reserved</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p>它会在进程附加（1），线程附加（2），线程脱离（3），进程脱离（0）时调用（小括号内数字指这四个状态对应整数）：</p><ul><li><p><strong>回调会在 Loader 设置好 TLS 数据后被调用</strong>。因此回调内部可以读取/写入静态 TLS 变量（以每线程视图访问）。</p></li><li><p><strong>调用时机</strong>：</p><ul><li><p>当模块被装载（process attach）时，Loader 为当前存在的线程分配/初始化 TLS 模板（把模板拷贝给每个线程），然后调用模块的 TLS 回调，回调通常以 <code>DLL_PROCESS_ATTACH</code> 为 <code>Reason</code>。</p></li><li><p>当一个新线程被创建时，Loader 会为该线程拷贝 TLS 模板并调用已加载模块的 TLS 回调（<code>DLL_THREAD_ATTACH</code>）。</p></li><li><p>当线程退出时，Loader 会先调用 <code>DLL_THREAD_DETACH</code> 回调，然后释放该线程的 TLS 数据。</p></li><li><p>当模块卸载或进程退出时，会按顺序调用 <code>DLL_PROCESS_DETACH</code> 回调。</p></li></ul></li><li><p><strong>执行时的约束</strong>：</p><ul><li><p>TLS 回调在 <strong>Loader Lock</strong> 下执行（与 DllMain 的执行约束类似），因此在回调中调用可能导致死锁的 API（如 <code>LoadLibrary</code>、某些同步函数）可能不安全。</p></li><li><p>回调可能在非常早的阶段执行（在 DllMain 被调用之前），所以某些运行时/全局初始化可能尚未完成。</p></li></ul></li><li><p><strong>多个回调</strong>：<code>AddressOfCallBacks</code> 指向的回调数组中回调按数组顺序被调用（从低地址到高地址），数组以 NULL 结束。多个模块的回调调用顺序涉及模块加载顺序。</p></li></ul><h4 id="代码-包含tls变量和回调函数"><a href="#代码-包含tls变量和回调函数" class="headerlink" title="代码(包含tls变量和回调函数)"></a>代码(包含tls变量和回调函数)</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker,<span class="string">&quot;/INCLUDE:__tls_used&quot;</span>) <span class="comment">//要声明连接tls</span></span></span><br><span class="line">_declspec(thread) <span class="type">int</span> g_number = <span class="number">100</span>;  <span class="comment">//tls变量</span></span><br><span class="line">HANDLE hEvent = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">threadProc1</span><span class="params">(LPVOID lparam)</span></span><br><span class="line">&#123;</span><br><span class="line">    g_number = <span class="number">200</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;threadProc1 g_number=%d\n&quot;</span>, g_number);</span><br><span class="line">    SetEvent(hEvent);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">threadProc2</span><span class="params">(LPVOID lparam)</span></span><br><span class="line">&#123;</span><br><span class="line">    WaitForSingleObject(hEvent, <span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;threadProc2 g_number=%d\n&quot;</span>, g_number);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> NTAPI <span class="title function_">t_TlsCallBack_A</span><span class="params">(PVOID DllHandle, DWORD Reason, PVOID Reserved)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;TLS函数执行了\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg(<span class="string">&quot;.CRT$XLX&quot;</span>)</span></span><br><span class="line"><span class="comment">//存储回调函数地址</span></span><br><span class="line">PIMAGE_TLS_CALLBACK pTLS_CALLBACKs[] = &#123; t_TlsCallBack_A,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg()</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    hEvent = CreateEventA(<span class="literal">NULL</span>, FALSE, FALSE, <span class="literal">NULL</span>);</span><br><span class="line">    HANDLE hThread1 = CreateThread(<span class="literal">NULL</span>, <span class="literal">NULL</span>, threadProc1, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    HANDLE hThread2 = CreateThread(<span class="literal">NULL</span>, <span class="literal">NULL</span>, threadProc2, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    WaitForSingleObject(hThread1,<span class="number">-1</span>);</span><br><span class="line">    WaitForSingleObject(hThread2,<span class="number">-1</span>);</span><br><span class="line">    CloseHandle(hEvent);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="tls反调试："><a href="#tls反调试：" class="headerlink" title="tls反调试："></a>tls反调试：</h4><p>既然我们知道了TLS是最先执行的，那么我们在TLS回调函数中加上判断是否被调试的API，若被调试直接在OEP之前终止程序，即可做到反调试。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker,<span class="string">&quot;/INCLUDE:__tls_used&quot;</span>)</span></span><br><span class="line"><span class="type">void</span> NTAPI <span class="title function_">TLS_CALLBACK1</span><span class="params">(PVOID DllHandle, DWORD Reason, PVOID Reserved)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (Reason == DLL_PROCESS_ATTACH)</span><br><span class="line">    &#123;</span><br><span class="line">        BOOL result = FALSE;</span><br><span class="line">        HANDLE hNewHandle = <span class="number">0</span>;</span><br><span class="line">        DuplicateHandle(GetCurrentProcess(), GetCurrentProcess(), GetCurrentProcess(), &amp;hNewHandle, <span class="literal">NULL</span>, <span class="literal">NULL</span>, DUPLICATE_SAME_ACCESS);</span><br><span class="line">        CheckRemoteDebuggerPresent(hNewHandle, &amp;result);<span class="comment">//微软提供的API 判断该文件有没有被调试</span></span><br><span class="line">        <span class="keyword">if</span> (result)</span><br><span class="line">        &#123;</span><br><span class="line">            MessageBoxA(<span class="number">0</span>, <span class="string">&quot;程序被调试了！&quot;</span>, <span class="string">&quot;警告&quot;</span>, MB_OK);</span><br><span class="line">            ExitProcess(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg(<span class="string">&quot;.CRT$XLX&quot;</span>)</span></span><br><span class="line">PIMAGE_TLS_CALLBACK pTLS_CALLBACKs[] = &#123; TLS_CALLBACK1,<span class="number">0</span> &#125;; </span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg()</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;main函数执行了&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="tls表"><a href="#tls表" class="headerlink" title="tls表"></a>tls表</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_TLS_DIRECTORY</span> &#123;</span></span><br><span class="line">    DWORD StartAddressOfRawData;      <span class="comment">// TLS 数据的起始 VA（虚拟地址）</span></span><br><span class="line">    DWORD EndAddressOfRawData;        <span class="comment">// TLS 数据的结束 VA（虚拟地址）</span></span><br><span class="line">    DWORD AddressOfIndex;             <span class="comment">// 存放 TLS 索引的指针（VA）</span></span><br><span class="line">    DWORD AddressOfCallBacks;         <span class="comment">// TLS 回调函数数组的指针（VA）</span></span><br><span class="line">    DWORD SizeOfZeroFill;             <span class="comment">// 填充 0 的大小</span></span><br><span class="line">    DWORD Characteristics;            <span class="comment">// 特性标志，一般为0</span></span><br><span class="line">&#125; IMAGE_TLS_DIRECTORY32;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="pe文件结构代码："><a href="#pe文件结构代码：" class="headerlink" title="pe文件结构代码："></a>pe文件结构代码：</h1><p>文件结构：</p><p>头文件：Main.cpp,CPeUtil.h</p><p>源文件：CPeUtil.cpp</p><h2 id="CPeUtil-cpp"><a href="#CPeUtil-cpp" class="headerlink" title="CPeUtil.cpp:"></a>CPeUtil.cpp:</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CPeUtil.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">CPeUtil::CPeUtil()</span><br><span class="line">&#123;</span><br><span class="line">    FileBuff=<span class="literal">NULL</span>;</span><br><span class="line">    FileSize=<span class="number">0</span>;</span><br><span class="line">    pDosHeader = <span class="literal">NULL</span>;</span><br><span class="line">    pNtHeaders = <span class="literal">NULL</span>;</span><br><span class="line">    pFileHeader = <span class="literal">NULL</span>;</span><br><span class="line">    pOptionHeader = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CPeUtil::~CPeUtil()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (FileBuff)</span><br><span class="line">    &#123;</span><br><span class="line">        delete[]FileBuff;</span><br><span class="line">        FileBuff = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//载入文件</span></span><br><span class="line">BOOL <span class="title function_">CPeUtil::loadFile</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* patch)</span></span><br><span class="line">&#123;</span><br><span class="line">    HANDLE hFile = CreateFileA(patch, GENERIC_READ, <span class="number">0</span>, <span class="literal">NULL</span>, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (hFile==<span class="number">0</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//私有成员变量获取文件大小并初始化缓冲区</span></span><br><span class="line">    FileSize = GetFileSize(hFile, <span class="number">0</span>);</span><br><span class="line">    FileBuff = new <span class="type">char</span>[FileSize]&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    DWORD realReadBytes = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//是否读取成功</span></span><br><span class="line">    BOOL readSuccess =ReadFile(hFile,FileBuff,FileSize,&amp;realReadBytes,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (readSuccess==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (InitPeInfo())</span><br><span class="line">    &#123;</span><br><span class="line">        CloseHandle(hFile);</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载文件后初始化不同头位置</span></span><br><span class="line">BOOL <span class="title function_">CPeUtil::InitPeInfo</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//用以下两个判断该文件是否为PE文件</span></span><br><span class="line">    pDosHeader = (PIMAGE_DOS_HEADER)FileBuff;</span><br><span class="line">    <span class="keyword">if</span> (pDosHeader-&gt;e_magic != IMAGE_DOS_SIGNATURE)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    pNtHeaders = (PIMAGE_NT_HEADERS)(pDosHeader-&gt;e_lfanew + FileBuff);</span><br><span class="line">    <span class="keyword">if</span> (pNtHeaders-&gt;Signature != IMAGE_NT_SIGNATURE)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    pFileHeader = &amp;pNtHeaders-&gt;FileHeader;</span><br><span class="line">    pOptionHeader = &amp;pNtHeaders-&gt;OptionalHeader;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出区段头</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">CPeUtil::PrintSectionHeaders</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    PIMAGE_SECTION_HEADER pSectionHeaders = IMAGE_FIRST_SECTION(pNtHeaders);<span class="comment">//获取第一个区段头地址</span></span><br><span class="line">    <span class="comment">//遍历不同区段</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pFileHeader-&gt;NumberOfSections; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> name[<span class="number">9</span>]&#123; <span class="number">0</span> &#125;;</span><br><span class="line">        memcpy_s(name, <span class="number">9</span>, pSectionHeaders-&gt;Name, <span class="number">8</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;区段名称：%s\n&quot;</span>, name);</span><br><span class="line">        pSectionHeaders++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解析导出表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">CPeUtil::GetExportTable</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    IMAGE_DATA_DIRECTORY directory = pOptionHeader-&gt;DataDirectory[<span class="number">0</span>];</span><br><span class="line">    PIMAGE_EXPORT_DIRECTORY pexport = (PIMAGE_EXPORT_DIRECTORY)RvaToFoa(directory.VirtualAddress);</span><br><span class="line">    <span class="type">char</span> *dllName = RvaToFoa(pexport-&gt;Name)+FileBuff;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;文件名称：%s\n&quot;</span>, dllName);</span><br><span class="line">    <span class="comment">//遍历不同函数的地址</span></span><br><span class="line">    DWORD* funaddr = (DWORD*)(RvaToFoa(pexport-&gt;AddressOfFunctions) + FileBuff);</span><br><span class="line">    WORD* peot = (WORD*)(RvaToFoa(pexport-&gt;AddressOfNameOrdinals) + FileBuff);</span><br><span class="line">    DWORD* pent = (DWORD*)(RvaToFoa(pexport-&gt;AddressOfNames) + FileBuff);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pexport-&gt;NumberOfFunctions; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;函数地址为：%x\n&quot;</span>,*funaddr);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; pexport-&gt;NumberOfNames; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (peot[j]==i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">char</span>* funName = RvaToFoa(pent[j])+FileBuff;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;函数名称为：%s\n&quot;</span>, funName);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        funaddr++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取导入表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">CPeUtil::GetImportTables</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//导入表也是数据目录表的一部分，作为第二个</span></span><br><span class="line">    IMAGE_DATA_DIRECTORY directory = pOptionHeader-&gt;DataDirectory[<span class="number">1</span>];</span><br><span class="line">    <span class="comment">//获取真正导入表地址</span></span><br><span class="line">    PIMAGE_IMPORT_DESCRIPTOR pImport = (PIMAGE_IMPORT_DESCRIPTOR)(RvaToFoa(directory.VirtualAddress) + FileBuff);</span><br><span class="line">    <span class="comment">//判断联合体中是否有数据</span></span><br><span class="line">    <span class="keyword">while</span> (pImport-&gt;OriginalFirstThunk)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span>* dllName = RvaToFoa(pImport-&gt;Name) + FileBuff;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;dll文件名称为：%s\n&quot;</span>, dllName);</span><br><span class="line">        PIMAGE_THUNK_DATA pThunkData = (PIMAGE_THUNK_DATA)(RvaToFoa(pImport-&gt;OriginalFirstThunk) + FileBuff);</span><br><span class="line">        <span class="comment">//判断联合体中是否有数据</span></span><br><span class="line">        <span class="keyword">while</span> (pThunkData-&gt;u1.Function)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//判断是按序号导入还是按名称导入</span></span><br><span class="line">            <span class="keyword">if</span> (pThunkData-&gt;u1.Ordinal &amp; <span class="number">0x80000000</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;按序号导入:%d\n&quot;</span>, pThunkData-&gt;u1.Ordinal &amp; <span class="number">0x7FFFFFFF</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                PIMAGE_IMPORT_BY_NAME importName = (PIMAGE_IMPORT_BY_NAME)(RvaToFoa(pThunkData-&gt;u1.AddressOfData) + FileBuff);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;按名称导入:%s\n&quot;</span>, importName-&gt;Name);</span><br><span class="line">            &#125;</span><br><span class="line">            pThunkData++;</span><br><span class="line">        &#125;</span><br><span class="line">        pImport++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//RVA转化FOA</span></span><br><span class="line">DWORD <span class="title function_">CPeUtil::RvaToFoa</span><span class="params">(DWORD rva)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    PIMAGE_SECTION_HEADER pSectionHeaders = IMAGE_FIRST_SECTION(pNtHeaders);<span class="comment">//获取第一个区段头地址</span></span><br><span class="line">    <span class="comment">//遍历不同区段</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pFileHeader-&gt;NumberOfSections; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (rva &gt;= pSectionHeaders-&gt;VirtualAddress &amp;&amp; rva &lt; pSectionHeaders-&gt;VirtualAddress + pSectionHeaders-&gt;Misc.VirtualSize)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//数据的FOA=数据的RVA-区段的RVA+区段的FOA</span></span><br><span class="line">            <span class="keyword">return</span> rva - pSectionHeaders-&gt;VirtualAddress + pSectionHeaders-&gt;PointerToRawData;</span><br><span class="line">        &#125;</span><br><span class="line">        pSectionHeaders++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="CPeUtil-h"><a href="#CPeUtil-h" class="headerlink" title="CPeUtil.h"></a>CPeUtil.h</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CPeUtil</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">    CPeUtil();</span><br><span class="line">    ~CPeUtil();</span><br><span class="line">    BOOL <span class="title function_">loadFile</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* patch)</span>;</span><br><span class="line">    BOOL <span class="title function_">InitPeInfo</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">void</span> <span class="title function_">PrintSectionHeaders</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">void</span> <span class="title function_">GetExportTable</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">void</span> <span class="title function_">GetImportTables</span><span class="params">()</span>;</span><br><span class="line">private:</span><br><span class="line">    <span class="type">char</span>* FileBuff;</span><br><span class="line">    DWORD FileSize;</span><br><span class="line">    PIMAGE_DOS_HEADER pDosHeader;</span><br><span class="line">    PIMAGE_NT_HEADERS pNtHeaders;</span><br><span class="line">    PIMAGE_FILE_HEADER pFileHeader;</span><br><span class="line">    PIMAGE_OPTIONAL_HEADER pOptionHeader;</span><br><span class="line">    DWORD <span class="title function_">RvaToFoa</span><span class="params">(DWORD rva)</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;CPeUtil.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    CPeUtil peUtil;</span><br><span class="line">    BOOL ifSuccess = peUtil.loadFile(<span class="string">&quot;D:\\code\\VisualStudio2022\\FirstDLL\\Debug\\FirstDLL.dll&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (ifSuccess)</span><br><span class="line">    &#123;</span><br><span class="line">        peUtil.GetImportTables();</span><br><span class="line">        <span class="comment">//peUtil.GetExportTable();</span></span><br><span class="line">        <span class="comment">//peUtil.PrintSectionHeaders();</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;加载PE文件失败！\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h1><p><a href="https://blog.csdn.net/weixin_44143678/article/details/120044602?spm=1001.2014.3001.5506">https://blog.csdn.net/weixin_44143678/article/details/120044602?spm=1001.2014.3001.5506</a></p><p>【【保姆级教程】16 节吃透 Windows PE 文件格式！从解析到 Hook 攻防全覆盖】<a href="https://www.bilibili.com/video/BV1cXT4z7Etf?p=8&amp;vd_source=ef1be23ebedc3f547905767af45d9f93">https://www.bilibili.com/video/BV1cXT4z7Etf?p=8&amp;vd_source=ef1be23ebedc3f547905767af45d9f93</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h1&gt;&lt;p&gt;pe文件指在windows平台上的可执行文件(.exe，.dll，.com)了解他们的结构虽然对做题没什么用，但如果想开发新型外挂，</summary>
      
    
    
    
    <category term="pe逆向" scheme="http://example.com/categories/pe%E9%80%86%E5%90%91/"/>
    
    <category term="pe逆向基础" scheme="http://example.com/categories/pe%E9%80%86%E5%90%91/pe%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="pe文件结构" scheme="http://example.com/tags/pe%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>异常处理机制-VEH</title>
    <link href="http://example.com/2025/10/09/pe%E9%80%86%E5%90%91/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6%E4%B8%8B-VEH/"/>
    <id>http://example.com/2025/10/09/pe%E9%80%86%E5%90%91/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6%E4%B8%8B-VEH/</id>
    <published>2025-10-08T16:00:00.000Z</published>
    <updated>2025-10-09T04:24:47.918Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VEH"><a href="#VEH" class="headerlink" title="VEH"></a>VEH</h1><p>这是 SEH 的一个增强扩展，通过 <code>AddVectoredExceptionHandler</code> 添加。VEH 处理器会在调试器和所有 SEH 处理器<strong>之前</strong>被调用。它们更像是一种“通知”机制，可以观察或拦截进程中的所有异常。</p><h1 id="与veh有关的函数"><a href="#与veh有关的函数" class="headerlink" title="与veh有关的函数"></a>与veh有关的函数</h1><div class="table-container"><table><thead><tr><th>函数名</th><th>作用</th><th>参数解释</th></tr></thead><tbody><tr><td><strong>AddVectoredExceptionHandler</strong></td><td>注册一个新的向量化异常处理函数（VEH）。注册后，当线程出现异常（例如访问违规、除零、<code>RaiseException</code>）时，系统会回调你提供的函数。</td><td><strong>ULONG FirstHandler</strong>：是否把此 handler 放在最前面。 <code>1</code> → 高优先级（最先被调用） <code>0</code> → 低优先级（放在队列后面）<strong>PVECTORED_EXCEPTION_HANDLER VectoredHandler</strong>：回调函数地址，函数类型为 <code>LONG CALLBACK handler(EXCEPTION_POINTERS* ExceptionInfo)</code>。返回值控制异常是否继续传播。</td></tr><tr><td><strong>RemoveVectoredExceptionHandler</strong></td><td>移除已注册的 VEH。</td><td><strong>PVOID HandlerHandle</strong>：<code>AddVectoredExceptionHandler</code> 返回的句柄。</td></tr><tr><td><strong>RaiseException</strong></td><td>主动抛出一个软件异常，会触发 VEH。</td><td><strong>DWORD dwExceptionCode</strong>：异常码（自定义或系统定义）。<strong>DWORD dwExceptionFlags</strong>：是否可继续执行。<code>0</code> 表示可继续，<code>EXCEPTION_NONCONTINUABLE</code> 表示不可继续。<strong>DWORD nNumberOfArguments</strong>：额外参数个数。*_const ULONG_PTR _lpArguments__：异常参数数组（可选）。</td></tr><tr><td><strong>EXCEPTION_POINTERS</strong></td><td>VEH 的回调参数结构，包含异常上下文。</td><td>成员有两个：<strong>ExceptionRecord</strong>：描述异常的详细信息（代码、参数、地址等）。<strong>ContextRecord</strong>：保存异常发生时 CPU 的寄存器状态（<code>Rip/Eip</code>, <code>Rsp/Esp</code>, <code>Rax</code>, <code>Rcx</code>…）。可读写！修改后返回 <code>EXCEPTION_CONTINUE_EXECUTION</code> 可以改变执行流。</td></tr></tbody></table></div><h2 id="正向实例："><a href="#正向实例：" class="headerlink" title="正向实例："></a>正向实例：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// veh_demo.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ======================= 1. 被“隐藏”的函数 =======================</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SecretFunc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;[SecretFunc] VEH 修改 RIP 后跳转到这里执行！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;[SecretFunc] 恭喜，VEH 已成功拦截并重定向执行流！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">ExitProcess</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ======================= 2. VEH 回调函数 =======================</span></span><br><span class="line"><span class="function">LONG CALLBACK <span class="title">MyVectoredHandler</span><span class="params">(EXCEPTION_POINTERS* ExceptionInfo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;[VEH] 异常捕获！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;  ExceptionCode: 0x&quot;</span> &lt;&lt; hex &lt;&lt; ExceptionInfo-&gt;ExceptionRecord-&gt;ExceptionCode &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;  ExceptionAddress: &quot;</span> &lt;&lt; ExceptionInfo-&gt;ExceptionRecord-&gt;ExceptionAddress &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是不是我们自己触发的异常（0xDEADC0DE）</span></span><br><span class="line">    <span class="keyword">if</span> (ExceptionInfo-&gt;ExceptionRecord-&gt;ExceptionCode == <span class="number">0xDEADC0DE</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;[VEH] 捕获到自定义异常，修改上下文...&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _M_X64</span></span><br><span class="line">        ExceptionInfo-&gt;ContextRecord-&gt;Rip = (DWORD64)&amp;SecretFunc; <span class="comment">// x64</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        ExceptionInfo-&gt;ContextRecord-&gt;Eip = (DWORD)&amp;SecretFunc;   <span class="comment">// x86</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回 EXCEPTION_CONTINUE_EXECUTION，让程序从修改后的地址继续执行</span></span><br><span class="line">        <span class="keyword">return</span> EXCEPTION_CONTINUE_EXECUTION;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他异常交给系统处理</span></span><br><span class="line">    <span class="keyword">return</span> EXCEPTION_CONTINUE_SEARCH;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ======================= 3. 主函数 =======================</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;[Main] 注册 VEH...&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册 VEH，优先级高</span></span><br><span class="line">    PVOID hHandler = <span class="built_in">AddVectoredExceptionHandler</span>(<span class="number">1</span>, MyVectoredHandler);</span><br><span class="line">    <span class="keyword">if</span> (!hHandler)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;AddVectoredExceptionHandler failed! error=&quot;</span> &lt;&lt; <span class="built_in">GetLastError</span>() &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;[Main] 准备触发自定义异常...&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 手动触发异常</span></span><br><span class="line">    <span class="built_in">RaiseException</span>(<span class="number">0xDEADC0DE</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;[Main] 如果看到这行，说明 VEH 没有拦截执行流。&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移除 VEH</span></span><br><span class="line">    <span class="built_in">RemoveVectoredExceptionHandler</span>(hHandler);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[Main] 注册 VEH...</span><br><span class="line">[Main] 准备触发自定义异常...</span><br><span class="line">[VEH] 异常捕获！</span><br><span class="line">  ExceptionCode: 0xdeadc0de</span><br><span class="line">  ExceptionAddress: 00007FF6F8B21000</span><br><span class="line">[VEH] 捕获到自定义异常，修改上下文...</span><br><span class="line">[SecretFunc] VEH 修改 RIP 后跳转到这里执行！</span><br><span class="line">[SecretFunc] 恭喜，VEH 已成功拦截并重定向执行流！</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><div class="table-container"><table><thead><tr><th>函数</th><th>用途</th><th>常用返回</th></tr></thead><tbody><tr><td>AddVectoredExceptionHandler</td><td>注册 VEH</td><td>返回 handler 句柄</td></tr><tr><td>RemoveVectoredExceptionHandler</td><td>移除 VEH</td><td>成功返回非 0</td></tr><tr><td>RaiseException</td><td>主动抛出异常</td><td>会调用 VEH</td></tr><tr><td>MyVectoredHandler</td><td>回调处理异常</td><td>返回 CONTINUE_EXECUTION 或 CONTINUE_SEARCH</td></tr><tr><td>ExceptionInfo-&gt;ContextRecord</td><td>保存寄存器上下文</td><td>可修改以改变执行流</td></tr></tbody></table></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;VEH&quot;&gt;&lt;a href=&quot;#VEH&quot; class=&quot;headerlink&quot; title=&quot;VEH&quot;&gt;&lt;/a&gt;VEH&lt;/h1&gt;&lt;p&gt;这是 SEH 的一个增强扩展，通过 &lt;code&gt;AddVectoredExceptionHandler&lt;/code&gt; 添加。VEH </summary>
      
    
    
    
    <category term="pe逆向" scheme="http://example.com/categories/pe%E9%80%86%E5%90%91/"/>
    
    <category term="反调试技术" scheme="http://example.com/categories/pe%E9%80%86%E5%90%91/%E5%8F%8D%E8%B0%83%E8%AF%95%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="反调试技术" scheme="http://example.com/tags/%E5%8F%8D%E8%B0%83%E8%AF%95%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>逆向中的AES(一)</title>
    <link href="http://example.com/2025/10/09/%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6/aes1/"/>
    <id>http://example.com/2025/10/09/%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6/aes1/</id>
    <published>2025-10-08T16:00:00.000Z</published>
    <updated>2025-10-11T13:36:51.817Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>aes在逆向有很多应用，尤其是现在越来越多软件加密逻辑都选择aes，所以总结一下aes的算法和在ctf逆向中的考点</p><h1 id="aes算法基础"><a href="#aes算法基础" class="headerlink" title="aes算法基础"></a>aes算法基础</h1><p><img data-src="/images/aes/aes结构.png" alt="aes结构"></p><p>aes最重要的一个特征就是输入是128位分组，输出也是128位分组，但其中key分128位，192位，256位三种版本</p><div class="table-container"><table><thead><tr><th>AES 类型</th><th>密钥长度</th><th>轮数 (Nr)</th><th>密钥字数 (Nk)</th></tr></thead><tbody><tr><td>AES-128</td><td>128 位</td><td>10</td><td>4</td></tr><tr><td>AES-192</td><td>192 位</td><td>12</td><td>6</td></tr><tr><td>AES-256</td><td>256 位</td><td>14</td><td>8</td></tr></tbody></table></div><p>aes分组后16个字节是按矩阵方式排列</p><p><img data-src="/images/aes/aes字节约定.png" alt="aes字节约定"></p><h1 id="加密总流程："><a href="#加密总流程：" class="headerlink" title="加密总流程："></a>加密总流程：</h1><p><img data-src="/images/aes/总结构.png" alt="总结构"></p><p>最终轮和前面9轮的区别是没有第三个步骤列混合</p><h2 id="初始变换-Initial-round"><a href="#初始变换-Initial-round" class="headerlink" title="初始变换(Initial round)"></a>初始变换(Initial round)</h2><p>初始变换就是输入的16个字节和密钥(不确定几位)进行密钥扩展后生成的<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.577ex;" xmlns="http://www.w3.org/2000/svg" width="11.517ex" height="2.147ex" role="img" focusable="false" viewBox="0 -694 5090.6 948.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mtext"><path data-c="52" d="M130 622Q123 629 119 631T103 634T60 637H27V683H202H236H300Q376 683 417 677T500 648Q595 600 609 517Q610 512 610 501Q610 468 594 439T556 392T511 361T472 343L456 338Q459 335 467 332Q497 316 516 298T545 254T559 211T568 155T578 94Q588 46 602 31T640 16H645Q660 16 674 32T692 87Q692 98 696 101T712 105T728 103T732 90Q732 59 716 27T672 -16Q656 -22 630 -22Q481 -16 458 90Q456 101 456 163T449 246Q430 304 373 320L363 322L297 323H231V192L232 61Q238 51 249 49T301 46H334V0H323Q302 3 181 3Q59 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM491 499V509Q491 527 490 539T481 570T462 601T424 623T362 636Q360 636 340 636T304 637H283Q238 637 234 628Q231 624 231 492V360H289Q390 360 434 378T489 456Q491 467 491 499Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(736,0)"></path><path data-c="75" d="M383 58Q327 -10 256 -10H249Q124 -10 105 89Q104 96 103 226Q102 335 102 348T96 369Q86 385 36 385H25V408Q25 431 27 431L38 432Q48 433 67 434T105 436Q122 437 142 438T172 441T184 442H187V261Q188 77 190 64Q193 49 204 40Q224 26 264 26Q290 26 311 35T343 58T363 90T375 120T379 144Q379 145 379 161T380 201T380 248V315Q380 361 370 372T320 385H302V431Q304 431 378 436T457 442H464V264Q464 84 465 81Q468 61 479 55T524 46H542V0Q540 0 467 -5T390 -11H383V58Z" transform="translate(1236,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1792,0)"></path><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(2348,0)"></path><path data-c="4B" d="M128 622Q121 629 117 631T101 634T58 637H25V683H36Q57 680 180 680Q315 680 324 683H335V637H313Q235 637 233 620Q232 618 232 462L233 307L379 449Q425 494 479 546Q518 584 524 591T531 607V608Q531 630 503 636Q501 636 498 636T493 637H489V683H499Q517 680 630 680Q704 680 716 683H722V637H708Q633 633 589 597Q584 592 495 506T406 419T515 254T631 80Q644 60 662 54T715 46H736V0H728Q719 3 615 3Q493 3 472 0H461V46H469Q515 46 515 72Q515 78 512 84L336 351Q332 348 278 296L232 251V156Q232 62 235 58Q243 47 302 46H335V0H324Q303 3 180 3Q45 3 36 0H25V46H58Q100 47 109 49T128 61V622Z" transform="translate(2904,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(3682,0)"></path><path data-c="79" d="M69 -66Q91 -66 104 -80T118 -116Q118 -134 109 -145T91 -160Q84 -163 97 -166Q104 -168 111 -168Q131 -168 148 -159T175 -138T197 -106T213 -75T225 -43L242 0L170 183Q150 233 125 297Q101 358 96 368T80 381Q79 382 78 382Q66 385 34 385H19V431H26L46 430Q65 430 88 429T122 428Q129 428 142 428T171 429T200 430T224 430L233 431H241V385H232Q183 385 185 366L286 112Q286 113 332 227L376 341V350Q376 365 366 373T348 383T334 385H331V431H337H344Q351 431 361 431T382 430T405 429T422 429Q477 429 503 431H508V385H497Q441 380 422 345Q420 343 378 235T289 9T227 -131Q180 -204 113 -204Q69 -204 44 -177T19 -116Q19 -89 35 -78T69 -66Z" transform="translate(4126,0)"></path></g><g data-mml-node="mn" transform="translate(4687,-239.4) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g></svg></mjx-container>(16位)异或的结果</p><script type="math/tex; mode=display">\text{State}' = \text{State} \oplus \text{RoundKey}_0</script><p>展开为矩阵形式：</p><script type="math/tex; mode=display">\begin{bmatrix}s_{0,0} & s_{0,1} & s_{0,2} & s_{0,3} \\s_{1,0} & s_{1,1} & s_{1,2} & s_{1,3} \\s_{2,0} & s_{2,1} & s_{2,2} & s_{2,3} \\s_{3,0} & s_{3,1} & s_{3,2} & s_{3,3}\end{bmatrix}\;\oplus\;\begin{bmatrix}k_{0,0} & k_{0,1} & k_{0,2} & k_{0,3} \\k_{1,0} & k_{1,1} & k_{1,2} & k_{1,3} \\k_{2,0} & k_{2,1} & k_{2,2} & k_{2,3} \\k_{3,0} & k_{3,1} & k_{3,2} & k_{3,3}\end{bmatrix}\;=\;\begin{bmatrix}s'_{0,0} & s'_{0,1} & s'_{0,2} & s'_{0,3} \\s'_{1,0} & s'_{1,1} & s'_{1,2} & s'_{1,3} \\s'_{2,0} & s'_{2,1} & s'_{2,2} & s'_{2,3} \\s'_{3,0} & s'_{3,1} & s'_{3,2} & s'_{3,3}\end{bmatrix}</script><p>其中：</p><ul><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="2.905ex" height="1.666ex" role="img" focusable="false" viewBox="0 -442 1283.9 736.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(502,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(623,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></g></svg></mjx-container> 为明文状态矩阵中第 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.479ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1979.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1178.7,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(1590.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> 个字节  </li><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="3.022ex" height="2.236ex" role="img" focusable="false" viewBox="0 -694 1335.9 988.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="TeXAtom" transform="translate(554,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(623,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></g></svg></mjx-container> 为轮密钥矩阵中第 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.479ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1979.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1178.7,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(1590.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> 个字节  </li><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.188ex;" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.507ex" role="img" focusable="false" viewBox="0 -583 778 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2295" d="M56 250Q56 394 156 488T384 583Q530 583 626 485T722 250Q722 110 625 14T390 -83Q249 -83 153 14T56 250ZM364 542Q308 539 251 509T148 418T96 278V270H369V542H364ZM681 278Q675 338 650 386T592 462T522 509T458 535T412 542H409V270H681V278ZM96 222Q104 150 139 95T219 12T302 -29T366 -42H369V230H96V222ZM681 222V230H409V-42H412Q429 -42 456 -36T521 -10T590 37T649 113T681 222Z"></path></g></g></g></svg></mjx-container> 表示按字节异或（XOR）运算</li></ul><h2 id="循环运算："><a href="#循环运算：" class="headerlink" title="循环运算："></a>循环运算：</h2><h3 id="字节代换："><a href="#字节代换：" class="headerlink" title="字节代换："></a>字节代换：</h3><p><img data-src="/images/aes/字节代换.png" alt="字节代换"></p><p>字节代换就是把第一步初始变换后的16字节矩阵块用s表代换，例如矩阵左上角的数是十六进制19，那就要代换成s盒中第1行第9列，查表可知是d4，以此类推</p><p>结果：</p><p><img data-src="/images/aes/字节代换结果.png" alt="字节代换结果"></p><h3 id="行移位："><a href="#行移位：" class="headerlink" title="行移位："></a>行移位：</h3><p>ShiftRows 操作在状态矩阵上进行，规则如下：</p><ul><li>第 0 行不变</li><li>第 1 行循环左移 1 字节</li><li>第 2 行循环左移 2 字节</li><li>第 3 行循环左移 3 字节</li></ul><p>原始状态矩阵：</p><script type="math/tex; mode=display">\text{State} =\begin{bmatrix}s_{0,0} & s_{0,1} & s_{0,2} & s_{0,3} \\s_{1,0} & s_{1,1} & s_{1,2} & s_{1,3} \\s_{2,0} & s_{2,1} & s_{2,2} & s_{2,3} \\s_{3,0} & s_{3,1} & s_{3,2} & s_{3,3}\end{bmatrix}</script><p>经过行移位后：</p><script type="math/tex; mode=display">\text{State}' =\begin{bmatrix}s_{0,0} & s_{0,1} & s_{0,2} & s_{0,3} \\s_{1,1} & s_{1,2} & s_{1,3} & s_{1,0} \\s_{2,2} & s_{2,3} & s_{2,0} & s_{2,1} \\s_{3,3} & s_{3,0} & s_{3,1} & s_{3,2}\end{bmatrix}</script><p>每一行的移位规律如下：</p><div class="table-container"><table><thead><tr><th style="text-align:center">行号</th><th style="text-align:center">移位字节数</th><th style="text-align:center">移位方向</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">不变</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">左移</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">左移</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">3</td><td style="text-align:center">左移</td></tr></tbody></table></div><h3 id="列混淆："><a href="#列混淆：" class="headerlink" title="列混淆："></a>列混淆：</h3><p><img data-src="/images/aes/列混淆.png" alt="列混淆"></p><p>左乘一个确定的矩阵，但是这里的乘法不是普通乘法</p><h4 id="列混淆中的乘法"><a href="#列混淆中的乘法" class="headerlink" title="列混淆中的乘法"></a>列混淆中的乘法</h4><script type="math/tex; mode=display">\begin{aligned}s'_{0,c} &= (02 \cdot s_{0,c}) \oplus (03 \cdot s_{1,c}) \oplus s_{2,c} \oplus s_{3,c} \\s'_{1,c} &= s_{0,c} \oplus (02 \cdot s_{1,c}) \oplus (03 \cdot s_{2,c}) \oplus s_{3,c} \\s'_{2,c} &= s_{0,c} \oplus s_{1,c} \oplus (02 \cdot s_{2,c}) \oplus (03 \cdot s_{3,c}) \\s'_{3,c} &= (03 \cdot s_{0,c}) \oplus s_{1,c} \oplus s_{2,c} \oplus (02 \cdot s_{3,c})\end{aligned}</script><p>其中乘法在有限域 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="7.352ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 3249.6 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mi" transform="translate(786,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mo" transform="translate(1535,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1924,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g></g><g data-mml-node="mo" transform="translate(2860.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> 上进行：</p><ul><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="5.191ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 2294.4 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(1222.2,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mi" transform="translate(1722.4,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container> 表示按字节左移一位（若最高位为 1，则再与 <code>0x1B</code> 异或）  </li><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="19.219ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 8494.9 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(1222.2,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mi" transform="translate(1722.4,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(2572.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(3628,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(4017,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(5239.2,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mi" transform="translate(5739.4,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(6311.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(6922.7,0)"><path data-c="2295" d="M56 250Q56 394 156 488T384 583Q530 583 626 485T722 250Q722 110 625 14T390 -83Q249 -83 153 14T56 250ZM364 542Q308 539 251 509T148 418T96 278V270H369V542H364ZM681 278Q675 338 650 386T592 462T522 509T458 535T412 542H409V270H681V278ZM96 222Q104 150 139 95T219 12T302 -29T366 -42H369V230H96V222ZM681 222V230H409V-42H412Q429 -42 456 -36T521 -10T590 37T649 113T681 222Z"></path></g><g data-mml-node="mi" transform="translate(7922.9,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container></li></ul><p>注：与0x1B异或是因为要构造有限域<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="7.352ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 3249.6 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mi" transform="translate(786,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mo" transform="translate(1535,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1924,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g></g><g data-mml-node="mo" transform="translate(2860.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>构造出来的多项式把<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.282ex" height="1.912ex" role="img" focusable="false" viewBox="0 -833.9 1008.6 844.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,363) scale(0.707)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g></g></g></g></svg></mjx-container>模之后的结果，学逆向不用学那么深，只需要知道aes的加密解密和漏洞攻击就可以了</p><h3 id="轮密钥加："><a href="#轮密钥加：" class="headerlink" title="轮密钥加："></a>轮密钥加：</h3><p>AddRoundKey 是 AES 每一轮中最简单但最关键的操作之一。<br>它将 <strong>状态矩阵 (State)</strong> 与 <strong>轮密钥矩阵 (RoundKey)</strong> 按字节异或（XOR）：</p><script type="math/tex; mode=display">\text{State}' = \text{State} \oplus \text{RoundKey}_i</script><p>设状态矩阵为：</p><script type="math/tex; mode=display">\text{State} =\begin{bmatrix}s_{0,0} & s_{0,1} & s_{0,2} & s_{0,3} \\s_{1,0} & s_{1,1} & s_{1,2} & s_{1,3} \\s_{2,0} & s_{2,1} & s_{2,2} & s_{2,3} \\s_{3,0} & s_{3,1} & s_{3,2} & s_{3,3}\end{bmatrix}</script><p>轮密钥矩阵为：</p><script type="math/tex; mode=display">\text{RoundKey}_i =\begin{bmatrix}k_{0,0} & k_{0,1} & k_{0,2} & k_{0,3} \\k_{1,0} & k_{1,1} & k_{1,2} & k_{1,3} \\k_{2,0} & k_{2,1} & k_{2,2} & k_{2,3} \\k_{3,0} & k_{3,1} & k_{3,2} & k_{3,3}\end{bmatrix}</script><p>异或后得到：</p><script type="math/tex; mode=display">\text{State}' =\begin{bmatrix}s_{0,0} \oplus k_{0,0} & s_{0,1} \oplus k_{0,1} & s_{0,2} \oplus k_{0,2} & s_{0,3} \oplus k_{0,3} \\s_{1,0} \oplus k_{1,0} & s_{1,1} \oplus k_{1,1} & s_{1,2} \oplus k_{1,2} & s_{1,3} \oplus k_{1,3} \\s_{2,0} \oplus k_{2,0} & s_{2,1} \oplus k_{2,1} & s_{2,2} \oplus k_{2,2} & s_{2,3} \oplus k_{2,3} \\s_{3,0} \oplus k_{3,0} & s_{3,1} \oplus k_{3,1} & s_{3,2} \oplus k_{3,2} & s_{3,3} \oplus k_{3,3}\end{bmatrix}</script><h3 id="按字节运算公式"><a href="#按字节运算公式" class="headerlink" title="按字节运算公式"></a>按字节运算公式</h3><p>每个字节的计算方式为：</p><script type="math/tex; mode=display">s'_{i,j} = s_{i,j} \oplus k_{i,j}, \quad 0 \le i,j \le 3</script><h2 id="密钥扩展："><a href="#密钥扩展：" class="headerlink" title="密钥扩展："></a>密钥扩展：</h2><p>初始只有128/192/256位的密钥是怎么更新的呢，这就涉及到密钥扩展</p><p>这是初始状态，这里以128位密钥为例，先全部填入前4列，设第5列为Wi</p><p><img data-src="/images/aes/密钥扩展初始.png" alt="密钥扩展初始"></p><ol><li><strong>初始部分：</strong></li></ol><script type="math/tex; mode=display">W[i] = \text{原始密钥的第 } i \text{ 个 32 位字}, \quad 0 \le i < N_k</script><ol><li><strong>递推部分：（适用于所有aes算法）</strong></li></ol><p>对于 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="6.636ex" height="1.902ex" role="img" focusable="false" viewBox="0 -683 2933 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(622.8,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="msub" transform="translate(1678.6,0)"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mi" transform="translate(836,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g></svg></mjx-container>：</p><script type="math/tex; mode=display">W[i] =\begin{cases}W[i - N_k] \oplus \text{SubWord}(\text{RotWord}(W[i - 1])) \oplus \text{Rcon}[i/N_k], & \text{if } i \bmod N_k = 0 \\W[i - N_k] \oplus \text{SubWord}(W[i - 1]), & \text{if } N_k > 6 \text{ and } i \bmod N_k = 4  (只有aes256有这条)\\W[i - N_k] \oplus W[i - 1], & \text{otherwise}\end{cases}</script><h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><p><strong>RotWord：</strong><br>循环左移 1 字节  </p><script type="math/tex; mode=display">[a_0, a_1, a_2, a_3] \Rightarrow [a_1, a_2, a_3, a_0]</script><p><img data-src="/images/aes/字循环.png" alt="字循环"></p><p><strong>SubWord：</strong><br>对 4 个字节分别进行 S-box 替代  </p><script type="math/tex; mode=display">[a_0, a_1, a_2, a_3] \Rightarrow [S(a_0), S(a_1), S(a_2), S(a_3)]</script><p><strong>Rcon：</strong><br>轮常数，仅作用于字的第一个字节：</p><script type="math/tex; mode=display">\text{Rcon}[i] =\begin{bmatrix}\text{RC}[i] & 00 & 00 & 00\end{bmatrix}</script><p>其中<br><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="13.393ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5919.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><path data-c="52" d="M130 622Q123 629 119 631T103 634T60 637H27V683H202H236H300Q376 683 417 677T500 648Q595 600 609 517Q610 512 610 501Q610 468 594 439T556 392T511 361T472 343L456 338Q459 335 467 332Q497 316 516 298T545 254T559 211T568 155T578 94Q588 46 602 31T640 16H645Q660 16 674 32T692 87Q692 98 696 101T712 105T728 103T732 90Q732 59 716 27T672 -16Q656 -22 630 -22Q481 -16 458 90Q456 101 456 163T449 246Q430 304 373 320L363 322L297 323H231V192L232 61Q238 51 249 49T301 46H334V0H323Q302 3 181 3Q59 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM491 499V509Q491 527 490 539T481 570T462 601T424 623T362 636Q360 636 340 636T304 637H283Q238 637 234 628Q231 624 231 492V360H289Q390 360 434 378T489 456Q491 467 491 499Z"></path><path data-c="43" d="M56 342Q56 428 89 500T174 615T283 681T391 705Q394 705 400 705T408 704Q499 704 569 636L582 624L612 663Q639 700 643 704Q644 704 647 704T653 705H657Q660 705 666 699V419L660 413H626Q620 419 619 430Q610 512 571 572T476 651Q457 658 426 658Q322 658 252 588Q173 509 173 342Q173 221 211 151Q232 111 263 84T328 45T384 29T428 24Q517 24 571 93T626 244Q626 251 632 257H660L666 251V236Q661 133 590 56T403 -21Q262 -21 159 83T56 342Z" transform="translate(736,0)"></path></g><g data-mml-node="mo" transform="translate(1458,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(1736,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2236,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2791.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3847.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mi" transform="translate(4347.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(4919.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container>，<br><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="13.393ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5919.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><path data-c="52" d="M130 622Q123 629 119 631T103 634T60 637H27V683H202H236H300Q376 683 417 677T500 648Q595 600 609 517Q610 512 610 501Q610 468 594 439T556 392T511 361T472 343L456 338Q459 335 467 332Q497 316 516 298T545 254T559 211T568 155T578 94Q588 46 602 31T640 16H645Q660 16 674 32T692 87Q692 98 696 101T712 105T728 103T732 90Q732 59 716 27T672 -16Q656 -22 630 -22Q481 -16 458 90Q456 101 456 163T449 246Q430 304 373 320L363 322L297 323H231V192L232 61Q238 51 249 49T301 46H334V0H323Q302 3 181 3Q59 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM491 499V509Q491 527 490 539T481 570T462 601T424 623T362 636Q360 636 340 636T304 637H283Q238 637 234 628Q231 624 231 492V360H289Q390 360 434 378T489 456Q491 467 491 499Z"></path><path data-c="43" d="M56 342Q56 428 89 500T174 615T283 681T391 705Q394 705 400 705T408 704Q499 704 569 636L582 624L612 663Q639 700 643 704Q644 704 647 704T653 705H657Q660 705 666 699V419L660 413H626Q620 419 619 430Q610 512 571 572T476 651Q457 658 426 658Q322 658 252 588Q173 509 173 342Q173 221 211 151Q232 111 263 84T328 45T384 29T428 24Q517 24 571 93T626 244Q626 251 632 257H660L666 251V236Q661 133 590 56T403 -21Q262 -21 159 83T56 342Z" transform="translate(736,0)"></path></g><g data-mml-node="mo" transform="translate(1458,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(1736,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(2236,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2791.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3847.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mi" transform="translate(4347.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(4919.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container>，<br><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="13.393ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5919.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><path data-c="52" d="M130 622Q123 629 119 631T103 634T60 637H27V683H202H236H300Q376 683 417 677T500 648Q595 600 609 517Q610 512 610 501Q610 468 594 439T556 392T511 361T472 343L456 338Q459 335 467 332Q497 316 516 298T545 254T559 211T568 155T578 94Q588 46 602 31T640 16H645Q660 16 674 32T692 87Q692 98 696 101T712 105T728 103T732 90Q732 59 716 27T672 -16Q656 -22 630 -22Q481 -16 458 90Q456 101 456 163T449 246Q430 304 373 320L363 322L297 323H231V192L232 61Q238 51 249 49T301 46H334V0H323Q302 3 181 3Q59 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM491 499V509Q491 527 490 539T481 570T462 601T424 623T362 636Q360 636 340 636T304 637H283Q238 637 234 628Q231 624 231 492V360H289Q390 360 434 378T489 456Q491 467 491 499Z"></path><path data-c="43" d="M56 342Q56 428 89 500T174 615T283 681T391 705Q394 705 400 705T408 704Q499 704 569 636L582 624L612 663Q639 700 643 704Q644 704 647 704T653 705H657Q660 705 666 699V419L660 413H626Q620 419 619 430Q610 512 571 572T476 651Q457 658 426 658Q322 658 252 588Q173 509 173 342Q173 221 211 151Q232 111 263 84T328 45T384 29T428 24Q517 24 571 93T626 244Q626 251 632 257H660L666 251V236Q661 133 590 56T403 -21Q262 -21 159 83T56 342Z" transform="translate(736,0)"></path></g><g data-mml-node="mo" transform="translate(1458,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(1736,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(2236,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2791.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3847.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mi" transform="translate(4347.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(4919.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container>，<br><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="13.393ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5919.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><path data-c="52" d="M130 622Q123 629 119 631T103 634T60 637H27V683H202H236H300Q376 683 417 677T500 648Q595 600 609 517Q610 512 610 501Q610 468 594 439T556 392T511 361T472 343L456 338Q459 335 467 332Q497 316 516 298T545 254T559 211T568 155T578 94Q588 46 602 31T640 16H645Q660 16 674 32T692 87Q692 98 696 101T712 105T728 103T732 90Q732 59 716 27T672 -16Q656 -22 630 -22Q481 -16 458 90Q456 101 456 163T449 246Q430 304 373 320L363 322L297 323H231V192L232 61Q238 51 249 49T301 46H334V0H323Q302 3 181 3Q59 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM491 499V509Q491 527 490 539T481 570T462 601T424 623T362 636Q360 636 340 636T304 637H283Q238 637 234 628Q231 624 231 492V360H289Q390 360 434 378T489 456Q491 467 491 499Z"></path><path data-c="43" d="M56 342Q56 428 89 500T174 615T283 681T391 705Q394 705 400 705T408 704Q499 704 569 636L582 624L612 663Q639 700 643 704Q644 704 647 704T653 705H657Q660 705 666 699V419L660 413H626Q620 419 619 430Q610 512 571 572T476 651Q457 658 426 658Q322 658 252 588Q173 509 173 342Q173 221 211 151Q232 111 263 84T328 45T384 29T428 24Q517 24 571 93T626 244Q626 251 632 257H660L666 251V236Q661 133 590 56T403 -21Q262 -21 159 83T56 342Z" transform="translate(736,0)"></path></g><g data-mml-node="mo" transform="translate(1458,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(1736,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(2236,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2791.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3847.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mi" transform="translate(4347.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(4919.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container>，<br><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="13.393ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5919.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><path data-c="52" d="M130 622Q123 629 119 631T103 634T60 637H27V683H202H236H300Q376 683 417 677T500 648Q595 600 609 517Q610 512 610 501Q610 468 594 439T556 392T511 361T472 343L456 338Q459 335 467 332Q497 316 516 298T545 254T559 211T568 155T578 94Q588 46 602 31T640 16H645Q660 16 674 32T692 87Q692 98 696 101T712 105T728 103T732 90Q732 59 716 27T672 -16Q656 -22 630 -22Q481 -16 458 90Q456 101 456 163T449 246Q430 304 373 320L363 322L297 323H231V192L232 61Q238 51 249 49T301 46H334V0H323Q302 3 181 3Q59 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM491 499V509Q491 527 490 539T481 570T462 601T424 623T362 636Q360 636 340 636T304 637H283Q238 637 234 628Q231 624 231 492V360H289Q390 360 434 378T489 456Q491 467 491 499Z"></path><path data-c="43" d="M56 342Q56 428 89 500T174 615T283 681T391 705Q394 705 400 705T408 704Q499 704 569 636L582 624L612 663Q639 700 643 704Q644 704 647 704T653 705H657Q660 705 666 699V419L660 413H626Q620 419 619 430Q610 512 571 572T476 651Q457 658 426 658Q322 658 252 588Q173 509 173 342Q173 221 211 151Q232 111 263 84T328 45T384 29T428 24Q517 24 571 93T626 244Q626 251 632 257H660L666 251V236Q661 133 590 56T403 -21Q262 -21 159 83T56 342Z" transform="translate(736,0)"></path></g><g data-mml-node="mo" transform="translate(1458,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(1736,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g><g data-mml-node="mo" transform="translate(2236,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2791.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3847.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mi" transform="translate(4347.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(4919.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container>，<br><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="13.393ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5919.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><path data-c="52" d="M130 622Q123 629 119 631T103 634T60 637H27V683H202H236H300Q376 683 417 677T500 648Q595 600 609 517Q610 512 610 501Q610 468 594 439T556 392T511 361T472 343L456 338Q459 335 467 332Q497 316 516 298T545 254T559 211T568 155T578 94Q588 46 602 31T640 16H645Q660 16 674 32T692 87Q692 98 696 101T712 105T728 103T732 90Q732 59 716 27T672 -16Q656 -22 630 -22Q481 -16 458 90Q456 101 456 163T449 246Q430 304 373 320L363 322L297 323H231V192L232 61Q238 51 249 49T301 46H334V0H323Q302 3 181 3Q59 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM491 499V509Q491 527 490 539T481 570T462 601T424 623T362 636Q360 636 340 636T304 637H283Q238 637 234 628Q231 624 231 492V360H289Q390 360 434 378T489 456Q491 467 491 499Z"></path><path data-c="43" d="M56 342Q56 428 89 500T174 615T283 681T391 705Q394 705 400 705T408 704Q499 704 569 636L582 624L612 663Q639 700 643 704Q644 704 647 704T653 705H657Q660 705 666 699V419L660 413H626Q620 419 619 430Q610 512 571 572T476 651Q457 658 426 658Q322 658 252 588Q173 509 173 342Q173 221 211 151Q232 111 263 84T328 45T384 29T428 24Q517 24 571 93T626 244Q626 251 632 257H660L666 251V236Q661 133 590 56T403 -21Q262 -21 159 83T56 342Z" transform="translate(736,0)"></path></g><g data-mml-node="mo" transform="translate(1458,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(1736,0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g><g data-mml-node="mo" transform="translate(2236,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2791.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3847.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mi" transform="translate(4347.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(4919.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container>，<br><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="13.393ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5919.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><path data-c="52" d="M130 622Q123 629 119 631T103 634T60 637H27V683H202H236H300Q376 683 417 677T500 648Q595 600 609 517Q610 512 610 501Q610 468 594 439T556 392T511 361T472 343L456 338Q459 335 467 332Q497 316 516 298T545 254T559 211T568 155T578 94Q588 46 602 31T640 16H645Q660 16 674 32T692 87Q692 98 696 101T712 105T728 103T732 90Q732 59 716 27T672 -16Q656 -22 630 -22Q481 -16 458 90Q456 101 456 163T449 246Q430 304 373 320L363 322L297 323H231V192L232 61Q238 51 249 49T301 46H334V0H323Q302 3 181 3Q59 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM491 499V509Q491 527 490 539T481 570T462 601T424 623T362 636Q360 636 340 636T304 637H283Q238 637 234 628Q231 624 231 492V360H289Q390 360 434 378T489 456Q491 467 491 499Z"></path><path data-c="43" d="M56 342Q56 428 89 500T174 615T283 681T391 705Q394 705 400 705T408 704Q499 704 569 636L582 624L612 663Q639 700 643 704Q644 704 647 704T653 705H657Q660 705 666 699V419L660 413H626Q620 419 619 430Q610 512 571 572T476 651Q457 658 426 658Q322 658 252 588Q173 509 173 342Q173 221 211 151Q232 111 263 84T328 45T384 29T428 24Q517 24 571 93T626 244Q626 251 632 257H660L666 251V236Q661 133 590 56T403 -21Q262 -21 159 83T56 342Z" transform="translate(736,0)"></path></g><g data-mml-node="mo" transform="translate(1458,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(1736,0)"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path></g><g data-mml-node="mo" transform="translate(2236,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2791.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3847.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mi" transform="translate(4347.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(4919.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container>，<br><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="13.393ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5919.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><path data-c="52" d="M130 622Q123 629 119 631T103 634T60 637H27V683H202H236H300Q376 683 417 677T500 648Q595 600 609 517Q610 512 610 501Q610 468 594 439T556 392T511 361T472 343L456 338Q459 335 467 332Q497 316 516 298T545 254T559 211T568 155T578 94Q588 46 602 31T640 16H645Q660 16 674 32T692 87Q692 98 696 101T712 105T728 103T732 90Q732 59 716 27T672 -16Q656 -22 630 -22Q481 -16 458 90Q456 101 456 163T449 246Q430 304 373 320L363 322L297 323H231V192L232 61Q238 51 249 49T301 46H334V0H323Q302 3 181 3Q59 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM491 499V509Q491 527 490 539T481 570T462 601T424 623T362 636Q360 636 340 636T304 637H283Q238 637 234 628Q231 624 231 492V360H289Q390 360 434 378T489 456Q491 467 491 499Z"></path><path data-c="43" d="M56 342Q56 428 89 500T174 615T283 681T391 705Q394 705 400 705T408 704Q499 704 569 636L582 624L612 663Q639 700 643 704Q644 704 647 704T653 705H657Q660 705 666 699V419L660 413H626Q620 419 619 430Q610 512 571 572T476 651Q457 658 426 658Q322 658 252 588Q173 509 173 342Q173 221 211 151Q232 111 263 84T328 45T384 29T428 24Q517 24 571 93T626 244Q626 251 632 257H660L666 251V236Q661 133 590 56T403 -21Q262 -21 159 83T56 342Z" transform="translate(736,0)"></path></g><g data-mml-node="mo" transform="translate(1458,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(1736,0)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g><g data-mml-node="mo" transform="translate(2236,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2791.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3847.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mi" transform="translate(4347.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(4919.6,0)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container>，<br><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="13.979ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6178.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><path data-c="52" d="M130 622Q123 629 119 631T103 634T60 637H27V683H202H236H300Q376 683 417 677T500 648Q595 600 609 517Q610 512 610 501Q610 468 594 439T556 392T511 361T472 343L456 338Q459 335 467 332Q497 316 516 298T545 254T559 211T568 155T578 94Q588 46 602 31T640 16H645Q660 16 674 32T692 87Q692 98 696 101T712 105T728 103T732 90Q732 59 716 27T672 -16Q656 -22 630 -22Q481 -16 458 90Q456 101 456 163T449 246Q430 304 373 320L363 322L297 323H231V192L232 61Q238 51 249 49T301 46H334V0H323Q302 3 181 3Q59 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM491 499V509Q491 527 490 539T481 570T462 601T424 623T362 636Q360 636 340 636T304 637H283Q238 637 234 628Q231 624 231 492V360H289Q390 360 434 378T489 456Q491 467 491 499Z"></path><path data-c="43" d="M56 342Q56 428 89 500T174 615T283 681T391 705Q394 705 400 705T408 704Q499 704 569 636L582 624L612 663Q639 700 643 704Q644 704 647 704T653 705H657Q660 705 666 699V419L660 413H626Q620 419 619 430Q610 512 571 572T476 651Q457 658 426 658Q322 658 252 588Q173 509 173 342Q173 221 211 151Q232 111 263 84T328 45T384 29T428 24Q517 24 571 93T626 244Q626 251 632 257H660L666 251V236Q661 133 590 56T403 -21Q262 -21 159 83T56 342Z" transform="translate(736,0)"></path></g><g data-mml-node="mo" transform="translate(1458,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(1736,0)"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path></g><g data-mml-node="mo" transform="translate(2236,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2791.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3847.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mi" transform="translate(4347.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(4919.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(5419.6,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g></g></g></svg></mjx-container>，<br><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="14.524ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6419.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><path data-c="52" d="M130 622Q123 629 119 631T103 634T60 637H27V683H202H236H300Q376 683 417 677T500 648Q595 600 609 517Q610 512 610 501Q610 468 594 439T556 392T511 361T472 343L456 338Q459 335 467 332Q497 316 516 298T545 254T559 211T568 155T578 94Q588 46 602 31T640 16H645Q660 16 674 32T692 87Q692 98 696 101T712 105T728 103T732 90Q732 59 716 27T672 -16Q656 -22 630 -22Q481 -16 458 90Q456 101 456 163T449 246Q430 304 373 320L363 322L297 323H231V192L232 61Q238 51 249 49T301 46H334V0H323Q302 3 181 3Q59 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM491 499V509Q491 527 490 539T481 570T462 601T424 623T362 636Q360 636 340 636T304 637H283Q238 637 234 628Q231 624 231 492V360H289Q390 360 434 378T489 456Q491 467 491 499Z"></path><path data-c="43" d="M56 342Q56 428 89 500T174 615T283 681T391 705Q394 705 400 705T408 704Q499 704 569 636L582 624L612 663Q639 700 643 704Q644 704 647 704T653 705H657Q660 705 666 699V419L660 413H626Q620 419 619 430Q610 512 571 572T476 651Q457 658 426 658Q322 658 252 588Q173 509 173 342Q173 221 211 151Q232 111 263 84T328 45T384 29T428 24Q517 24 571 93T626 244Q626 251 632 257H660L666 251V236Q661 133 590 56T403 -21Q262 -21 159 83T56 342Z" transform="translate(736,0)"></path></g><g data-mml-node="mo" transform="translate(1458,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(1736,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(2736,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(3291.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(4347.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mi" transform="translate(4847.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(5419.6,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container></p><h3 id="最终结果"><a href="#最终结果" class="headerlink" title="最终结果"></a>最终结果</h3><p><img data-src="/images/aes/密钥最终结果.png" alt="密钥最终结果"></p><h1 id="解密方式"><a href="#解密方式" class="headerlink" title="解密方式"></a>解密方式</h1><p>就是把上述过程反过来一遍（解密的第一轮没有列混合逆向）</p><p><img data-src="/images/aes/加解密.png" alt="加解密"></p><p>其中的轮密钥加只需要每轮相同状态的W[i,i+3]就可以</p><h2 id="逆列混淆"><a href="#逆列混淆" class="headerlink" title="逆列混淆"></a>逆列混淆</h2><p><img data-src="/images/aes/逆列混淆.png" alt="逆列混淆"></p><h2 id="逆行移位："><a href="#逆行移位：" class="headerlink" title="逆行移位："></a>逆行移位：</h2><p>就是逆向移位就可以，很简单</p><h2 id="逆s表"><a href="#逆s表" class="headerlink" title="逆s表"></a>逆s表</h2><p><img data-src="/images/aes/逆s表.png" alt="逆s表"></p><p>查表即可</p><h1 id="逆向题型："><a href="#逆向题型：" class="headerlink" title="逆向题型："></a>逆向题型：</h1><h2 id="普通AES"><a href="#普通AES" class="headerlink" title="普通AES"></a>普通AES</h2><p>找到密钥，找到密文，逆向脚本，进行解密。</p><p>加解密脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br></pre></td><td class="code"><pre><span class="line">s_box = (</span><br><span class="line">    <span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x77</span>, <span class="number">0x7B</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>,</span><br><span class="line">    <span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, <span class="number">0x72</span>, <span class="number">0xC0</span>,</span><br><span class="line">    <span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>, <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>,</span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0xC7</span>, <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>,</span><br><span class="line">    <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>, <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>, <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>,</span><br><span class="line">    <span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xA8</span>,</span><br><span class="line">    <span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>, <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>,</span><br><span class="line">    <span class="number">0xCD</span>, <span class="number">0x0C</span>, <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>, <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>,</span><br><span class="line">    <span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD3</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>,</span><br><span class="line">    <span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>, <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>, <span class="number">0xAE</span>, <span class="number">0x08</span>,</span><br><span class="line">    <span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>, <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>,</span><br><span class="line">    <span class="number">0x70</span>, <span class="number">0x3E</span>, <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>, <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>,</span><br><span class="line">    <span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>, <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>,</span><br><span class="line">    <span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2D</span>, <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># inv_s_box = tuple([s_box.index(i) for i in range(256)])</span></span><br><span class="line">inv_s_box = (</span><br><span class="line">    <span class="number">0x52</span>, <span class="number">0x09</span>, <span class="number">0x6A</span>, <span class="number">0xD5</span>, <span class="number">0x30</span>, <span class="number">0x36</span>, <span class="number">0xA5</span>, <span class="number">0x38</span>, <span class="number">0xBF</span>, <span class="number">0x40</span>, <span class="number">0xA3</span>, <span class="number">0x9E</span>, <span class="number">0x81</span>, <span class="number">0xF3</span>, <span class="number">0xD7</span>, <span class="number">0xFB</span>,</span><br><span class="line">    <span class="number">0x7C</span>, <span class="number">0xE3</span>, <span class="number">0x39</span>, <span class="number">0x82</span>, <span class="number">0x9B</span>, <span class="number">0x2F</span>, <span class="number">0xFF</span>, <span class="number">0x87</span>, <span class="number">0x34</span>, <span class="number">0x8E</span>, <span class="number">0x43</span>, <span class="number">0x44</span>, <span class="number">0xC4</span>, <span class="number">0xDE</span>, <span class="number">0xE9</span>, <span class="number">0xCB</span>,</span><br><span class="line">    <span class="number">0x54</span>, <span class="number">0x7B</span>, <span class="number">0x94</span>, <span class="number">0x32</span>, <span class="number">0xA6</span>, <span class="number">0xC2</span>, <span class="number">0x23</span>, <span class="number">0x3D</span>, <span class="number">0xEE</span>, <span class="number">0x4C</span>, <span class="number">0x95</span>, <span class="number">0x0B</span>, <span class="number">0x42</span>, <span class="number">0xFA</span>, <span class="number">0xC3</span>, <span class="number">0x4E</span>,</span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0x2E</span>, <span class="number">0xA1</span>, <span class="number">0x66</span>, <span class="number">0x28</span>, <span class="number">0xD9</span>, <span class="number">0x24</span>, <span class="number">0xB2</span>, <span class="number">0x76</span>, <span class="number">0x5B</span>, <span class="number">0xA2</span>, <span class="number">0x49</span>, <span class="number">0x6D</span>, <span class="number">0x8B</span>, <span class="number">0xD1</span>, <span class="number">0x25</span>,</span><br><span class="line">    <span class="number">0x72</span>, <span class="number">0xF8</span>, <span class="number">0xF6</span>, <span class="number">0x64</span>, <span class="number">0x86</span>, <span class="number">0x68</span>, <span class="number">0x98</span>, <span class="number">0x16</span>, <span class="number">0xD4</span>, <span class="number">0xA4</span>, <span class="number">0x5C</span>, <span class="number">0xCC</span>, <span class="number">0x5D</span>, <span class="number">0x65</span>, <span class="number">0xB6</span>, <span class="number">0x92</span>,</span><br><span class="line">    <span class="number">0x6C</span>, <span class="number">0x70</span>, <span class="number">0x48</span>, <span class="number">0x50</span>, <span class="number">0xFD</span>, <span class="number">0xED</span>, <span class="number">0xB9</span>, <span class="number">0xDA</span>, <span class="number">0x5E</span>, <span class="number">0x15</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0xA7</span>, <span class="number">0x8D</span>, <span class="number">0x9D</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x90</span>, <span class="number">0xD8</span>, <span class="number">0xAB</span>, <span class="number">0x00</span>, <span class="number">0x8C</span>, <span class="number">0xBC</span>, <span class="number">0xD3</span>, <span class="number">0x0A</span>, <span class="number">0xF7</span>, <span class="number">0xE4</span>, <span class="number">0x58</span>, <span class="number">0x05</span>, <span class="number">0xB8</span>, <span class="number">0xB3</span>, <span class="number">0x45</span>, <span class="number">0x06</span>,</span><br><span class="line">    <span class="number">0xD0</span>, <span class="number">0x2C</span>, <span class="number">0x1E</span>, <span class="number">0x8F</span>, <span class="number">0xCA</span>, <span class="number">0x3F</span>, <span class="number">0x0F</span>, <span class="number">0x02</span>, <span class="number">0xC1</span>, <span class="number">0xAF</span>, <span class="number">0xBD</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x13</span>, <span class="number">0x8A</span>, <span class="number">0x6B</span>,</span><br><span class="line">    <span class="number">0x3A</span>, <span class="number">0x91</span>, <span class="number">0x11</span>, <span class="number">0x41</span>, <span class="number">0x4F</span>, <span class="number">0x67</span>, <span class="number">0xDC</span>, <span class="number">0xEA</span>, <span class="number">0x97</span>, <span class="number">0xF2</span>, <span class="number">0xCF</span>, <span class="number">0xCE</span>, <span class="number">0xF0</span>, <span class="number">0xB4</span>, <span class="number">0xE6</span>, <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x96</span>, <span class="number">0xAC</span>, <span class="number">0x74</span>, <span class="number">0x22</span>, <span class="number">0xE7</span>, <span class="number">0xAD</span>, <span class="number">0x35</span>, <span class="number">0x85</span>, <span class="number">0xE2</span>, <span class="number">0xF9</span>, <span class="number">0x37</span>, <span class="number">0xE8</span>, <span class="number">0x1C</span>, <span class="number">0x75</span>, <span class="number">0xDF</span>, <span class="number">0x6E</span>,</span><br><span class="line">    <span class="number">0x47</span>, <span class="number">0xF1</span>, <span class="number">0x1A</span>, <span class="number">0x71</span>, <span class="number">0x1D</span>, <span class="number">0x29</span>, <span class="number">0xC5</span>, <span class="number">0x89</span>, <span class="number">0x6F</span>, <span class="number">0xB7</span>, <span class="number">0x62</span>, <span class="number">0x0E</span>, <span class="number">0xAA</span>, <span class="number">0x18</span>, <span class="number">0xBE</span>, <span class="number">0x1B</span>,</span><br><span class="line">    <span class="number">0xFC</span>, <span class="number">0x56</span>, <span class="number">0x3E</span>, <span class="number">0x4B</span>, <span class="number">0xC6</span>, <span class="number">0xD2</span>, <span class="number">0x79</span>, <span class="number">0x20</span>, <span class="number">0x9A</span>, <span class="number">0xDB</span>, <span class="number">0xC0</span>, <span class="number">0xFE</span>, <span class="number">0x78</span>, <span class="number">0xCD</span>, <span class="number">0x5A</span>, <span class="number">0xF4</span>,</span><br><span class="line">    <span class="number">0x1F</span>, <span class="number">0xDD</span>, <span class="number">0xA8</span>, <span class="number">0x33</span>, <span class="number">0x88</span>, <span class="number">0x07</span>, <span class="number">0xC7</span>, <span class="number">0x31</span>, <span class="number">0xB1</span>, <span class="number">0x12</span>, <span class="number">0x10</span>, <span class="number">0x59</span>, <span class="number">0x27</span>, <span class="number">0x80</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>,</span><br><span class="line">    <span class="number">0x60</span>, <span class="number">0x51</span>, <span class="number">0x7F</span>, <span class="number">0xA9</span>, <span class="number">0x19</span>, <span class="number">0xB5</span>, <span class="number">0x4A</span>, <span class="number">0x0D</span>, <span class="number">0x2D</span>, <span class="number">0xE5</span>, <span class="number">0x7A</span>, <span class="number">0x9F</span>, <span class="number">0x93</span>, <span class="number">0xC9</span>, <span class="number">0x9C</span>, <span class="number">0xEF</span>,</span><br><span class="line">    <span class="number">0xA0</span>, <span class="number">0xE0</span>, <span class="number">0x3B</span>, <span class="number">0x4D</span>, <span class="number">0xAE</span>, <span class="number">0x2A</span>, <span class="number">0xF5</span>, <span class="number">0xB0</span>, <span class="number">0xC8</span>, <span class="number">0xEB</span>, <span class="number">0xBB</span>, <span class="number">0x3C</span>, <span class="number">0x83</span>, <span class="number">0x53</span>, <span class="number">0x99</span>, <span class="number">0x61</span>,</span><br><span class="line">    <span class="number">0x17</span>, <span class="number">0x2B</span>, <span class="number">0x04</span>, <span class="number">0x7E</span>, <span class="number">0xBA</span>, <span class="number">0x77</span>, <span class="number">0xD6</span>, <span class="number">0x26</span>, <span class="number">0xE1</span>, <span class="number">0x69</span>, <span class="number">0x14</span>, <span class="number">0x63</span>, <span class="number">0x55</span>, <span class="number">0x21</span>, <span class="number">0x0C</span>, <span class="number">0x7D</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub_bytes</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            s[i][j] = s_box[s[i][j]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inv_sub_bytes</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            s[i][j] = inv_s_box[s[i][j]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shift_rows</span>(<span class="params">s</span>):</span><br><span class="line">    s[<span class="number">0</span>][<span class="number">1</span>], s[<span class="number">1</span>][<span class="number">1</span>], s[<span class="number">2</span>][<span class="number">1</span>], s[<span class="number">3</span>][<span class="number">1</span>] = s[<span class="number">1</span>][<span class="number">1</span>], s[<span class="number">2</span>][<span class="number">1</span>], s[<span class="number">3</span>][<span class="number">1</span>], s[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">    s[<span class="number">0</span>][<span class="number">2</span>], s[<span class="number">1</span>][<span class="number">2</span>], s[<span class="number">2</span>][<span class="number">2</span>], s[<span class="number">3</span>][<span class="number">2</span>] = s[<span class="number">2</span>][<span class="number">2</span>], s[<span class="number">3</span>][<span class="number">2</span>], s[<span class="number">0</span>][<span class="number">2</span>], s[<span class="number">1</span>][<span class="number">2</span>]</span><br><span class="line">    s[<span class="number">0</span>][<span class="number">3</span>], s[<span class="number">1</span>][<span class="number">3</span>], s[<span class="number">2</span>][<span class="number">3</span>], s[<span class="number">3</span>][<span class="number">3</span>] = s[<span class="number">3</span>][<span class="number">3</span>], s[<span class="number">0</span>][<span class="number">3</span>], s[<span class="number">1</span>][<span class="number">3</span>], s[<span class="number">2</span>][<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inv_shift_rows</span>(<span class="params">s</span>):</span><br><span class="line">    s[<span class="number">0</span>][<span class="number">1</span>], s[<span class="number">1</span>][<span class="number">1</span>], s[<span class="number">2</span>][<span class="number">1</span>], s[<span class="number">3</span>][<span class="number">1</span>] = s[<span class="number">3</span>][<span class="number">1</span>], s[<span class="number">0</span>][<span class="number">1</span>], s[<span class="number">1</span>][<span class="number">1</span>], s[<span class="number">2</span>][<span class="number">1</span>]</span><br><span class="line">    s[<span class="number">0</span>][<span class="number">2</span>], s[<span class="number">1</span>][<span class="number">2</span>], s[<span class="number">2</span>][<span class="number">2</span>], s[<span class="number">3</span>][<span class="number">2</span>] = s[<span class="number">2</span>][<span class="number">2</span>], s[<span class="number">3</span>][<span class="number">2</span>], s[<span class="number">0</span>][<span class="number">2</span>], s[<span class="number">1</span>][<span class="number">2</span>]</span><br><span class="line">    s[<span class="number">0</span>][<span class="number">3</span>], s[<span class="number">1</span>][<span class="number">3</span>], s[<span class="number">2</span>][<span class="number">3</span>], s[<span class="number">3</span>][<span class="number">3</span>] = s[<span class="number">1</span>][<span class="number">3</span>], s[<span class="number">2</span>][<span class="number">3</span>], s[<span class="number">3</span>][<span class="number">3</span>], s[<span class="number">0</span>][<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_round_key</span>(<span class="params">s, k</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            s[i][j] ^= k[i][j]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># learned from https://web.archive.org/web/20100626212235/http://cs.ucsb.edu/~koc/cs178/projects/JT/aes.c</span></span><br><span class="line">xtime = <span class="keyword">lambda</span> a: (((a &lt;&lt; <span class="number">1</span>) ^ <span class="number">0x1B</span>) &amp; <span class="number">0xFF</span>) <span class="keyword">if</span> (a &amp; <span class="number">0x80</span>) <span class="keyword">else</span> (a &lt;&lt; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mix_single_column</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="comment"># see Sec 4.1.2 in The Design of Rijndael</span></span><br><span class="line">    t = a[<span class="number">0</span>] ^ a[<span class="number">1</span>] ^ a[<span class="number">2</span>] ^ a[<span class="number">3</span>]</span><br><span class="line">    u = a[<span class="number">0</span>]</span><br><span class="line">    a[<span class="number">0</span>] ^= t ^ xtime(a[<span class="number">0</span>] ^ a[<span class="number">1</span>])</span><br><span class="line">    a[<span class="number">1</span>] ^= t ^ xtime(a[<span class="number">1</span>] ^ a[<span class="number">2</span>])</span><br><span class="line">    a[<span class="number">2</span>] ^= t ^ xtime(a[<span class="number">2</span>] ^ a[<span class="number">3</span>])</span><br><span class="line">    a[<span class="number">3</span>] ^= t ^ xtime(a[<span class="number">3</span>] ^ u)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mix_columns</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        mix_single_column(s[i])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inv_mix_columns</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="comment"># see Sec 4.1.3 in The Design of Rijndael</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        u = xtime(xtime(s[i][<span class="number">0</span>] ^ s[i][<span class="number">2</span>]))</span><br><span class="line">        v = xtime(xtime(s[i][<span class="number">1</span>] ^ s[i][<span class="number">3</span>]))</span><br><span class="line">        s[i][<span class="number">0</span>] ^= u</span><br><span class="line">        s[i][<span class="number">1</span>] ^= v</span><br><span class="line">        s[i][<span class="number">2</span>] ^= u</span><br><span class="line">        s[i][<span class="number">3</span>] ^= v</span><br><span class="line"></span><br><span class="line">    mix_columns(s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r_con = (</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x40</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x1B</span>, <span class="number">0x36</span>, <span class="number">0x6C</span>, <span class="number">0xD8</span>, <span class="number">0xAB</span>, <span class="number">0x4D</span>, <span class="number">0x9A</span>,</span><br><span class="line">    <span class="number">0x2F</span>, <span class="number">0x5E</span>, <span class="number">0xBC</span>, <span class="number">0x63</span>, <span class="number">0xC6</span>, <span class="number">0x97</span>, <span class="number">0x35</span>, <span class="number">0x6A</span>,</span><br><span class="line">    <span class="number">0xD4</span>, <span class="number">0xB3</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0xEF</span>, <span class="number">0xC5</span>, <span class="number">0x91</span>, <span class="number">0x39</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bytes2matrix</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="string">""" Converts a 16-byte array into a 4x4 matrix.  """</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">list</span>(text[i:i+<span class="number">4</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(text), <span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matrix2bytes</span>(<span class="params">matrix</span>):</span><br><span class="line">    <span class="string">""" Converts a 4x4 matrix into a 16-byte array.  """</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(<span class="built_in">sum</span>(matrix, []))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor_bytes</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="string">""" Returns a new byte array with the elements xor'ed. """</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(i^j <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">zip</span>(a, b))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inc_bytes</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="string">""" Returns a new byte array with the value increment by 1 """</span></span><br><span class="line">    out = <span class="built_in">list</span>(a)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(out))):</span><br><span class="line">        <span class="keyword">if</span> out[i] == <span class="number">0xFF</span>:</span><br><span class="line">            out[i] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            out[i] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(out)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">plaintext</span>):</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Pads the given plaintext with PKCS#7 padding to a multiple of 16 bytes.</span></span><br><span class="line"><span class="string">    Note that if the plaintext size is a multiple of 16,</span></span><br><span class="line"><span class="string">    a whole block will be added.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    padding_len = <span class="number">16</span> - (<span class="built_in">len</span>(plaintext) % <span class="number">16</span>)</span><br><span class="line">    padding = <span class="built_in">bytes</span>([padding_len] * padding_len)</span><br><span class="line">    <span class="keyword">return</span> plaintext + padding</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unpad</span>(<span class="params">plaintext</span>):</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Removes a PKCS#7 padding, returning the unpadded text and ensuring the</span></span><br><span class="line"><span class="string">    padding was correct.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    padding_len = plaintext[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">assert</span> padding_len &gt; <span class="number">0</span></span><br><span class="line">    message, padding = plaintext[:-padding_len], plaintext[-padding_len:]</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">all</span>(p == padding_len <span class="keyword">for</span> p <span class="keyword">in</span> padding)</span><br><span class="line">    <span class="keyword">return</span> message</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">split_blocks</span>(<span class="params">message, block_size=<span class="number">16</span>, require_padding=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(message) % block_size == <span class="number">0</span> <span class="keyword">or</span> <span class="keyword">not</span> require_padding</span><br><span class="line">        <span class="keyword">return</span> [message[i:i+<span class="number">16</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(message), block_size)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AES</span>:</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Class for AES-128 encryption with CBC mode and PKCS#7.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This is a raw implementation of AES, without key stretching or IV</span></span><br><span class="line"><span class="string">    management. Unless you need that, please use `encrypt` and `decrypt`.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    rounds_by_key_size = {<span class="number">16</span>: <span class="number">10</span>, <span class="number">24</span>: <span class="number">12</span>, <span class="number">32</span>: <span class="number">14</span>}</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master_key</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Initializes the object with a given key.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(master_key) <span class="keyword">in</span> AES.rounds_by_key_size</span><br><span class="line">        <span class="variable language_">self</span>.n_rounds = AES.rounds_by_key_size[<span class="built_in">len</span>(master_key)]</span><br><span class="line">        <span class="variable language_">self</span>._key_matrices = <span class="variable language_">self</span>._expand_key(master_key)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_expand_key</span>(<span class="params">self, master_key</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Expands and returns a list of key matrices for the given master_key.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># Initialize round keys with raw key material.</span></span><br><span class="line">        key_columns = bytes2matrix(master_key)</span><br><span class="line">        iteration_size = <span class="built_in">len</span>(master_key) // <span class="number">4</span></span><br><span class="line"></span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">        <span class="comment"># expand round: (rounds+1)*4</span></span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(key_columns) &lt; (<span class="variable language_">self</span>.n_rounds + <span class="number">1</span>) * <span class="number">4</span>:</span><br><span class="line">            <span class="comment"># Copy previous word.</span></span><br><span class="line">            word = <span class="built_in">list</span>(key_columns[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Perform schedule_core once every "row".</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(key_columns) % iteration_size == <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># Circular shift.</span></span><br><span class="line">                word.append(word.pop(<span class="number">0</span>))</span><br><span class="line">                <span class="comment"># Map to S-BOX.</span></span><br><span class="line">                word = [s_box[b] <span class="keyword">for</span> b <span class="keyword">in</span> word]</span><br><span class="line">                <span class="comment"># XOR with first byte of R-CON, since the others bytes of R-CON are 0.</span></span><br><span class="line">                word[<span class="number">0</span>] ^= r_con[i]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">len</span>(master_key) == <span class="number">32</span> <span class="keyword">and</span> <span class="built_in">len</span>(key_columns) % iteration_size == <span class="number">4</span>:</span><br><span class="line">                <span class="comment"># Run word through S-box in the fourth iteration when using a</span></span><br><span class="line">                <span class="comment"># 256-bit key.</span></span><br><span class="line">                word = [s_box[b] <span class="keyword">for</span> b <span class="keyword">in</span> word]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># XOR with equivalent word from previous iteration.</span></span><br><span class="line">            word = xor_bytes(word, key_columns[-iteration_size])</span><br><span class="line">            key_columns.append(<span class="built_in">list</span>(word))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Group key words in 4x4 byte matrices.</span></span><br><span class="line">        <span class="keyword">return</span> [key_columns[<span class="number">4</span>*i : <span class="number">4</span>*(i+<span class="number">1</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key_columns) // <span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt_ecb</span>(<span class="params">self, ciphertext</span>):</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(ciphertext) &gt;= <span class="number">16</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(ciphertext) % <span class="number">16</span> == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        result = <span class="string">b''</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(ciphertext), <span class="number">16</span>):</span><br><span class="line">            result += <span class="variable language_">self</span>.encrypt_ecb_block(ciphertext[i:i+<span class="number">16</span>])</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt_ecb_block</span>(<span class="params">self, plaintext</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Encrypts a single block of 16 byte long plaintext.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(plaintext) == <span class="number">16</span></span><br><span class="line"></span><br><span class="line">        plain_state = bytes2matrix(plaintext)</span><br><span class="line"></span><br><span class="line">        add_round_key(plain_state, <span class="variable language_">self</span>._key_matrices[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="variable language_">self</span>.n_rounds):</span><br><span class="line">            sub_bytes(plain_state)</span><br><span class="line">            shift_rows(plain_state)</span><br><span class="line">            mix_columns(plain_state)</span><br><span class="line">            add_round_key(plain_state, <span class="variable language_">self</span>._key_matrices[i])</span><br><span class="line"></span><br><span class="line">        sub_bytes(plain_state)</span><br><span class="line">        shift_rows(plain_state)</span><br><span class="line">        add_round_key(plain_state, <span class="variable language_">self</span>._key_matrices[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> matrix2bytes(plain_state)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt_ecb</span>(<span class="params">self, ciphertext</span>):</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(ciphertext) &gt;= <span class="number">16</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(ciphertext) % <span class="number">16</span> == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        result = <span class="string">b''</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(ciphertext), <span class="number">16</span>):</span><br><span class="line">            result += <span class="variable language_">self</span>.decrypt_ecb_block(ciphertext[i:i+<span class="number">16</span>])</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt_ecb_block</span>(<span class="params">self, ciphertext</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Decrypts a single block of 16 byte long ciphertext.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(ciphertext) == <span class="number">16</span></span><br><span class="line"></span><br><span class="line">        cipher_state = bytes2matrix(ciphertext)</span><br><span class="line"></span><br><span class="line">        add_round_key(cipher_state, <span class="variable language_">self</span>._key_matrices[-<span class="number">1</span>])</span><br><span class="line">        inv_shift_rows(cipher_state)</span><br><span class="line">        inv_sub_bytes(cipher_state)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>.n_rounds - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            add_round_key(cipher_state, <span class="variable language_">self</span>._key_matrices[i])</span><br><span class="line">            inv_mix_columns(cipher_state)</span><br><span class="line">            inv_shift_rows(cipher_state)</span><br><span class="line">            inv_sub_bytes(cipher_state)</span><br><span class="line"></span><br><span class="line">        add_round_key(cipher_state, <span class="variable language_">self</span>._key_matrices[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> matrix2bytes(cipher_state)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt_cbc</span>(<span class="params">self, plaintext, iv</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Encrypts `plaintext` using CBC mode and PKCS#7 padding, with the given</span></span><br><span class="line"><span class="string">        initialization vector (iv).</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(iv) == <span class="number">16</span></span><br><span class="line"></span><br><span class="line">        plaintext = pad(plaintext)</span><br><span class="line"></span><br><span class="line">        blocks = []</span><br><span class="line">        previous = iv</span><br><span class="line">        <span class="keyword">for</span> plaintext_block <span class="keyword">in</span> split_blocks(plaintext):</span><br><span class="line">            <span class="comment"># CBC mode encrypt: encrypt(plaintext_block XOR previous)</span></span><br><span class="line">            block = <span class="variable language_">self</span>.encrypt_ecb_block(xor_bytes(plaintext_block, previous))</span><br><span class="line">            blocks.append(block)</span><br><span class="line">            previous = block</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">b''</span>.join(blocks)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt_cbc</span>(<span class="params">self, ciphertext, iv</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Decrypts `ciphertext` using CBC mode and PKCS#7 padding, with the given</span></span><br><span class="line"><span class="string">        initialization vector (iv).</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(iv) == <span class="number">16</span></span><br><span class="line"></span><br><span class="line">        blocks = []</span><br><span class="line">        previous = iv</span><br><span class="line">        <span class="keyword">for</span> ciphertext_block <span class="keyword">in</span> split_blocks(ciphertext):</span><br><span class="line">            <span class="comment"># CBC mode decrypt: previous XOR decrypt(ciphertext)</span></span><br><span class="line">            blocks.append(xor_bytes(previous, <span class="variable language_">self</span>.decrypt_ecb_block(ciphertext_block)))</span><br><span class="line">            previous = ciphertext_block</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> unpad(<span class="string">b''</span>.join(blocks))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt_pcbc</span>(<span class="params">self, plaintext, iv</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Encrypts `plaintext` using PCBC mode and PKCS#7 padding, with the given</span></span><br><span class="line"><span class="string">        initialization vector (iv).</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(iv) == <span class="number">16</span></span><br><span class="line"></span><br><span class="line">        plaintext = pad(plaintext)</span><br><span class="line"></span><br><span class="line">        blocks = []</span><br><span class="line">        prev_ciphertext = iv</span><br><span class="line">        prev_plaintext = <span class="built_in">bytes</span>(<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">for</span> plaintext_block <span class="keyword">in</span> split_blocks(plaintext):</span><br><span class="line">            <span class="comment"># PCBC mode encrypt: encrypt(plaintext_block XOR (prev_ciphertext XOR prev_plaintext))</span></span><br><span class="line">            ciphertext_block = <span class="variable language_">self</span>.encrypt_ecb_block(xor_bytes(plaintext_block, xor_bytes(prev_ciphertext, prev_plaintext)))</span><br><span class="line">            blocks.append(ciphertext_block)</span><br><span class="line">            prev_ciphertext = ciphertext_block</span><br><span class="line">            prev_plaintext = plaintext_block</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">b''</span>.join(blocks)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt_pcbc</span>(<span class="params">self, ciphertext, iv</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Decrypts `ciphertext` using PCBC mode and PKCS#7 padding, with the given</span></span><br><span class="line"><span class="string">        initialization vector (iv).</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(iv) == <span class="number">16</span></span><br><span class="line"></span><br><span class="line">        blocks = []</span><br><span class="line">        prev_ciphertext = iv</span><br><span class="line">        prev_plaintext = <span class="built_in">bytes</span>(<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">for</span> ciphertext_block <span class="keyword">in</span> split_blocks(ciphertext):</span><br><span class="line">            <span class="comment"># PCBC mode decrypt: (prev_plaintext XOR prev_ciphertext) XOR decrypt(ciphertext_block)</span></span><br><span class="line">            plaintext_block = xor_bytes(xor_bytes(prev_ciphertext, prev_plaintext), <span class="variable language_">self</span>.decrypt_ecb_block(ciphertext_block))</span><br><span class="line">            blocks.append(plaintext_block)</span><br><span class="line">            prev_ciphertext = ciphertext_block</span><br><span class="line">            prev_plaintext = plaintext_block</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> unpad(<span class="string">b''</span>.join(blocks))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt_cfb</span>(<span class="params">self, plaintext, iv</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Encrypts `plaintext` with the given initialization vector (iv).</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(iv) == <span class="number">16</span></span><br><span class="line"></span><br><span class="line">        blocks = []</span><br><span class="line">        prev_ciphertext = iv</span><br><span class="line">        <span class="keyword">for</span> plaintext_block <span class="keyword">in</span> split_blocks(plaintext, require_padding=<span class="literal">False</span>):</span><br><span class="line">            <span class="comment"># CFB mode encrypt: plaintext_block XOR encrypt(prev_ciphertext)</span></span><br><span class="line">            ciphertext_block = xor_bytes(plaintext_block, <span class="variable language_">self</span>.encrypt_ecb_block(prev_ciphertext))</span><br><span class="line">            blocks.append(ciphertext_block)</span><br><span class="line">            prev_ciphertext = ciphertext_block</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">b''</span>.join(blocks)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt_cfb</span>(<span class="params">self, ciphertext, iv</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Decrypts `ciphertext` with the given initialization vector (iv).</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(iv) == <span class="number">16</span></span><br><span class="line"></span><br><span class="line">        blocks = []</span><br><span class="line">        prev_ciphertext = iv</span><br><span class="line">        <span class="keyword">for</span> ciphertext_block <span class="keyword">in</span> split_blocks(ciphertext, require_padding=<span class="literal">False</span>):</span><br><span class="line">            <span class="comment"># CFB mode decrypt: ciphertext XOR decrypt(prev_ciphertext)</span></span><br><span class="line">            plaintext_block = xor_bytes(ciphertext_block, <span class="variable language_">self</span>.encrypt_ecb_block(prev_ciphertext))</span><br><span class="line">            blocks.append(plaintext_block)</span><br><span class="line">            prev_ciphertext = ciphertext_block</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">b''</span>.join(blocks)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt_ofb</span>(<span class="params">self, plaintext, iv</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Encrypts `plaintext` using OFB mode initialization vector (iv).</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(iv) == <span class="number">16</span></span><br><span class="line"></span><br><span class="line">        blocks = []</span><br><span class="line">        previous = iv</span><br><span class="line">        <span class="keyword">for</span> plaintext_block <span class="keyword">in</span> split_blocks(plaintext, require_padding=<span class="literal">False</span>):</span><br><span class="line">            <span class="comment"># OFB mode encrypt: plaintext_block XOR encrypt(previous)</span></span><br><span class="line">            block = <span class="variable language_">self</span>.encrypt_ecb_block(previous)</span><br><span class="line">            ciphertext_block = xor_bytes(plaintext_block, block)</span><br><span class="line">            blocks.append(ciphertext_block)</span><br><span class="line">            previous = block</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">b''</span>.join(blocks)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt_ofb</span>(<span class="params">self, ciphertext, iv</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Decrypts `ciphertext` using OFB mode initialization vector (iv).</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(iv) == <span class="number">16</span></span><br><span class="line"></span><br><span class="line">        blocks = []</span><br><span class="line">        previous = iv</span><br><span class="line">        <span class="keyword">for</span> ciphertext_block <span class="keyword">in</span> split_blocks(ciphertext, require_padding=<span class="literal">False</span>):</span><br><span class="line">            <span class="comment"># OFB mode decrypt: ciphertext XOR encrypt(previous)</span></span><br><span class="line">            block = <span class="variable language_">self</span>.encrypt_ecb_block(previous)</span><br><span class="line">            plaintext_block = xor_bytes(ciphertext_block, block)</span><br><span class="line">            blocks.append(plaintext_block)</span><br><span class="line">            previous = block</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">b''</span>.join(blocks)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt_ctr</span>(<span class="params">self, plaintext, iv</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Encrypts `plaintext` using CTR mode with the given nounce/IV.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(iv) == <span class="number">16</span></span><br><span class="line"></span><br><span class="line">        blocks = []</span><br><span class="line">        nonce = iv</span><br><span class="line">        <span class="keyword">for</span> plaintext_block <span class="keyword">in</span> split_blocks(plaintext, require_padding=<span class="literal">False</span>):</span><br><span class="line">            <span class="comment"># CTR mode encrypt: plaintext_block XOR encrypt(nonce)</span></span><br><span class="line">            block = xor_bytes(plaintext_block, <span class="variable language_">self</span>.encrypt_ecb_block(nonce))</span><br><span class="line">            blocks.append(block)</span><br><span class="line">            nonce = inc_bytes(nonce)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">b''</span>.join(blocks)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt_ctr</span>(<span class="params">self, ciphertext, iv</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Decrypts `ciphertext` using CTR mode with the given nounce/IV.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(iv) == <span class="number">16</span></span><br><span class="line"></span><br><span class="line">        blocks = []</span><br><span class="line">        nonce = iv</span><br><span class="line">        <span class="keyword">for</span> ciphertext_block <span class="keyword">in</span> split_blocks(ciphertext, require_padding=<span class="literal">False</span>):</span><br><span class="line">            <span class="comment"># CTR mode decrypt: ciphertext XOR encrypt(nonce)</span></span><br><span class="line">            block = xor_bytes(ciphertext_block, <span class="variable language_">self</span>.encrypt_ecb_block(nonce))</span><br><span class="line">            blocks.append(block)</span><br><span class="line">            nonce = inc_bytes(nonce)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">b''</span>.join(blocks)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AES_ecb_encrypt</span>(<span class="params">data: <span class="built_in">bytes</span>, key: <span class="built_in">bytes</span></span>):</span><br><span class="line">    a = AES(key)</span><br><span class="line">    <span class="keyword">return</span> a.encrypt_ecb(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AES_ecb_decrypt</span>(<span class="params">data: <span class="built_in">bytes</span>, key: <span class="built_in">bytes</span></span>):</span><br><span class="line">    a = AES(key)</span><br><span class="line">    <span class="keyword">return</span> a.decrypt_ecb(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AES_cbc_encrypt</span>(<span class="params">data: <span class="built_in">bytes</span>, key: <span class="built_in">bytes</span>, iv: <span class="built_in">bytes</span></span>):</span><br><span class="line">    a = AES(key)</span><br><span class="line">    <span class="keyword">return</span> a.encrypt_cbc(data, iv)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AES_cbc_decrypt</span>(<span class="params">data: <span class="built_in">bytes</span>, key: <span class="built_in">bytes</span>, iv: <span class="built_in">bytes</span></span>):</span><br><span class="line">    a = AES(key)</span><br><span class="line">    <span class="keyword">return</span> a.decrypt_cbc(data, iv)</span><br></pre></td></tr></table></figure><h2 id="白盒AES"><a href="#白盒AES" class="headerlink" title="白盒AES"></a>白盒AES</h2><div class="table-container"><table><thead><tr><th>项目</th><th>普通 AES（黑盒）</th><th>白盒 AES</th></tr></thead><tbody><tr><td>密钥</td><td>独立变量、明确定义</td><td>被混入查表中，不可直接访问</td></tr><tr><td>算法结构</td><td>明确的五步（SubBytes 等）</td><td>各步骤混淆成查表和线性映射</td></tr><tr><td>可移植性</td><td>高（用同样的密钥随处运行）</td><td>低（查表与密钥绑定）</td></tr><tr><td>安全假设</td><td>攻击者看不到内部</td><td>攻击者能看到全部</td></tr></tbody></table></div><p> 目前市面上大多数app都是基于白盒aes开发的，还有查表法实现的aes真的严格按照上面讲的aes流程走的很少，白盒aes东西太多了，而且还有很多攻击手法，就放在”逆向中的AES(二)“里讲好了</p><h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><p><a href="https://www.bilibili.com/video/BV1i341187fK/?spm_id_from=333.337.search-card.all.click">【AES加密算法】| AES加密过程详解| 对称加密| Rijndael-128| 密码学| 信息安全_哔哩哔哩_bilibili</a></p><p><a href="https://goodapple.top/archives/162">密码学——AES/DES加密算法原理介绍 - 枫のBlog</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h1&gt;&lt;p&gt;aes在逆向有很多应用，尤其是现在越来越多软件加密逻辑都选择aes，所以总结一下aes的算法和在ctf逆向中的考点&lt;/p&gt;
&lt;h1 </summary>
      
    
    
    
    <category term="逆向中的密码学" scheme="http://example.com/categories/%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    <category term="对称加密题单" scheme="http://example.com/categories/%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E9%A2%98%E5%8D%95/"/>
    
    
    <category term="aes" scheme="http://example.com/tags/aes/"/>
    
  </entry>
  
  <entry>
    <title>逆向中的AES(二)</title>
    <link href="http://example.com/2025/10/09/%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6/aes2/"/>
    <id>http://example.com/2025/10/09/%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6/aes2/</id>
    <published>2025-10-08T16:00:00.000Z</published>
    <updated>2025-10-15T14:07:05.829Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>逆向工程中往往使用aes加密的程序不是用的查表法aes，就是用的白盒aes，让你难以分析，傻乎乎的使用aes基础算法很容易被破解</p><h1 id="查表法实现的aes："><a href="#查表法实现的aes：" class="headerlink" title="查表法实现的aes："></a>查表法实现的aes：</h1><p>在前一篇文章中我们详细讲解了AES的每一轮中具体的四层结构，以加密过程为例分别是：字节代换层、行移位层、列混淆层和轮密钥加层</p><p>对于查表法实现，就是要将每一轮中的前三层操作(字节代换层、行移位层和列混淆层)合并为查找表。</p><p>查表法的核心思想是将字节代换层、ShiftRows层和MixColumn层融合为查找表：每个表的大小是32 bits(4字节)乘以256项，一般称为T盒(T-Box)或T表。加密过程4个表(Te)，解密过程4个表(Td)，共8个。每一轮操作都通过16次查表产生。</p><p>算法中定义T表实现为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">T0[x] = (2·S[x])&lt;&lt;<span class="string">24 | (S[x])&lt;&lt;16 | (S[x])&lt;&lt;8 | (3·S[x])</span></span><br><span class="line"><span class="string">T1[x] = (3·S[x])&lt;&lt;24</span> | (2·S[x])&lt;&lt;<span class="string">16 | (S[x])&lt;&lt;8 | (S[x])</span></span><br><span class="line"><span class="string">T2[x] = (S[x])&lt;&lt;24 | (3·S[x])&lt;&lt;16</span> | (2·S[x])&lt;&lt;<span class="string">8 | (S[x])</span></span><br><span class="line"><span class="string">T3[x] = (S[x])&lt;&lt;24 | (S[x])&lt;&lt;16 | (3·S[x])&lt;&lt;8</span> | (2·S[x])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><p><code>S[x]</code> 是 S-box 输出；</p></li><li><p><code>2·S[x]</code> 表示有限域 GF(2^8) 下的乘法（即 xtime 运算）。</p></li></ul><h2 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h2><p>由于aes加密流程中的字节代换和行移位可随意更改顺序而不影响加密结果，所以，我们把行移位放在最前面</p><p><img data-src="/images/aes/查表法aes.jpg" alt="查表法aes"></p><p>先不管行移位，把行移位之后的矩阵状态设为</p><script type="math/tex; mode=display">\begin{bmatrix}a_0 & a_4 & a_8 & a_{12} \\a_1 & a_5 & a_9 & a_{13} \\a_2 & a_6 & a_{10} & a_{14} \\a_3 & a_7 & a_{11} & a_{15}\end{bmatrix}</script><p>只看第一列的变化，设</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a0<span class="string">' = S[a0]</span></span><br><span class="line"><span class="string">a1'</span> = S[a1]</span><br><span class="line">a2<span class="string">' = S[a2]</span></span><br><span class="line"><span class="string">a3'</span> = S[a3]</span><br><span class="line"></span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">\begin{bmatrix}c_0 \\ c_1 \\ c_2 \\ c_3\end{bmatrix}=\begin{bmatrix}2 & 3 & 1 & 1 \\1 & 2 & 3 & 1 \\1 & 1 & 2 & 3 \\3 & 1 & 1 & 2\end{bmatrix}\begin{bmatrix}a_0' \\ a_1' \\ a_2' \\ a_3'\end{bmatrix}</script><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">c0</span> = <span class="number">2</span>·a0<span class="string">' ⊕ 3·a1'</span> ⊕ <span class="number">1</span>·a2<span class="string">' ⊕ 1·a3'</span></span><br><span class="line"><span class="attr">c1</span> = <span class="number">1</span>·a0<span class="string">' ⊕ 2·a1'</span> ⊕ <span class="number">3</span>·a2<span class="string">' ⊕ 1·a3'</span></span><br><span class="line"><span class="attr">c2</span> = <span class="number">1</span>·a0<span class="string">' ⊕ 1·a1'</span> ⊕ <span class="number">2</span>·a2<span class="string">' ⊕ 3·a3'</span></span><br><span class="line"><span class="attr">c3</span> = <span class="number">3</span>·a0<span class="string">' ⊕ 1·a1'</span> ⊕ <span class="number">1</span>·a2<span class="string">' ⊕ 2·a3'</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">T0<span class="section">[x]</span> = (2·S<span class="section">[x]</span>, S<span class="section">[x]</span>, S<span class="section">[x]</span>, 3·S<span class="section">[x]</span>)   // 合并为一个 32 位值</span><br><span class="line">T1<span class="section">[x]</span> = (3·S<span class="section">[x]</span>, 2·S<span class="section">[x]</span>, S<span class="section">[x]</span>, S<span class="section">[x]</span>)</span><br><span class="line">T2<span class="section">[x]</span> = (S<span class="section">[x]</span>, 3·S<span class="section">[x]</span>, 2·S<span class="section">[x]</span>, S<span class="section">[x]</span>)</span><br><span class="line">T3<span class="section">[x]</span> = (S<span class="section">[x]</span>, S<span class="section">[x]</span>, 3·S<span class="section">[x]</span>, 2·S<span class="section">[x]</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>所以</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">T0<span class="section">[a0]</span> = <span class="section">[2·S[a0]</span>, S<span class="section">[a0]</span>, S<span class="section">[a0]</span>, 3·S<span class="section">[a0]]</span></span><br><span class="line">T1<span class="section">[a1]</span> = <span class="section">[3·S[a1]</span>, 2·S<span class="section">[a1]</span>, S<span class="section">[a1]</span>, S<span class="section">[a1]]</span></span><br><span class="line">T2<span class="section">[a2]</span> = <span class="section">[S[a2]</span>, 3·S<span class="section">[a2]</span>, 2·S<span class="section">[a2]</span>, S<span class="section">[a2]]</span></span><br><span class="line">T3<span class="section">[a3]</span> = <span class="section">[S[a3]</span>, S<span class="section">[a3]</span>, 3·S<span class="section">[a3]</span>, 2·S<span class="section">[a3]]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>于是</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">c0c1c2c3</span> = T0[a0] ⊕ T1[a1] ⊕ T2[a2] ⊕ T3[a3]</span><br></pre></td></tr></table></figure><p>现在再来考虑行移位的影响，只要把a1-a15的对应标号改掉就行</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">t0</span> = T0[a0] ^ T1[a5] ^ T2[a10] ^ T3[a15] ^ roundKey[<span class="number">0</span>]<span class="comment">;</span></span><br><span class="line"><span class="attr">t1</span> = T0[a4] ^ T1[a9] ^ T2[a14] ^ T3[a3]  ^ roundKey[<span class="number">1</span>]<span class="comment">;</span></span><br><span class="line"><span class="attr">t2</span> = T0[a8] ^ T1[a13]^ T2[a2]  ^ T3[a7]  ^ roundKey[<span class="number">2</span>]<span class="comment">;</span></span><br><span class="line"><span class="attr">t3</span> = T0[a12]^ T1[a1] ^ T2[a6]  ^ T3[a11] ^ roundKey[<span class="number">3</span>]<span class="comment">;</span></span><br></pre></td></tr></table></figure><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="1.556ex" height="1.773ex" role="img" focusable="false" viewBox="0 -626 688 783.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(394,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>是最后加密的结果</p><h2 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> AES_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AES_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">AES_Key</span> {</span><br><span class="line">    <span class="type">uint32_t</span>* ek;  <span class="comment">// AES加密轮密钥</span></span><br><span class="line">    <span class="type">uint32_t</span>* dk;  <span class="comment">// AES 解密轮密钥</span></span><br><span class="line">    <span class="type">uint32_t</span> nr;   <span class="comment">//加密轮数</span></span><br><span class="line">} AES_Key;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">AES_KeyInit</span><span class="params">(<span class="type">uint8_t</span>* key, AES_Key* aes_key, <span class="type">size_t</span> bits)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AES_Encrypt</span><span class="params">(<span class="type">uint8_t</span>* plaintext, <span class="type">uint8_t</span>* ciphertext, AES_Key aes_key)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AES_Decrypt</span><span class="params">(<span class="type">uint8_t</span>* ciphertext, <span class="type">uint8_t</span>* plaintext, AES_Key aes_key)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AES_KeyDelete</span><span class="params">(AES_Key aes_key)</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint8_t</span> Sbox[<span class="number">256</span>] = {</span><br><span class="line">    <span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x77</span>, <span class="number">0x7B</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2B</span>,</span><br><span class="line">    <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>, <span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>,</span><br><span class="line">    <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, <span class="number">0x72</span>, <span class="number">0xC0</span>, <span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>,</span><br><span class="line">    <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>, <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>,</span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0xC7</span>, <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>,</span><br><span class="line">    <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>, <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>, <span class="number">0x5A</span>, <span class="number">0xA0</span>,</span><br><span class="line">    <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>, <span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>,</span><br><span class="line">    <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>, <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>,</span><br><span class="line">    <span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>,</span><br><span class="line">    <span class="number">0x50</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xA8</span>, <span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>,</span><br><span class="line">    <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>, <span class="number">0xCD</span>, <span class="number">0x0C</span>, <span class="number">0x13</span>, <span class="number">0xEC</span>,</span><br><span class="line">    <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>, <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>,</span><br><span class="line">    <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>, <span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>,</span><br><span class="line">    <span class="number">0xC2</span>, <span class="number">0xD3</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>, <span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>,</span><br><span class="line">    <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>, <span class="number">0xAE</span>, <span class="number">0x08</span>,</span><br><span class="line">    <span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>, <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>,</span><br><span class="line">    <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>, <span class="number">0x70</span>, <span class="number">0x3E</span>, <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>,</span><br><span class="line">    <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>, <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>, <span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>,</span><br><span class="line">    <span class="number">0x69</span>, <span class="number">0xD9</span>, <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>,</span><br><span class="line">    <span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2D</span>, <span class="number">0x0F</span>,</span><br><span class="line">    <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span> };</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> SboxIV[<span class="number">256</span>] = {</span><br><span class="line">  <span class="number">0x52</span>,<span class="number">0x09</span>,<span class="number">0x6A</span>,<span class="number">0xD5</span>,<span class="number">0x30</span>,<span class="number">0x36</span>,<span class="number">0xA5</span>,<span class="number">0x38</span>,<span class="number">0xBF</span>,<span class="number">0x40</span>,<span class="number">0xA3</span>,<span class="number">0x9E</span>,<span class="number">0x81</span>,<span class="number">0xF3</span>,<span class="number">0xD7</span>,<span class="number">0xFB</span>,</span><br><span class="line">  <span class="number">0x7C</span>,<span class="number">0xE3</span>,<span class="number">0x39</span>,<span class="number">0x82</span>,<span class="number">0x9B</span>,<span class="number">0x2F</span>,<span class="number">0xFF</span>,<span class="number">0x87</span>,<span class="number">0x34</span>,<span class="number">0x8E</span>,<span class="number">0x43</span>,<span class="number">0x44</span>,<span class="number">0xC4</span>,<span class="number">0xDE</span>,<span class="number">0xE9</span>,<span class="number">0xCB</span>,</span><br><span class="line">  <span class="number">0x54</span>,<span class="number">0x7B</span>,<span class="number">0x94</span>,<span class="number">0x32</span>,<span class="number">0xA6</span>,<span class="number">0xC2</span>,<span class="number">0x23</span>,<span class="number">0x3D</span>,<span class="number">0xEE</span>,<span class="number">0x4C</span>,<span class="number">0x95</span>,<span class="number">0x0B</span>,<span class="number">0x42</span>,<span class="number">0xFA</span>,<span class="number">0xC3</span>,<span class="number">0x4E</span>,</span><br><span class="line">  <span class="number">0x08</span>,<span class="number">0x2E</span>,<span class="number">0xA1</span>,<span class="number">0x66</span>,<span class="number">0x28</span>,<span class="number">0xD9</span>,<span class="number">0x24</span>,<span class="number">0xB2</span>,<span class="number">0x76</span>,<span class="number">0x5B</span>,<span class="number">0xA2</span>,<span class="number">0x49</span>,<span class="number">0x6D</span>,<span class="number">0x8B</span>,<span class="number">0xD1</span>,<span class="number">0x25</span>,</span><br><span class="line">  <span class="number">0x72</span>,<span class="number">0xF8</span>,<span class="number">0xF6</span>,<span class="number">0x64</span>,<span class="number">0x86</span>,<span class="number">0x68</span>,<span class="number">0x98</span>,<span class="number">0x16</span>,<span class="number">0xD4</span>,<span class="number">0xA4</span>,<span class="number">0x5C</span>,<span class="number">0xCC</span>,<span class="number">0x5D</span>,<span class="number">0x65</span>,<span class="number">0xB6</span>,<span class="number">0x92</span>,</span><br><span class="line">  <span class="number">0x6C</span>,<span class="number">0x70</span>,<span class="number">0x48</span>,<span class="number">0x50</span>,<span class="number">0xFD</span>,<span class="number">0xED</span>,<span class="number">0xB9</span>,<span class="number">0xDA</span>,<span class="number">0x5E</span>,<span class="number">0x15</span>,<span class="number">0x46</span>,<span class="number">0x57</span>,<span class="number">0xA7</span>,<span class="number">0x8D</span>,<span class="number">0x9D</span>,<span class="number">0x84</span>,</span><br><span class="line">  <span class="number">0x90</span>,<span class="number">0xD8</span>,<span class="number">0xAB</span>,<span class="number">0x00</span>,<span class="number">0x8C</span>,<span class="number">0xBC</span>,<span class="number">0xD3</span>,<span class="number">0x0A</span>,<span class="number">0xF7</span>,<span class="number">0xE4</span>,<span class="number">0x58</span>,<span class="number">0x05</span>,<span class="number">0xB8</span>,<span class="number">0xB3</span>,<span class="number">0x45</span>,<span class="number">0x06</span>,</span><br><span class="line">  <span class="number">0xD0</span>,<span class="number">0x2C</span>,<span class="number">0x1E</span>,<span class="number">0x8F</span>,<span class="number">0xCA</span>,<span class="number">0x3F</span>,<span class="number">0x0F</span>,<span class="number">0x02</span>,<span class="number">0xC1</span>,<span class="number">0xAF</span>,<span class="number">0xBD</span>,<span class="number">0x03</span>,<span class="number">0x01</span>,<span class="number">0x13</span>,<span class="number">0x8A</span>,<span class="number">0x6B</span>,</span><br><span class="line">  <span class="number">0x3A</span>,<span class="number">0x91</span>,<span class="number">0x11</span>,<span class="number">0x41</span>,<span class="number">0x4F</span>,<span class="number">0x67</span>,<span class="number">0xDC</span>,<span class="number">0xEA</span>,<span class="number">0x97</span>,<span class="number">0xF2</span>,<span class="number">0xCF</span>,<span class="number">0xCE</span>,<span class="number">0xF0</span>,<span class="number">0xB4</span>,<span class="number">0xE6</span>,<span class="number">0x73</span>,</span><br><span class="line">  <span class="number">0x96</span>,<span class="number">0xAC</span>,<span class="number">0x74</span>,<span class="number">0x22</span>,<span class="number">0xE7</span>,<span class="number">0xAD</span>,<span class="number">0x35</span>,<span class="number">0x85</span>,<span class="number">0xE2</span>,<span class="number">0xF9</span>,<span class="number">0x37</span>,<span class="number">0xE8</span>,<span class="number">0x1C</span>,<span class="number">0x75</span>,<span class="number">0xDF</span>,<span class="number">0x6E</span>,</span><br><span class="line">  <span class="number">0x47</span>,<span class="number">0xF1</span>,<span class="number">0x1A</span>,<span class="number">0x71</span>,<span class="number">0x1D</span>,<span class="number">0x29</span>,<span class="number">0xC5</span>,<span class="number">0x89</span>,<span class="number">0x6F</span>,<span class="number">0xB7</span>,<span class="number">0x62</span>,<span class="number">0x0E</span>,<span class="number">0xAA</span>,<span class="number">0x18</span>,<span class="number">0xBE</span>,<span class="number">0x1B</span>,</span><br><span class="line">  <span class="number">0xFC</span>,<span class="number">0x56</span>,<span class="number">0x3E</span>,<span class="number">0x4B</span>,<span class="number">0xC6</span>,<span class="number">0xD2</span>,<span class="number">0x79</span>,<span class="number">0x20</span>,<span class="number">0x9A</span>,<span class="number">0xDB</span>,<span class="number">0xC0</span>,<span class="number">0xFE</span>,<span class="number">0x78</span>,<span class="number">0xCD</span>,<span class="number">0x5A</span>,<span class="number">0xF4</span>,</span><br><span class="line">  <span class="number">0x1F</span>,<span class="number">0xDD</span>,<span class="number">0xA8</span>,<span class="number">0x33</span>,<span class="number">0x88</span>,<span class="number">0x07</span>,<span class="number">0xC7</span>,<span class="number">0x31</span>,<span class="number">0xB1</span>,<span class="number">0x12</span>,<span class="number">0x10</span>,<span class="number">0x59</span>,<span class="number">0x27</span>,<span class="number">0x80</span>,<span class="number">0xEC</span>,<span class="number">0x5F</span>,</span><br><span class="line">  <span class="number">0x60</span>,<span class="number">0x51</span>,<span class="number">0x7F</span>,<span class="number">0xA9</span>,<span class="number">0x19</span>,<span class="number">0xB5</span>,<span class="number">0x4A</span>,<span class="number">0x0D</span>,<span class="number">0x2D</span>,<span class="number">0xE5</span>,<span class="number">0x7A</span>,<span class="number">0x9F</span>,<span class="number">0x93</span>,<span class="number">0xC9</span>,<span class="number">0x9C</span>,<span class="number">0xEF</span>,</span><br><span class="line">  <span class="number">0xA0</span>,<span class="number">0xE0</span>,<span class="number">0x3B</span>,<span class="number">0x4D</span>,<span class="number">0xAE</span>,<span class="number">0x2A</span>,<span class="number">0xF5</span>,<span class="number">0xB0</span>,<span class="number">0xC8</span>,<span class="number">0xEB</span>,<span class="number">0xBB</span>,<span class="number">0x3C</span>,<span class="number">0x83</span>,<span class="number">0x53</span>,<span class="number">0x99</span>,<span class="number">0x61</span>,</span><br><span class="line">  <span class="number">0x17</span>,<span class="number">0x2B</span>,<span class="number">0x04</span>,<span class="number">0x7E</span>,<span class="number">0xBA</span>,<span class="number">0x77</span>,<span class="number">0xD6</span>,<span class="number">0x26</span>,<span class="number">0xE1</span>,<span class="number">0x69</span>,<span class="number">0x14</span>,<span class="number">0x63</span>,<span class="number">0x55</span>,<span class="number">0x21</span>,<span class="number">0x0C</span>,<span class="number">0x7D</span></span><br><span class="line">};</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint32_t</span> TE[<span class="number">256</span>] = {</span><br><span class="line">    <span class="number">0xc66363a5</span>, <span class="number">0xf87c7c84</span>, <span class="number">0xee777799</span>, <span class="number">0xf67b7b8d</span>, <span class="number">0xfff2f20d</span>, <span class="number">0xd66b6bbd</span>,</span><br><span class="line">    <span class="number">0xde6f6fb1</span>, <span class="number">0x91c5c554</span>, <span class="number">0x60303050</span>, <span class="number">0x02010103</span>, <span class="number">0xce6767a9</span>, <span class="number">0x562b2b7d</span>,</span><br><span class="line">    <span class="number">0xe7fefe19</span>, <span class="number">0xb5d7d762</span>, <span class="number">0x4dababe6</span>, <span class="number">0xec76769a</span>, <span class="number">0x8fcaca45</span>, <span class="number">0x1f82829d</span>,</span><br><span class="line">    <span class="number">0x89c9c940</span>, <span class="number">0xfa7d7d87</span>, <span class="number">0xeffafa15</span>, <span class="number">0xb25959eb</span>, <span class="number">0x8e4747c9</span>, <span class="number">0xfbf0f00b</span>,</span><br><span class="line">    <span class="number">0x41adadec</span>, <span class="number">0xb3d4d467</span>, <span class="number">0x5fa2a2fd</span>, <span class="number">0x45afafea</span>, <span class="number">0x239c9cbf</span>, <span class="number">0x53a4a4f7</span>,</span><br><span class="line">    <span class="number">0xe4727296</span>, <span class="number">0x9bc0c05b</span>, <span class="number">0x75b7b7c2</span>, <span class="number">0xe1fdfd1c</span>, <span class="number">0x3d9393ae</span>, <span class="number">0x4c26266a</span>,</span><br><span class="line">    <span class="number">0x6c36365a</span>, <span class="number">0x7e3f3f41</span>, <span class="number">0xf5f7f702</span>, <span class="number">0x83cccc4f</span>, <span class="number">0x6834345c</span>, <span class="number">0x51a5a5f4</span>,</span><br><span class="line">    <span class="number">0xd1e5e534</span>, <span class="number">0xf9f1f108</span>, <span class="number">0xe2717193</span>, <span class="number">0xabd8d873</span>, <span class="number">0x62313153</span>, <span class="number">0x2a15153f</span>,</span><br><span class="line">    <span class="number">0x0804040c</span>, <span class="number">0x95c7c752</span>, <span class="number">0x46232365</span>, <span class="number">0x9dc3c35e</span>, <span class="number">0x30181828</span>, <span class="number">0x379696a1</span>,</span><br><span class="line">    <span class="number">0x0a05050f</span>, <span class="number">0x2f9a9ab5</span>, <span class="number">0x0e070709</span>, <span class="number">0x24121236</span>, <span class="number">0x1b80809b</span>, <span class="number">0xdfe2e23d</span>,</span><br><span class="line">    <span class="number">0xcdebeb26</span>, <span class="number">0x4e272769</span>, <span class="number">0x7fb2b2cd</span>, <span class="number">0xea75759f</span>, <span class="number">0x1209091b</span>, <span class="number">0x1d83839e</span>,</span><br><span class="line">    <span class="number">0x582c2c74</span>, <span class="number">0x341a1a2e</span>, <span class="number">0x361b1b2d</span>, <span class="number">0xdc6e6eb2</span>, <span class="number">0xb45a5aee</span>, <span class="number">0x5ba0a0fb</span>,</span><br><span class="line">    <span class="number">0xa45252f6</span>, <span class="number">0x763b3b4d</span>, <span class="number">0xb7d6d661</span>, <span class="number">0x7db3b3ce</span>, <span class="number">0x5229297b</span>, <span class="number">0xdde3e33e</span>,</span><br><span class="line">    <span class="number">0x5e2f2f71</span>, <span class="number">0x13848497</span>, <span class="number">0xa65353f5</span>, <span class="number">0xb9d1d168</span>, <span class="number">0x00000000</span>, <span class="number">0xc1eded2c</span>,</span><br><span class="line">    <span class="number">0x40202060</span>, <span class="number">0xe3fcfc1f</span>, <span class="number">0x79b1b1c8</span>, <span class="number">0xb65b5bed</span>, <span class="number">0xd46a6abe</span>, <span class="number">0x8dcbcb46</span>,</span><br><span class="line">    <span class="number">0x67bebed9</span>, <span class="number">0x7239394b</span>, <span class="number">0x944a4ade</span>, <span class="number">0x984c4cd4</span>, <span class="number">0xb05858e8</span>, <span class="number">0x85cfcf4a</span>,</span><br><span class="line">    <span class="number">0xbbd0d06b</span>, <span class="number">0xc5efef2a</span>, <span class="number">0x4faaaae5</span>, <span class="number">0xedfbfb16</span>, <span class="number">0x864343c5</span>, <span class="number">0x9a4d4dd7</span>,</span><br><span class="line">    <span class="number">0x66333355</span>, <span class="number">0x11858594</span>, <span class="number">0x8a4545cf</span>, <span class="number">0xe9f9f910</span>, <span class="number">0x04020206</span>, <span class="number">0xfe7f7f81</span>,</span><br><span class="line">    <span class="number">0xa05050f0</span>, <span class="number">0x783c3c44</span>, <span class="number">0x259f9fba</span>, <span class="number">0x4ba8a8e3</span>, <span class="number">0xa25151f3</span>, <span class="number">0x5da3a3fe</span>,</span><br><span class="line">    <span class="number">0x804040c0</span>, <span class="number">0x058f8f8a</span>, <span class="number">0x3f9292ad</span>, <span class="number">0x219d9dbc</span>, <span class="number">0x70383848</span>, <span class="number">0xf1f5f504</span>,</span><br><span class="line">    <span class="number">0x63bcbcdf</span>, <span class="number">0x77b6b6c1</span>, <span class="number">0xafdada75</span>, <span class="number">0x42212163</span>, <span class="number">0x20101030</span>, <span class="number">0xe5ffff1a</span>,</span><br><span class="line">    <span class="number">0xfdf3f30e</span>, <span class="number">0xbfd2d26d</span>, <span class="number">0x81cdcd4c</span>, <span class="number">0x180c0c14</span>, <span class="number">0x26131335</span>, <span class="number">0xc3ecec2f</span>,</span><br><span class="line">    <span class="number">0xbe5f5fe1</span>, <span class="number">0x359797a2</span>, <span class="number">0x884444cc</span>, <span class="number">0x2e171739</span>, <span class="number">0x93c4c457</span>, <span class="number">0x55a7a7f2</span>,</span><br><span class="line">    <span class="number">0xfc7e7e82</span>, <span class="number">0x7a3d3d47</span>, <span class="number">0xc86464ac</span>, <span class="number">0xba5d5de7</span>, <span class="number">0x3219192b</span>, <span class="number">0xe6737395</span>,</span><br><span class="line">    <span class="number">0xc06060a0</span>, <span class="number">0x19818198</span>, <span class="number">0x9e4f4fd1</span>, <span class="number">0xa3dcdc7f</span>, <span class="number">0x44222266</span>, <span class="number">0x542a2a7e</span>,</span><br><span class="line">    <span class="number">0x3b9090ab</span>, <span class="number">0x0b888883</span>, <span class="number">0x8c4646ca</span>, <span class="number">0xc7eeee29</span>, <span class="number">0x6bb8b8d3</span>, <span class="number">0x2814143c</span>,</span><br><span class="line">    <span class="number">0xa7dede79</span>, <span class="number">0xbc5e5ee2</span>, <span class="number">0x160b0b1d</span>, <span class="number">0xaddbdb76</span>, <span class="number">0xdbe0e03b</span>, <span class="number">0x64323256</span>,</span><br><span class="line">    <span class="number">0x743a3a4e</span>, <span class="number">0x140a0a1e</span>, <span class="number">0x924949db</span>, <span class="number">0x0c06060a</span>, <span class="number">0x4824246c</span>, <span class="number">0xb85c5ce4</span>,</span><br><span class="line">    <span class="number">0x9fc2c25d</span>, <span class="number">0xbdd3d36e</span>, <span class="number">0x43acacef</span>, <span class="number">0xc46262a6</span>, <span class="number">0x399191a8</span>, <span class="number">0x319595a4</span>,</span><br><span class="line">    <span class="number">0xd3e4e437</span>, <span class="number">0xf279798b</span>, <span class="number">0xd5e7e732</span>, <span class="number">0x8bc8c843</span>, <span class="number">0x6e373759</span>, <span class="number">0xda6d6db7</span>,</span><br><span class="line">    <span class="number">0x018d8d8c</span>, <span class="number">0xb1d5d564</span>, <span class="number">0x9c4e4ed2</span>, <span class="number">0x49a9a9e0</span>, <span class="number">0xd86c6cb4</span>, <span class="number">0xac5656fa</span>,</span><br><span class="line">    <span class="number">0xf3f4f407</span>, <span class="number">0xcfeaea25</span>, <span class="number">0xca6565af</span>, <span class="number">0xf47a7a8e</span>, <span class="number">0x47aeaee9</span>, <span class="number">0x10080818</span>,</span><br><span class="line">    <span class="number">0x6fbabad5</span>, <span class="number">0xf0787888</span>, <span class="number">0x4a25256f</span>, <span class="number">0x5c2e2e72</span>, <span class="number">0x381c1c24</span>, <span class="number">0x57a6a6f1</span>,</span><br><span class="line">    <span class="number">0x73b4b4c7</span>, <span class="number">0x97c6c651</span>, <span class="number">0xcbe8e823</span>, <span class="number">0xa1dddd7c</span>, <span class="number">0xe874749c</span>, <span class="number">0x3e1f1f21</span>,</span><br><span class="line">    <span class="number">0x964b4bdd</span>, <span class="number">0x61bdbddc</span>, <span class="number">0x0d8b8b86</span>, <span class="number">0x0f8a8a85</span>, <span class="number">0xe0707090</span>, <span class="number">0x7c3e3e42</span>,</span><br><span class="line">    <span class="number">0x71b5b5c4</span>, <span class="number">0xcc6666aa</span>, <span class="number">0x904848d8</span>, <span class="number">0x06030305</span>, <span class="number">0xf7f6f601</span>, <span class="number">0x1c0e0e12</span>,</span><br><span class="line">    <span class="number">0xc26161a3</span>, <span class="number">0x6a35355f</span>, <span class="number">0xae5757f9</span>, <span class="number">0x69b9b9d0</span>, <span class="number">0x17868691</span>, <span class="number">0x99c1c158</span>,</span><br><span class="line">    <span class="number">0x3a1d1d27</span>, <span class="number">0x279e9eb9</span>, <span class="number">0xd9e1e138</span>, <span class="number">0xebf8f813</span>, <span class="number">0x2b9898b3</span>, <span class="number">0x22111133</span>,</span><br><span class="line">    <span class="number">0xd26969bb</span>, <span class="number">0xa9d9d970</span>, <span class="number">0x078e8e89</span>, <span class="number">0x339494a7</span>, <span class="number">0x2d9b9bb6</span>, <span class="number">0x3c1e1e22</span>,</span><br><span class="line">    <span class="number">0x15878792</span>, <span class="number">0xc9e9e920</span>, <span class="number">0x87cece49</span>, <span class="number">0xaa5555ff</span>, <span class="number">0x50282878</span>, <span class="number">0xa5dfdf7a</span>,</span><br><span class="line">    <span class="number">0x038c8c8f</span>, <span class="number">0x59a1a1f8</span>, <span class="number">0x09898980</span>, <span class="number">0x1a0d0d17</span>, <span class="number">0x65bfbfda</span>, <span class="number">0xd7e6e631</span>,</span><br><span class="line">    <span class="number">0x844242c6</span>, <span class="number">0xd06868b8</span>, <span class="number">0x824141c3</span>, <span class="number">0x299999b0</span>, <span class="number">0x5a2d2d77</span>, <span class="number">0x1e0f0f11</span>,</span><br><span class="line">    <span class="number">0x7bb0b0cb</span>, <span class="number">0xa85454fc</span>, <span class="number">0x6dbbbbd6</span>, <span class="number">0x2c16163a</span> };</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint32_t</span> TD[<span class="number">256</span>] = {</span><br><span class="line">    <span class="number">0x51f4a750</span>, <span class="number">0x7e416553</span>, <span class="number">0x1a17a4c3</span>, <span class="number">0x3a275e96</span>, <span class="number">0x3bab6bcb</span>, <span class="number">0x1f9d45f1</span>,</span><br><span class="line">    <span class="number">0xacfa58ab</span>, <span class="number">0x4be30393</span>, <span class="number">0x2030fa55</span>, <span class="number">0xad766df6</span>, <span class="number">0x88cc7691</span>, <span class="number">0xf5024c25</span>,</span><br><span class="line">    <span class="number">0x4fe5d7fc</span>, <span class="number">0xc52acbd7</span>, <span class="number">0x26354480</span>, <span class="number">0xb562a38f</span>, <span class="number">0xdeb15a49</span>, <span class="number">0x25ba1b67</span>,</span><br><span class="line">    <span class="number">0x45ea0e98</span>, <span class="number">0x5dfec0e1</span>, <span class="number">0xc32f7502</span>, <span class="number">0x814cf012</span>, <span class="number">0x8d4697a3</span>, <span class="number">0x6bd3f9c6</span>,</span><br><span class="line">    <span class="number">0x038f5fe7</span>, <span class="number">0x15929c95</span>, <span class="number">0xbf6d7aeb</span>, <span class="number">0x955259da</span>, <span class="number">0xd4be832d</span>, <span class="number">0x587421d3</span>,</span><br><span class="line">    <span class="number">0x49e06929</span>, <span class="number">0x8ec9c844</span>, <span class="number">0x75c2896a</span>, <span class="number">0xf48e7978</span>, <span class="number">0x99583e6b</span>, <span class="number">0x27b971dd</span>,</span><br><span class="line">    <span class="number">0xbee14fb6</span>, <span class="number">0xf088ad17</span>, <span class="number">0xc920ac66</span>, <span class="number">0x7dce3ab4</span>, <span class="number">0x63df4a18</span>, <span class="number">0xe51a3182</span>,</span><br><span class="line">    <span class="number">0x97513360</span>, <span class="number">0x62537f45</span>, <span class="number">0xb16477e0</span>, <span class="number">0xbb6bae84</span>, <span class="number">0xfe81a01c</span>, <span class="number">0xf9082b94</span>,</span><br><span class="line">    <span class="number">0x70486858</span>, <span class="number">0x8f45fd19</span>, <span class="number">0x94de6c87</span>, <span class="number">0x527bf8b7</span>, <span class="number">0xab73d323</span>, <span class="number">0x724b02e2</span>,</span><br><span class="line">    <span class="number">0xe31f8f57</span>, <span class="number">0x6655ab2a</span>, <span class="number">0xb2eb2807</span>, <span class="number">0x2fb5c203</span>, <span class="number">0x86c57b9a</span>, <span class="number">0xd33708a5</span>,</span><br><span class="line">    <span class="number">0x302887f2</span>, <span class="number">0x23bfa5b2</span>, <span class="number">0x02036aba</span>, <span class="number">0xed16825c</span>, <span class="number">0x8acf1c2b</span>, <span class="number">0xa779b492</span>,</span><br><span class="line">    <span class="number">0xf307f2f0</span>, <span class="number">0x4e69e2a1</span>, <span class="number">0x65daf4cd</span>, <span class="number">0x0605bed5</span>, <span class="number">0xd134621f</span>, <span class="number">0xc4a6fe8a</span>,</span><br><span class="line">    <span class="number">0x342e539d</span>, <span class="number">0xa2f355a0</span>, <span class="number">0x058ae132</span>, <span class="number">0xa4f6eb75</span>, <span class="number">0x0b83ec39</span>, <span class="number">0x4060efaa</span>,</span><br><span class="line">    <span class="number">0x5e719f06</span>, <span class="number">0xbd6e1051</span>, <span class="number">0x3e218af9</span>, <span class="number">0x96dd063d</span>, <span class="number">0xdd3e05ae</span>, <span class="number">0x4de6bd46</span>,</span><br><span class="line">    <span class="number">0x91548db5</span>, <span class="number">0x71c45d05</span>, <span class="number">0x0406d46f</span>, <span class="number">0x605015ff</span>, <span class="number">0x1998fb24</span>, <span class="number">0xd6bde997</span>,</span><br><span class="line">    <span class="number">0x894043cc</span>, <span class="number">0x67d99e77</span>, <span class="number">0xb0e842bd</span>, <span class="number">0x07898b88</span>, <span class="number">0xe7195b38</span>, <span class="number">0x79c8eedb</span>,</span><br><span class="line">    <span class="number">0xa17c0a47</span>, <span class="number">0x7c420fe9</span>, <span class="number">0xf8841ec9</span>, <span class="number">0x00000000</span>, <span class="number">0x09808683</span>, <span class="number">0x322bed48</span>,</span><br><span class="line">    <span class="number">0x1e1170ac</span>, <span class="number">0x6c5a724e</span>, <span class="number">0xfd0efffb</span>, <span class="number">0x0f853856</span>, <span class="number">0x3daed51e</span>, <span class="number">0x362d3927</span>,</span><br><span class="line">    <span class="number">0x0a0fd964</span>, <span class="number">0x685ca621</span>, <span class="number">0x9b5b54d1</span>, <span class="number">0x24362e3a</span>, <span class="number">0x0c0a67b1</span>, <span class="number">0x9357e70f</span>,</span><br><span class="line">    <span class="number">0xb4ee96d2</span>, <span class="number">0x1b9b919e</span>, <span class="number">0x80c0c54f</span>, <span class="number">0x61dc20a2</span>, <span class="number">0x5a774b69</span>, <span class="number">0x1c121a16</span>,</span><br><span class="line">    <span class="number">0xe293ba0a</span>, <span class="number">0xc0a02ae5</span>, <span class="number">0x3c22e043</span>, <span class="number">0x121b171d</span>, <span class="number">0x0e090d0b</span>, <span class="number">0xf28bc7ad</span>,</span><br><span class="line">    <span class="number">0x2db6a8b9</span>, <span class="number">0x141ea9c8</span>, <span class="number">0x57f11985</span>, <span class="number">0xaf75074c</span>, <span class="number">0xee99ddbb</span>, <span class="number">0xa37f60fd</span>,</span><br><span class="line">    <span class="number">0xf701269f</span>, <span class="number">0x5c72f5bc</span>, <span class="number">0x44663bc5</span>, <span class="number">0x5bfb7e34</span>, <span class="number">0x8b432976</span>, <span class="number">0xcb23c6dc</span>,</span><br><span class="line">    <span class="number">0xb6edfc68</span>, <span class="number">0xb8e4f163</span>, <span class="number">0xd731dcca</span>, <span class="number">0x42638510</span>, <span class="number">0x13972240</span>, <span class="number">0x84c61120</span>,</span><br><span class="line">    <span class="number">0x854a247d</span>, <span class="number">0xd2bb3df8</span>, <span class="number">0xaef93211</span>, <span class="number">0xc729a16d</span>, <span class="number">0x1d9e2f4b</span>, <span class="number">0xdcb230f3</span>,</span><br><span class="line">    <span class="number">0x0d8652ec</span>, <span class="number">0x77c1e3d0</span>, <span class="number">0x2bb3166c</span>, <span class="number">0xa970b999</span>, <span class="number">0x119448fa</span>, <span class="number">0x47e96422</span>,</span><br><span class="line">    <span class="number">0xa8fc8cc4</span>, <span class="number">0xa0f03f1a</span>, <span class="number">0x567d2cd8</span>, <span class="number">0x223390ef</span>, <span class="number">0x87494ec7</span>, <span class="number">0xd938d1c1</span>,</span><br><span class="line">    <span class="number">0x8ccaa2fe</span>, <span class="number">0x98d40b36</span>, <span class="number">0xa6f581cf</span>, <span class="number">0xa57ade28</span>, <span class="number">0xdab78e26</span>, <span class="number">0x3fadbfa4</span>,</span><br><span class="line">    <span class="number">0x2c3a9de4</span>, <span class="number">0x5078920d</span>, <span class="number">0x6a5fcc9b</span>, <span class="number">0x547e4662</span>, <span class="number">0xf68d13c2</span>, <span class="number">0x90d8b8e8</span>,</span><br><span class="line">    <span class="number">0x2e39f75e</span>, <span class="number">0x82c3aff5</span>, <span class="number">0x9f5d80be</span>, <span class="number">0x69d0937c</span>, <span class="number">0x6fd52da9</span>, <span class="number">0xcf2512b3</span>,</span><br><span class="line">    <span class="number">0xc8ac993b</span>, <span class="number">0x10187da7</span>, <span class="number">0xe89c636e</span>, <span class="number">0xdb3bbb7b</span>, <span class="number">0xcd267809</span>, <span class="number">0x6e5918f4</span>,</span><br><span class="line">    <span class="number">0xec9ab701</span>, <span class="number">0x834f9aa8</span>, <span class="number">0xe6956e65</span>, <span class="number">0xaaffe67e</span>, <span class="number">0x21bccf08</span>, <span class="number">0xef15e8e6</span>,</span><br><span class="line">    <span class="number">0xbae79bd9</span>, <span class="number">0x4a6f36ce</span>, <span class="number">0xea9f09d4</span>, <span class="number">0x29b07cd6</span>, <span class="number">0x31a4b2af</span>, <span class="number">0x2a3f2331</span>,</span><br><span class="line">    <span class="number">0xc6a59430</span>, <span class="number">0x35a266c0</span>, <span class="number">0x744ebc37</span>, <span class="number">0xfc82caa6</span>, <span class="number">0xe090d0b0</span>, <span class="number">0x33a7d815</span>,</span><br><span class="line">    <span class="number">0xf104984a</span>, <span class="number">0x41ecdaf7</span>, <span class="number">0x7fcd500e</span>, <span class="number">0x1791f62f</span>, <span class="number">0x764dd68d</span>, <span class="number">0x43efb04d</span>,</span><br><span class="line">    <span class="number">0xccaa4d54</span>, <span class="number">0xe49604df</span>, <span class="number">0x9ed1b5e3</span>, <span class="number">0x4c6a881b</span>, <span class="number">0xc12c1fb8</span>, <span class="number">0x4665517f</span>,</span><br><span class="line">    <span class="number">0x9d5eea04</span>, <span class="number">0x018c355d</span>, <span class="number">0xfa877473</span>, <span class="number">0xfb0b412e</span>, <span class="number">0xb3671d5a</span>, <span class="number">0x92dbd252</span>,</span><br><span class="line">    <span class="number">0xe9105633</span>, <span class="number">0x6dd64713</span>, <span class="number">0x9ad7618c</span>, <span class="number">0x37a10c7a</span>, <span class="number">0x59f8148e</span>, <span class="number">0xeb133c89</span>,</span><br><span class="line">    <span class="number">0xcea927ee</span>, <span class="number">0xb761c935</span>, <span class="number">0xe11ce5ed</span>, <span class="number">0x7a47b13c</span>, <span class="number">0x9cd2df59</span>, <span class="number">0x55f2733f</span>,</span><br><span class="line">    <span class="number">0x1814ce79</span>, <span class="number">0x73c737bf</span>, <span class="number">0x53f7cdea</span>, <span class="number">0x5ffdaa5b</span>, <span class="number">0xdf3d6f14</span>, <span class="number">0x7844db86</span>,</span><br><span class="line">    <span class="number">0xcaaff381</span>, <span class="number">0xb968c43e</span>, <span class="number">0x3824342c</span>, <span class="number">0xc2a3405f</span>, <span class="number">0x161dc372</span>, <span class="number">0xbce2250c</span>,</span><br><span class="line">    <span class="number">0x283c498b</span>, <span class="number">0xff0d9541</span>, <span class="number">0x39a80171</span>, <span class="number">0x080cb3de</span>, <span class="number">0xd8b4e49c</span>, <span class="number">0x6456c190</span>,</span><br><span class="line">    <span class="number">0x7bcb8461</span>, <span class="number">0xd532b670</span>, <span class="number">0x486c5c74</span>, <span class="number">0xd0b85742</span> };</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rotr32(value, shift) ((value &gt;&gt; shift) ^ (value &lt;&lt; (32 - shift)))</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">AES_KeyInit</span><span class="params">(<span class="type">uint8_t</span>* key, AES_Key* aes_key, <span class="type">size_t</span> bits)</span> </span>{</span><br><span class="line">    <span class="type">uint32_t</span> Rcon[<span class="number">10</span>] = { <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>,</span><br><span class="line">                         <span class="number">0x20</span>, <span class="number">0x40</span>, <span class="number">0x80</span>, <span class="number">0x1B</span>, <span class="number">0x36</span> };  <span class="comment">//轮常数</span></span><br><span class="line">    <span class="type">uint32_t</span> nr = <span class="number">10</span> + (bits - <span class="number">128</span>) / <span class="number">32</span>;                <span class="comment">//加密轮数 Nr</span></span><br><span class="line">    <span class="type">uint32_t</span> nk = bits / <span class="number">32</span>;                             <span class="comment">//密钥字数 Nk</span></span><br><span class="line">    <span class="type">uint32_t</span> tmp, tmp1;</span><br><span class="line">    aes_key-&gt;nr = nr;</span><br><span class="line">    <span class="comment">//-----------malloc-------------</span></span><br><span class="line">    <span class="type">uint32_t</span>* w = (<span class="type">uint32_t</span>*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">uint32_t</span>) * <span class="number">4</span> * (nr + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">if</span> (w == (<span class="type">void</span>*)<span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">uint32_t</span>* d = (<span class="type">uint32_t</span>*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">uint32_t</span>) * <span class="number">4</span> * (nr + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">if</span> (d == (<span class="type">void</span>*)<span class="number">0</span>) {</span><br><span class="line">        <span class="built_in">free</span>(d);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//--------------Load as BigEndian---------------</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nk; i++) {<span class="comment">//将总的bits，每32个（四个字节）分一组，每一组用大端序来进行表示</span></span><br><span class="line">        w[i] = (key[<span class="number">4</span> * i + <span class="number">0</span>] &lt;&lt; <span class="number">24</span>) | (key[<span class="number">4</span> * i + <span class="number">1</span>] &lt;&lt; <span class="number">16</span>) |</span><br><span class="line">            (key[<span class="number">4</span> * i + <span class="number">2</span>] &lt;&lt; <span class="number">8</span>) | (key[<span class="number">4</span> * i + <span class="number">3</span>]);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//------------KeyExpand-----------------</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = nk; i &lt; <span class="number">4</span> * (nr + <span class="number">1</span>); i++) {</span><br><span class="line">        tmp = w[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (i % nk == <span class="number">0</span>) {</span><br><span class="line">            <span class="comment">/* tmp = SubWord(RotWord(w[i-1])) */</span></span><br><span class="line">            tmp1 = tmp;</span><br><span class="line">            tmp = Sbox[(tmp1 &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>];</span><br><span class="line">            tmp |= Sbox[(tmp1 &gt;&gt; <span class="number">0</span>) &amp; <span class="number">0xFF</span>] &lt;&lt; <span class="number">8</span>;</span><br><span class="line">            tmp |= Sbox[(tmp1 &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>] &lt;&lt; <span class="number">16</span>;</span><br><span class="line">            tmp |= (Sbox[(tmp1 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>] ^ Rcon[i / nk - <span class="number">1</span>]) &lt;&lt; <span class="number">24</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nk &gt; <span class="number">6</span> &amp;&amp; i % nk == <span class="number">4</span>) {</span><br><span class="line">            <span class="comment">/* temp = SubWord(w[i-1]) */</span></span><br><span class="line">            tmp1 = tmp;</span><br><span class="line">            tmp = Sbox[(tmp1 &gt;&gt; <span class="number">0</span>) &amp; <span class="number">0xFF</span>];</span><br><span class="line">            tmp |= Sbox[(tmp1 &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>] &lt;&lt; <span class="number">8</span>;</span><br><span class="line">            tmp |= Sbox[(tmp1 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>] &lt;&lt; <span class="number">16</span>;</span><br><span class="line">            tmp |= Sbox[(tmp1 &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>] &lt;&lt; <span class="number">24</span>;</span><br><span class="line">        }</span><br><span class="line">        w[i] = w[i - nk] ^ tmp;</span><br><span class="line">    }</span><br><span class="line">    aes_key-&gt;ek = w;</span><br><span class="line">    <span class="comment">//------------TransKey-----------</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) {</span><br><span class="line">        d[i] = w[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">4</span>; i &lt; <span class="number">4</span> * nr; i++) {</span><br><span class="line">        <span class="comment">//-----------MixCol IV-----------</span></span><br><span class="line">        d[i] = TD[Sbox[(w[i] &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>]];</span><br><span class="line">        tmp = TD[Sbox[(w[i] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>]];</span><br><span class="line">        d[i] ^= <span class="built_in">rotr32</span>(tmp, <span class="number">8</span>);</span><br><span class="line">        tmp = TD[Sbox[(w[i] &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>]];</span><br><span class="line">        d[i] ^= <span class="built_in">rotr32</span>(tmp, <span class="number">16</span>);</span><br><span class="line">        tmp = TD[Sbox[(w[i] &gt;&gt; <span class="number">0</span>) &amp; <span class="number">0xFF</span>]];</span><br><span class="line">        d[i] ^= <span class="built_in">rotr32</span>(tmp, <span class="number">24</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) {</span><br><span class="line">        d[<span class="number">4</span> * nr + i] = w[<span class="number">4</span> * nr + i];</span><br><span class="line">    }</span><br><span class="line">    aes_key-&gt;dk = d;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AES_KeyDelete</span><span class="params">(AES_Key aes_key)</span> </span>{</span><br><span class="line">    <span class="built_in">free</span>(aes_key.ek);</span><br><span class="line">    <span class="built_in">free</span>(aes_key.dk);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AES_Encrypt</span><span class="params">(<span class="type">uint8_t</span>* plaintext, <span class="type">uint8_t</span>* ciphertext, AES_Key aes_key)</span> </span>{</span><br><span class="line">    <span class="type">uint32_t</span> s[<span class="number">4</span>];</span><br><span class="line">    <span class="type">uint32_t</span> t[<span class="number">4</span>];</span><br><span class="line">    <span class="type">uint32_t</span> tmp;</span><br><span class="line">    <span class="comment">//------------Load as BigEndian------------------</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) {</span><br><span class="line">        s[i] = (plaintext[<span class="number">4</span> * i + <span class="number">0</span>] &lt;&lt; <span class="number">24</span>) | (plaintext[<span class="number">4</span> * i + <span class="number">1</span>] &lt;&lt; <span class="number">16</span>) |</span><br><span class="line">            (plaintext[<span class="number">4</span> * i + <span class="number">2</span>] &lt;&lt; <span class="number">8</span>) | (plaintext[<span class="number">4</span> * i + <span class="number">3</span>]);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//----------------AddRoundKey----------------</span></span><br><span class="line">    s[<span class="number">0</span>] ^= aes_key.ek[<span class="number">0</span>];</span><br><span class="line">    s[<span class="number">1</span>] ^= aes_key.ek[<span class="number">1</span>];</span><br><span class="line">    s[<span class="number">2</span>] ^= aes_key.ek[<span class="number">2</span>];</span><br><span class="line">    s[<span class="number">3</span>] ^= aes_key.ek[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; aes_key.nr; i++) {</span><br><span class="line">        <span class="comment">//-------ShiftRow + SubByte + MixCol-------------</span></span><br><span class="line">        <span class="comment">// t0</span></span><br><span class="line">        t[<span class="number">0</span>] = TE[(s[<span class="number">0</span>] &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>];</span><br><span class="line">        tmp = TE[(s[<span class="number">1</span>] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>];</span><br><span class="line">        t[<span class="number">0</span>] ^= <span class="built_in">rotr32</span>(tmp, <span class="number">8</span>);</span><br><span class="line">        tmp = TE[(s[<span class="number">2</span>] &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>];</span><br><span class="line">        t[<span class="number">0</span>] ^= <span class="built_in">rotr32</span>(tmp, <span class="number">16</span>);</span><br><span class="line">        tmp = TE[(s[<span class="number">3</span>] &gt;&gt; <span class="number">0</span>) &amp; <span class="number">0xFF</span>];</span><br><span class="line">        t[<span class="number">0</span>] ^= <span class="built_in">rotr32</span>(tmp, <span class="number">24</span>);</span><br><span class="line">        <span class="comment">// t1</span></span><br><span class="line">        t[<span class="number">1</span>] = TE[(s[<span class="number">1</span>] &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>];</span><br><span class="line">        tmp = TE[(s[<span class="number">2</span>] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>];</span><br><span class="line">        t[<span class="number">1</span>] ^= <span class="built_in">rotr32</span>(tmp, <span class="number">8</span>);</span><br><span class="line">        tmp = TE[(s[<span class="number">3</span>] &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>];</span><br><span class="line">        t[<span class="number">1</span>] ^= <span class="built_in">rotr32</span>(tmp, <span class="number">16</span>);</span><br><span class="line">        tmp = TE[(s[<span class="number">0</span>] &gt;&gt; <span class="number">0</span>) &amp; <span class="number">0xFF</span>];</span><br><span class="line">        t[<span class="number">1</span>] ^= <span class="built_in">rotr32</span>(tmp, <span class="number">24</span>);</span><br><span class="line">        <span class="comment">// t2</span></span><br><span class="line">        t[<span class="number">2</span>] = TE[(s[<span class="number">2</span>] &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>];</span><br><span class="line">        tmp = TE[(s[<span class="number">3</span>] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>];</span><br><span class="line">        t[<span class="number">2</span>] ^= <span class="built_in">rotr32</span>(tmp, <span class="number">8</span>);</span><br><span class="line">        tmp = TE[(s[<span class="number">0</span>] &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>];</span><br><span class="line">        t[<span class="number">2</span>] ^= <span class="built_in">rotr32</span>(tmp, <span class="number">16</span>);</span><br><span class="line">        tmp = TE[(s[<span class="number">1</span>] &gt;&gt; <span class="number">0</span>) &amp; <span class="number">0xFF</span>];</span><br><span class="line">        t[<span class="number">2</span>] ^= <span class="built_in">rotr32</span>(tmp, <span class="number">24</span>);</span><br><span class="line">        <span class="comment">// t3</span></span><br><span class="line">        t[<span class="number">3</span>] = TE[(s[<span class="number">3</span>] &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>];</span><br><span class="line">        tmp = TE[(s[<span class="number">0</span>] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>];</span><br><span class="line">        t[<span class="number">3</span>] ^= <span class="built_in">rotr32</span>(tmp, <span class="number">8</span>);</span><br><span class="line">        tmp = TE[(s[<span class="number">1</span>] &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>];</span><br><span class="line">        t[<span class="number">3</span>] ^= <span class="built_in">rotr32</span>(tmp, <span class="number">16</span>);</span><br><span class="line">        tmp = TE[(s[<span class="number">2</span>] &gt;&gt; <span class="number">0</span>) &amp; <span class="number">0xFF</span>];</span><br><span class="line">        t[<span class="number">3</span>] ^= <span class="built_in">rotr32</span>(tmp, <span class="number">24</span>);</span><br><span class="line">        <span class="comment">//-------------AddRoundKey---------------</span></span><br><span class="line">        s[<span class="number">0</span>] = t[<span class="number">0</span>] ^ aes_key.ek[<span class="number">4</span> * i + <span class="number">0</span>];</span><br><span class="line">        s[<span class="number">1</span>] = t[<span class="number">1</span>] ^ aes_key.ek[<span class="number">4</span> * i + <span class="number">1</span>];</span><br><span class="line">        s[<span class="number">2</span>] = t[<span class="number">2</span>] ^ aes_key.ek[<span class="number">4</span> * i + <span class="number">2</span>];</span><br><span class="line">        s[<span class="number">3</span>] = t[<span class="number">3</span>] ^ aes_key.ek[<span class="number">4</span> * i + <span class="number">3</span>];</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//------------ShiftRow + SubByte-----------</span></span><br><span class="line">    <span class="comment">// t0</span></span><br><span class="line">    t[<span class="number">0</span>] = Sbox[(s[<span class="number">0</span>] &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>] &lt;&lt; <span class="number">24</span>;</span><br><span class="line">    t[<span class="number">0</span>] |= Sbox[(s[<span class="number">1</span>] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>] &lt;&lt; <span class="number">16</span>;</span><br><span class="line">    t[<span class="number">0</span>] |= Sbox[(s[<span class="number">2</span>] &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>] &lt;&lt; <span class="number">8</span>;</span><br><span class="line">    t[<span class="number">0</span>] |= Sbox[(s[<span class="number">3</span>] &gt;&gt; <span class="number">0</span>) &amp; <span class="number">0xFF</span>] &lt;&lt; <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// t1</span></span><br><span class="line">    t[<span class="number">1</span>] = Sbox[(s[<span class="number">1</span>] &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>] &lt;&lt; <span class="number">24</span>;</span><br><span class="line">    t[<span class="number">1</span>] |= Sbox[(s[<span class="number">2</span>] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>] &lt;&lt; <span class="number">16</span>;</span><br><span class="line">    t[<span class="number">1</span>] |= Sbox[(s[<span class="number">3</span>] &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>] &lt;&lt; <span class="number">8</span>;</span><br><span class="line">    t[<span class="number">1</span>] |= Sbox[(s[<span class="number">0</span>] &gt;&gt; <span class="number">0</span>) &amp; <span class="number">0xFF</span>] &lt;&lt; <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// t2</span></span><br><span class="line">    t[<span class="number">2</span>] = Sbox[(s[<span class="number">2</span>] &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>] &lt;&lt; <span class="number">24</span>;</span><br><span class="line">    t[<span class="number">2</span>] |= Sbox[(s[<span class="number">3</span>] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>] &lt;&lt; <span class="number">16</span>;</span><br><span class="line">    t[<span class="number">2</span>] |= Sbox[(s[<span class="number">0</span>] &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>] &lt;&lt; <span class="number">8</span>;</span><br><span class="line">    t[<span class="number">2</span>] |= Sbox[(s[<span class="number">1</span>] &gt;&gt; <span class="number">0</span>) &amp; <span class="number">0xFF</span>] &lt;&lt; <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// t3</span></span><br><span class="line">    t[<span class="number">3</span>] = Sbox[(s[<span class="number">3</span>] &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>] &lt;&lt; <span class="number">24</span>;</span><br><span class="line">    t[<span class="number">3</span>] |= Sbox[(s[<span class="number">0</span>] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>] &lt;&lt; <span class="number">16</span>;</span><br><span class="line">    t[<span class="number">3</span>] |= Sbox[(s[<span class="number">1</span>] &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>] &lt;&lt; <span class="number">8</span>;</span><br><span class="line">    t[<span class="number">3</span>] |= Sbox[(s[<span class="number">2</span>] &gt;&gt; <span class="number">0</span>) &amp; <span class="number">0xFF</span>] &lt;&lt; <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//------------AddRoundKey-------------</span></span><br><span class="line">    s[<span class="number">0</span>] = t[<span class="number">0</span>] ^ aes_key.ek[<span class="number">4</span> * aes_key.nr + <span class="number">0</span>];</span><br><span class="line">    s[<span class="number">1</span>] = t[<span class="number">1</span>] ^ aes_key.ek[<span class="number">4</span> * aes_key.nr + <span class="number">1</span>];</span><br><span class="line">    s[<span class="number">2</span>] = t[<span class="number">2</span>] ^ aes_key.ek[<span class="number">4</span> * aes_key.nr + <span class="number">2</span>];</span><br><span class="line">    s[<span class="number">3</span>] = t[<span class="number">3</span>] ^ aes_key.ek[<span class="number">4</span> * aes_key.nr + <span class="number">3</span>];</span><br><span class="line">    <span class="comment">//-----------Store as BigEndian--------------</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) {</span><br><span class="line">        ciphertext[<span class="number">4</span> * i + <span class="number">0</span>] = (s[i] &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        ciphertext[<span class="number">4</span> * i + <span class="number">1</span>] = (s[i] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        ciphertext[<span class="number">4</span> * i + <span class="number">2</span>] = (s[i] &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        ciphertext[<span class="number">4</span> * i + <span class="number">3</span>] = (s[i] &gt;&gt; <span class="number">0</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AES_Decrypt</span><span class="params">(<span class="type">uint8_t</span>* ciphertext, <span class="type">uint8_t</span>* plaintext, AES_Key aes_key)</span> </span>{</span><br><span class="line">    <span class="type">uint32_t</span> s[<span class="number">4</span>];</span><br><span class="line">    <span class="type">uint32_t</span> t[<span class="number">4</span>];</span><br><span class="line">    <span class="type">uint32_t</span> tmp;</span><br><span class="line">    <span class="comment">//------------Load as BigEndian------------------</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) {</span><br><span class="line">        s[i] = (ciphertext[<span class="number">4</span> * i + <span class="number">0</span>] &lt;&lt; <span class="number">24</span>) | (ciphertext[<span class="number">4</span> * i + <span class="number">1</span>] &lt;&lt; <span class="number">16</span>) |</span><br><span class="line">            (ciphertext[<span class="number">4</span> * i + <span class="number">2</span>] &lt;&lt; <span class="number">8</span>) | (ciphertext[<span class="number">4</span> * i + <span class="number">3</span>]);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//----------------AddRoundKey----------------</span></span><br><span class="line">    s[<span class="number">0</span>] ^= aes_key.dk[<span class="number">4</span> * aes_key.nr + <span class="number">0</span>];</span><br><span class="line">    s[<span class="number">1</span>] ^= aes_key.dk[<span class="number">4</span> * aes_key.nr + <span class="number">1</span>];</span><br><span class="line">    s[<span class="number">2</span>] ^= aes_key.dk[<span class="number">4</span> * aes_key.nr + <span class="number">2</span>];</span><br><span class="line">    s[<span class="number">3</span>] ^= aes_key.dk[<span class="number">4</span> * aes_key.nr + <span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = aes_key.nr - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) {</span><br><span class="line">        <span class="comment">//-------ShiftRow IV + SubByte IV + MixCol IV-------------</span></span><br><span class="line">        <span class="comment">// t0</span></span><br><span class="line">        t[<span class="number">0</span>] = TD[(s[<span class="number">0</span>] &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>];</span><br><span class="line">        tmp = TD[(s[<span class="number">3</span>] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>];</span><br><span class="line">        t[<span class="number">0</span>] ^= <span class="built_in">rotr32</span>(tmp, <span class="number">8</span>);</span><br><span class="line">        tmp = TD[(s[<span class="number">2</span>] &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>];</span><br><span class="line">        t[<span class="number">0</span>] ^= <span class="built_in">rotr32</span>(tmp, <span class="number">16</span>);</span><br><span class="line">        tmp = TD[(s[<span class="number">1</span>] &gt;&gt; <span class="number">0</span>) &amp; <span class="number">0xFF</span>];</span><br><span class="line">        t[<span class="number">0</span>] ^= <span class="built_in">rotr32</span>(tmp, <span class="number">24</span>);</span><br><span class="line">        <span class="comment">// t1</span></span><br><span class="line">        t[<span class="number">1</span>] = TD[(s[<span class="number">1</span>] &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>];</span><br><span class="line">        tmp = TD[(s[<span class="number">0</span>] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>];</span><br><span class="line">        t[<span class="number">1</span>] ^= <span class="built_in">rotr32</span>(tmp, <span class="number">8</span>);</span><br><span class="line">        tmp = TD[(s[<span class="number">3</span>] &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>];</span><br><span class="line">        t[<span class="number">1</span>] ^= <span class="built_in">rotr32</span>(tmp, <span class="number">16</span>);</span><br><span class="line">        tmp = TD[(s[<span class="number">2</span>] &gt;&gt; <span class="number">0</span>) &amp; <span class="number">0xFF</span>];</span><br><span class="line">        t[<span class="number">1</span>] ^= <span class="built_in">rotr32</span>(tmp, <span class="number">24</span>);</span><br><span class="line">        <span class="comment">// t2</span></span><br><span class="line">        t[<span class="number">2</span>] = TD[(s[<span class="number">2</span>] &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>];</span><br><span class="line">        tmp = TD[(s[<span class="number">1</span>] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>];</span><br><span class="line">        t[<span class="number">2</span>] ^= <span class="built_in">rotr32</span>(tmp, <span class="number">8</span>);</span><br><span class="line">        tmp = TD[(s[<span class="number">0</span>] &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>];</span><br><span class="line">        t[<span class="number">2</span>] ^= <span class="built_in">rotr32</span>(tmp, <span class="number">16</span>);</span><br><span class="line">        tmp = TD[(s[<span class="number">3</span>] &gt;&gt; <span class="number">0</span>) &amp; <span class="number">0xFF</span>];</span><br><span class="line">        t[<span class="number">2</span>] ^= <span class="built_in">rotr32</span>(tmp, <span class="number">24</span>);</span><br><span class="line">        <span class="comment">// t3</span></span><br><span class="line">        t[<span class="number">3</span>] = TD[(s[<span class="number">3</span>] &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>];</span><br><span class="line">        tmp = TD[(s[<span class="number">2</span>] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>];</span><br><span class="line">        t[<span class="number">3</span>] ^= <span class="built_in">rotr32</span>(tmp, <span class="number">8</span>);</span><br><span class="line">        tmp = TD[(s[<span class="number">1</span>] &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>];</span><br><span class="line">        t[<span class="number">3</span>] ^= <span class="built_in">rotr32</span>(tmp, <span class="number">16</span>);</span><br><span class="line">        tmp = TD[(s[<span class="number">0</span>] &gt;&gt; <span class="number">0</span>) &amp; <span class="number">0xFF</span>];</span><br><span class="line">        t[<span class="number">3</span>] ^= <span class="built_in">rotr32</span>(tmp, <span class="number">24</span>);</span><br><span class="line">        <span class="comment">//-------------AddRoundKey---------------</span></span><br><span class="line">        s[<span class="number">0</span>] = t[<span class="number">0</span>] ^ aes_key.dk[<span class="number">4</span> * i + <span class="number">0</span>];</span><br><span class="line">        s[<span class="number">1</span>] = t[<span class="number">1</span>] ^ aes_key.dk[<span class="number">4</span> * i + <span class="number">1</span>];</span><br><span class="line">        s[<span class="number">2</span>] = t[<span class="number">2</span>] ^ aes_key.dk[<span class="number">4</span> * i + <span class="number">2</span>];</span><br><span class="line">        s[<span class="number">3</span>] = t[<span class="number">3</span>] ^ aes_key.dk[<span class="number">4</span> * i + <span class="number">3</span>];</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//------------ShiftRow + SubByte-----------</span></span><br><span class="line">    <span class="comment">// t0</span></span><br><span class="line">    t[<span class="number">0</span>] = SboxIV[(s[<span class="number">0</span>] &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>] &lt;&lt; <span class="number">24</span>;</span><br><span class="line">    t[<span class="number">0</span>] |= SboxIV[(s[<span class="number">3</span>] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>] &lt;&lt; <span class="number">16</span>;</span><br><span class="line">    t[<span class="number">0</span>] |= SboxIV[(s[<span class="number">2</span>] &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>] &lt;&lt; <span class="number">8</span>;</span><br><span class="line">    t[<span class="number">0</span>] |= SboxIV[(s[<span class="number">1</span>] &gt;&gt; <span class="number">0</span>) &amp; <span class="number">0xFF</span>] &lt;&lt; <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// t1</span></span><br><span class="line">    t[<span class="number">1</span>] = SboxIV[(s[<span class="number">1</span>] &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>] &lt;&lt; <span class="number">24</span>;</span><br><span class="line">    t[<span class="number">1</span>] |= SboxIV[(s[<span class="number">0</span>] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>] &lt;&lt; <span class="number">16</span>;</span><br><span class="line">    t[<span class="number">1</span>] |= SboxIV[(s[<span class="number">3</span>] &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>] &lt;&lt; <span class="number">8</span>;</span><br><span class="line">    t[<span class="number">1</span>] |= SboxIV[(s[<span class="number">2</span>] &gt;&gt; <span class="number">0</span>) &amp; <span class="number">0xFF</span>] &lt;&lt; <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// t2</span></span><br><span class="line">    t[<span class="number">2</span>] = SboxIV[(s[<span class="number">2</span>] &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>] &lt;&lt; <span class="number">24</span>;</span><br><span class="line">    t[<span class="number">2</span>] |= SboxIV[(s[<span class="number">1</span>] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>] &lt;&lt; <span class="number">16</span>;</span><br><span class="line">    t[<span class="number">2</span>] |= SboxIV[(s[<span class="number">0</span>] &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>] &lt;&lt; <span class="number">8</span>;</span><br><span class="line">    t[<span class="number">2</span>] |= SboxIV[(s[<span class="number">3</span>] &gt;&gt; <span class="number">0</span>) &amp; <span class="number">0xFF</span>] &lt;&lt; <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// t3</span></span><br><span class="line">    t[<span class="number">3</span>] = SboxIV[(s[<span class="number">3</span>] &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>] &lt;&lt; <span class="number">24</span>;</span><br><span class="line">    t[<span class="number">3</span>] |= SboxIV[(s[<span class="number">2</span>] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>] &lt;&lt; <span class="number">16</span>;</span><br><span class="line">    t[<span class="number">3</span>] |= SboxIV[(s[<span class="number">1</span>] &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>] &lt;&lt; <span class="number">8</span>;</span><br><span class="line">    t[<span class="number">3</span>] |= SboxIV[(s[<span class="number">0</span>] &gt;&gt; <span class="number">0</span>) &amp; <span class="number">0xFF</span>] &lt;&lt; <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//------------AddRoundKey-------------</span></span><br><span class="line">    s[<span class="number">0</span>] = t[<span class="number">0</span>] ^ aes_key.dk[<span class="number">0</span>];</span><br><span class="line">    s[<span class="number">1</span>] = t[<span class="number">1</span>] ^ aes_key.dk[<span class="number">1</span>];</span><br><span class="line">    s[<span class="number">2</span>] = t[<span class="number">2</span>] ^ aes_key.dk[<span class="number">2</span>];</span><br><span class="line">    s[<span class="number">3</span>] = t[<span class="number">3</span>] ^ aes_key.dk[<span class="number">3</span>];</span><br><span class="line">    <span class="comment">//-----------Store as BigEndian--------------</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) {</span><br><span class="line">        plaintext[<span class="number">4</span> * i + <span class="number">0</span>] = (s[i] &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        plaintext[<span class="number">4</span> * i + <span class="number">1</span>] = (s[i] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        plaintext[<span class="number">4</span> * i + <span class="number">2</span>] = (s[i] &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        plaintext[<span class="number">4</span> * i + <span class="number">3</span>] = (s[i] &gt;&gt; <span class="number">0</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    AES_Key aes_key;</span><br><span class="line">    <span class="comment">// 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17</span></span><br><span class="line">    <span class="comment">// 18 19 1a 1b 1c 1d 1e 1f</span></span><br><span class="line">    <span class="type">uint8_t</span> key[<span class="number">256</span> / <span class="number">8</span>] = { <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x07</span>,</span><br><span class="line">                            <span class="number">0x08</span>, <span class="number">0x09</span>, <span class="number">0x0a</span>, <span class="number">0x0b</span>, <span class="number">0x0c</span>, <span class="number">0x0d</span>, <span class="number">0x0e</span>, <span class="number">0x0f</span>,</span><br><span class="line">                            <span class="number">0x10</span>, <span class="number">0x11</span>, <span class="number">0x12</span>, <span class="number">0x13</span>, <span class="number">0x14</span>, <span class="number">0x15</span>, <span class="number">0x16</span>, <span class="number">0x17</span>,</span><br><span class="line">                            <span class="number">0x18</span>, <span class="number">0x19</span>, <span class="number">0x1a</span>, <span class="number">0x1b</span>, <span class="number">0x1c</span>, <span class="number">0x1d</span>, <span class="number">0x1e</span>, <span class="number">0x1f</span> };</span><br><span class="line">    <span class="comment">// 00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff</span></span><br><span class="line">    <span class="type">uint8_t</span> plaintext[<span class="number">16</span>] = { <span class="number">0x00</span>, <span class="number">0x11</span>, <span class="number">0x22</span>, <span class="number">0x33</span>, <span class="number">0x44</span>, <span class="number">0x55</span>, <span class="number">0x66</span>, <span class="number">0x77</span>,</span><br><span class="line">                             <span class="number">0x88</span>, <span class="number">0x99</span>, <span class="number">0xaa</span>, <span class="number">0xbb</span>, <span class="number">0xcc</span>, <span class="number">0xdd</span>, <span class="number">0xee</span>, <span class="number">0xff</span> };</span><br><span class="line">    <span class="type">uint8_t</span> ciphertext[<span class="number">16</span>];</span><br><span class="line">    <span class="comment">//-----------AES 128-------------------</span></span><br><span class="line">    <span class="type">int</span> success = <span class="built_in">AES_KeyInit</span>(key, &amp;aes_key, <span class="number">128</span>);</span><br><span class="line">    <span class="keyword">if</span> (success) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"-----------AES 128-------------\n"</span>);</span><br><span class="line">        <span class="comment">// 69 c4 e0 d8 6a 7b 04 30 d8 cd b7 80 70 b4 c5 5a</span></span><br><span class="line">        <span class="built_in">AES_Encrypt</span>(plaintext, ciphertext, aes_key);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%02x "</span>, ciphertext[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="comment">// 00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff</span></span><br><span class="line">        <span class="built_in">AES_Decrypt</span>(ciphertext, plaintext, aes_key);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%02x "</span>, plaintext[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="built_in">AES_KeyDelete</span>(aes_key);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//-----------AES 196-------------------</span></span><br><span class="line">    success = <span class="built_in">AES_KeyInit</span>(key, &amp;aes_key, <span class="number">196</span>);</span><br><span class="line">    <span class="keyword">if</span> (success) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"-----------AES 196-------------\n"</span>);</span><br><span class="line">        <span class="comment">// dd a9 7c a4 86 4c df e0 6e af 70 a0 ec 0d 71 91</span></span><br><span class="line">        <span class="built_in">AES_Encrypt</span>(plaintext, ciphertext, aes_key);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%02x "</span>, ciphertext[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="comment">// 00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff</span></span><br><span class="line">        <span class="built_in">AES_Decrypt</span>(ciphertext, plaintext, aes_key);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%02x "</span>, plaintext[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="built_in">AES_KeyDelete</span>(aes_key);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//------------AES 256-----------------</span></span><br><span class="line">    success = <span class="built_in">AES_KeyInit</span>(key, &amp;aes_key, <span class="number">256</span>);</span><br><span class="line">    <span class="keyword">if</span> (success) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"-----------AES 256-------------\n"</span>);</span><br><span class="line">        <span class="comment">// 8e a2 b7 ca 51 67 45 bf ea fc 49 90 4b 49 60 89</span></span><br><span class="line">        <span class="built_in">AES_Encrypt</span>(plaintext, ciphertext, aes_key);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%02x "</span>, ciphertext[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="comment">// 00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff</span></span><br><span class="line">        <span class="built_in">AES_Decrypt</span>(ciphertext, plaintext, aes_key);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%02x "</span>, plaintext[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="built_in">AES_KeyDelete</span>(aes_key);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h2><p>加解密密钥在查表法aes中不同</p><p>逆向时拿到其中一个可以推导另一个</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dk<span class="section">[0]</span>  = ek<span class="section">[10]</span><span class="comment">;                     // 最后一轮密钥直接用</span></span><br><span class="line">dk<span class="section">[10]</span> = ek<span class="section">[0]</span><span class="comment">;                      // 第一轮密钥直接用</span></span><br><span class="line">dk<span class="section">[i]</span>  = InvMixColumns(ek<span class="section">[10 - i]</span>)<span class="comment">;  // 中间轮要过一次逆MixColumns</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不需要研究透算法逻辑，只需要知道大致原理和遇到时能识别出这是aes变种就可以了</p><h1 id="白盒aes"><a href="#白盒aes" class="headerlink" title="白盒aes"></a>白盒aes</h1><p>白盒aes算是在逆向中最常见到的了，特点是隐藏密钥。</p><p>查表法 AES 提供了“把轮操作变成查表”的思路，白盒 AES 则利用这个查表方法隐藏密钥，</p><p>白盒 AES 和 “查表法 AES” 算法是同一回事，可以把白盒AES看成查表AES的加强版(把密钥也混淆进表里了)，一些密码学库会在 AES_init 的时候预处理并展开 key；如果 key 是字面量，还可能在编译时进行常量计算。这样编译后的可执行文件中就没有明文 key 了。</p><h2 id="DFA攻击"><a href="#DFA攻击" class="headerlink" title="DFA攻击"></a>DFA攻击</h2><p>白盒aes最主要的破解方式就是dfa攻击</p><p>我们需要的攻击条件：</p><ul><li><p>我们可以反汇编出源代码并调试它</p></li><li><p>pip install phoenixAES</p></li><li><p>编译这里面的<a href="https://github.com/SideChannelMarvels/Stark">GitHub - SideChannelMarvels/Stark: Repository of small utilities related to key recovery</a>的aes_keyschedule.c</p></li></ul><h2 id="原理：-1"><a href="#原理：-1" class="headerlink" title="原理："></a>原理：</h2><p>在白盒攻击模型中，我们可以通过DBI工具（比如Frida），Debuggger（比如IDA），修改二进制文件本身 （SO patch）来实现对 中一个字节的更改，这可以称为引导、诱发一个错误。 因此差分故障攻击或差分错误攻击都是DFA合适的名字，下面修改明文中中第一个字节的值</p><p>首先是初始轮密钥加，错误限于这一个字节</p><p><img data-src="/images/aes/DFA1.png" alt="DFA1"></p><p>然后是第一轮的字节替换，错误限于这一个字节</p><p><img data-src="/images/aes/DFA2.png" alt="DFA2"></p><p>然后是第一轮的循环左移，因为是第一行，所以没动。</p><p><img data-src="/images/aes/DFA3.png" alt="DFA3"></p><p>然后是第一轮的列混淆步骤，结果的第m行第n列的值等于矩阵A的第m行的元素与矩阵B的第n列对应元素乘积之和，因此结果中第一列的每一个元素都受到矩阵B（即下图左边）第一列中每个元素的影响。因而，一个字节的错误被扩散到了一整列。或者说，正常情况和故障情况在第一轮列混淆结束后，有四个字节的值不同。</p><p><img data-src="/images/aes/DFA4.png" alt="DFA4"></p><p>然后是第一轮的轮密钥加，它只作用用当前字节，不会将差异扩散出去。</p><p><img data-src="/images/aes/DFA5.png" alt="DFA5"></p><p>可以看到，在一轮循环后，一个字节的故障，被扩散到了四个字节上。继续第二轮。<br>第二轮的字节替换</p><p><img data-src="/images/aes/DFA6.png" alt="DFA6"></p><p>第二轮的循环左移，需要注意到，虽然差异还是四个字节，但被扩散到不同的四列去了。</p><p><img data-src="/images/aes/DFA7.png" alt="DFA7"></p><p>第二轮的列混淆，每列存在的差异扩散到整列，这导致state的全部字节都与原先有差异。</p><p><img data-src="/images/aes/DFA8.png" alt="DFA8"></p><p>所以DFA攻击就是从第9轮攻击的行移位和列混淆中间更改1个数据，创造差错点，然后从最后拿到密文来分析故障结果(有四个差错点)，由于aes一次可加密16个字节，所以可以得出16种不同的故障情况，那我们就可以通过数学间的关系，把密钥反解出来</p><h2 id="攻击实现"><a href="#攻击实现" class="headerlink" title="攻击实现"></a>攻击实现</h2><p>在调试时更改第九轮对应字节即可，明文要求输入的话直接全输入\x00，在第9轮进行故障注入，假设正常明文(无故障)加密结果为0x8df4e9aac5c7573a27d8d055d6e4d64b</p><p>注入时把第一个字节改为0x10,第十轮结束后结果：</p><p><strong>8d</strong> f4 e9 aa c5 c7 57 <strong>3a</strong> 27 d8 <strong>d0</strong> 55 d6 <strong>e4</strong> d6 4b<br><strong>da</strong> f4 e9 aa c5 c7 57 <strong>c9</strong> 27 d8 <strong>53</strong> 55 d6 <strong>37</strong> d6 4b<br>确实有4个字节不一样。以此类推，得到16个不一样的带差错的密文</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">daf4e9aac5c757c927d85355d637d64b</span><br><span class="line">47f4e9aac5c7577d27d8a655d61ed64b</span><br><span class="line">79f4e9aac5c7572a27d89855d62ad64b</span><br><span class="line">30f4e9aac5c7570b27d86555d6a5d64b</span><br><span class="line">8d7de9aac8c7573a27d8d09ed6e4be4b</span><br><span class="line">8d5ce9aa43c7573a27d8d04cd6e4054b</span><br><span class="line">8d0de9aaddc7573a27d8d060d6e4234b</span><br><span class="line">8dabe9aacac7573a27d8d009d6e4484b</span><br><span class="line">8df48caac598573a62d8d055d6e4d636</span><br><span class="line">8df4bbaac5f4573acdd8d055d6e4d693</span><br><span class="line">8df47aaac576573ac1d8d055d6e4d61c</span><br><span class="line">8df444aac5c8573a23d8d055d6e4d6fb</span><br><span class="line">8df4e9e0c5c7b73a2768d055ade4d64b</span><br><span class="line">8df4e9f2c5c7063a27a4d055dfe4d64b</span><br><span class="line">8df4e942c5c7793a275ed05535e4d64b</span><br><span class="line">8df4e98fc5c7fa3a2778d055b3e4d64b</span><br></pre></td></tr></table></figure><p>有了这个以后我们就可以还原得到第十轮的密钥了，这里使用<a href="https://github.com/SideChannelMarvels/JeanGrey/tree/master/phoenixAES">phoenixAES</a>工具，先安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install phoenixAES</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> phoenixAES</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'tracefile'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> t:</span><br><span class="line">    t.write(<span class="string">"""</span></span><br><span class="line"><span class="string">8df4e9aac5c7573a27d8d055d6e4d64b</span></span><br><span class="line"><span class="string">daf4e9aac5c757c927d85355d637d64b</span></span><br><span class="line"><span class="string">47f4e9aac5c7577d27d8a655d61ed64b</span></span><br><span class="line"><span class="string">79f4e9aac5c7572a27d89855d62ad64b</span></span><br><span class="line"><span class="string">30f4e9aac5c7570b27d86555d6a5d64b</span></span><br><span class="line"><span class="string">8d7de9aac8c7573a27d8d09ed6e4be4b</span></span><br><span class="line"><span class="string">8d5ce9aa43c7573a27d8d04cd6e4054b</span></span><br><span class="line"><span class="string">8d0de9aaddc7573a27d8d060d6e4234b</span></span><br><span class="line"><span class="string">8dabe9aacac7573a27d8d009d6e4484b</span></span><br><span class="line"><span class="string">8df48caac598573a62d8d055d6e4d636</span></span><br><span class="line"><span class="string">8df4bbaac5f4573acdd8d055d6e4d693</span></span><br><span class="line"><span class="string">8df47aaac576573ac1d8d055d6e4d61c</span></span><br><span class="line"><span class="string">8df444aac5c8573a23d8d055d6e4d6fb</span></span><br><span class="line"><span class="string">8df4e9e0c5c7b73a2768d055ade4d64b</span></span><br><span class="line"><span class="string">8df4e9f2c5c7063a27a4d055dfe4d64b</span></span><br><span class="line"><span class="string">8df4e942c5c7793a275ed05535e4d64b</span></span><br><span class="line"><span class="string">8df4e98fc5c7fa3a2778d055b3e4d64b</span></span><br><span class="line"><span class="string">"""</span>.encode(<span class="string">'utf8'</span>))</span><br><span class="line">phoenixAES.crack_file(<span class="string">'tracefile'</span>, [], <span class="literal">True</span>, <span class="literal">False</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>一共写入了17行数据到文件，其中第一行为正确的密文，剩余16行都是故障密文，最终通过crack_file即可得到第10轮密钥：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Last round key <span class="comment">#N found:</span></span><br><span class="line">D014F9A8C9EE2589E13F0CC8B6630CA6</span><br></pre></td></tr></table></figure><h3 id="还原最初密钥："><a href="#还原最初密钥：" class="headerlink" title="还原最初密钥："></a>还原最初密钥：</h3><p>接下来用开头DFA攻击第三个工具里的aes_keyschedule.c，在本地编译后运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./aes_keyschedule 5D432583B2AA833FC22D53130FDA904C 10</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">./aes_keyschedule D014F9A8C9EE2589E13F0CC8B6630CA6 10</span><br><span class="line">K00: 2B7E151628AED2A6ABF7158809CF4F3C</span><br><span class="line">K01: A0FAFE1788542CB123A339392A6C7605</span><br><span class="line">K02: F2C295F27A96B9435935807A7359F67F</span><br><span class="line">K03: 3D80477D4716FE3E1E237E446D7A883B</span><br><span class="line">K04: EF44A541A8525B7FB671253BDB0BAD00</span><br><span class="line">K05: D4D1C6F87C839D87CAF2B8BC11F915BC</span><br><span class="line">K06: 6D88A37A110B3EFDDBF98641CA0093FD</span><br><span class="line">K07: 4E54F70E5F5FC9F384A64FB24EA6DC4F</span><br><span class="line">K08: EAD27321B58DBAD2312BF5607F8D292F</span><br><span class="line">K09: AC7766F319FADC2128D12941575C006E</span><br><span class="line">K10: D014F9A8C9EE2589E13F0CC8B6630CA6</span><br></pre></td></tr></table></figure><p>即可得到密钥为2B7E151628AED2A6ABF7158809CF4F3C</p><p>最后附上白盒aes的实现代码，有兴趣的可以自己看一看<a href="https://github.com/Nexus-TYF/Xiao-Lai-White-box-AES">GitHub - Nexus-TYF/Xiao-Lai-White-box-AES: A Xiao-Lai's white-box AES implementation.</a></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://zhuanlan.zhihu.com/p/42264499">https://zhuanlan.zhihu.com/p/42264499</a></p><p><a href="http://91fans.com.cn/post/ilikeaestwo/#gsc.tab=0">找回消失的密钥 —- DFA分析白盒AES算法 - 奋飞安全</a></p><p><a href="https://www.zskkk.cn/posts/15785/#%E8%BF%98%E5%8E%9F%E5%AF%86%E6%96%87">https://www.zskkk.cn/posts/15785/#%E8%BF%98%E5%8E%9F%E5%AF%86%E6%96%87</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h1&gt;&lt;p&gt;逆向工程中往往使用aes加密的程序不是用的查表法aes，就是用的白盒aes，让你难以分析，傻乎乎的使用aes基础算法很容易被破解&lt;/</summary>
      
    
    
    
    <category term="逆向中的密码学" scheme="http://example.com/categories/%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    <category term="对称加密题单" scheme="http://example.com/categories/%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E9%A2%98%E5%8D%95/"/>
    
    
    <category term="aes" scheme="http://example.com/tags/aes/"/>
    
  </entry>
  
  <entry>
    <title>异常处理机制-SEH</title>
    <link href="http://example.com/2025/10/09/pe%E9%80%86%E5%90%91/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6%E4%B8%8A-SEH/"/>
    <id>http://example.com/2025/10/09/pe%E9%80%86%E5%90%91/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6%E4%B8%8A-SEH/</id>
    <published>2025-10-08T16:00:00.000Z</published>
    <updated>2025-10-09T04:11:29.103Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SEH"><a href="#SEH" class="headerlink" title="SEH"></a>SEH</h1><p>结构化异常处理（SEH）是 C 的Microsoft扩展，C++用于处理某些异常代码情况（如硬件故障）正常。 尽管 Windows 和 Microsoft C++支持 SEH，但我们建议在 C++ 代码中使用 ISO 标准C++异常处理。 它使代码更具可移植性和灵活性。 但是，若要维护现有代码或特定类型的程序，仍可能需要使用 SEH。</p><h2 id="异常出现流程："><a href="#异常出现流程：" class="headerlink" title="异常出现流程："></a>异常出现流程：</h2><p><strong>首先异常被交给内核态 / 最底层**</strong></p><p>当 CPU 检测到一个错误（如无效内存访问），它会中断当前进程，并将控制权交给 Windows 内核。内核会为进程创建一个<strong>异常记录</strong>（<code>EXCEPTION_RECORD</code>），其中包含异常代码、地址等信息。然后内核会查看进程是否正在被调试。</p><ul><li><p><strong>如果进程被调试</strong>：内核将异常事件发送给调试器（<strong>第一机会异常</strong>）。调试器可以决定处理这个异常（继续执行）或不处理。</p></li><li><p><strong>如果进程未被调试，或调试器不处理</strong>：内核开始在用户态中寻找能处理这个异常的函数。</p></li></ul><p><strong>如果异常未能被处理，则在用户态等待被veh处理，若无veh，则交给seh</strong></p><p><strong>如果链式seh，veh未能处理</strong>，</p><ul><li>当进程中发生异常时,此时会调用系统的<code>kernel32!UnhandledExceptionFIlter()</code>API。</li><li>该API会运行系统的最后一个异常处理器——<strong>Top Level Exception Filter</strong>或<strong>Last Exception Filter</strong>（通常行为是弹出错误消息框、终止进程）。</li><li><code>kernel32!UnhandledExceptionFilter()</code>调用了<code>ntdll!QueryInformationProcess(ProcessDebugPort)</code>。来判断是否正在调试进程。如果正在进行调试，则将异常传递给调试器。否则系统异常处理器终止进程。</li></ul><h1 id="SEH结构体"><a href="#SEH结构体" class="headerlink" title="SEH结构体"></a>SEH结构体</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">EXCEPTION_REGISTRATION_RECORD</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">// 链表以Next成员为FFFFFFFF的结构体结束，表示链表的最后一个结点</span></span><br><span class="line">    PEXCEPTION_REGISTRATION_RECORD Next;</span><br><span class="line">    <span class="comment">// Handler：异常处理函数</span></span><br><span class="line">    PEXCEPTION_DISPOSITION Handler;</span><br><span class="line">&#125; EX</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="SEH语法"><a href="#SEH语法" class="headerlink" title="SEH语法"></a>SEH语法</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">try-except-statement ：</span><br><span class="line">  __try compound-statement __except ( filter-expression ) compound-statement</span><br><span class="line"></span><br><span class="line">try-finally-statement ：</span><br><span class="line">  __try compound-statement __finally compound-statement</span><br></pre></td></tr></table></figure><h1 id="正向实例："><a href="#正向实例：" class="headerlink" title="正向实例："></a>正向实例：</h1><h2 id="a-try-except-异常处理程序"><a href="#a-try-except-异常处理程序" class="headerlink" title="(a) __try / __except - 异常处理程序"></a>(a) <code>__try</code> / <code>__except</code> - 异常处理程序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;excpt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    __try &#123;</span><br><span class="line">        <span class="comment">// 可能会引发异常的代码</span></span><br><span class="line">        <span class="type">int</span>* p = <span class="literal">NULL</span>;</span><br><span class="line">        *p = <span class="number">42</span>; <span class="comment">// 这将引发一个访问违规异常 (EXCEPTION_ACCESS_VIOLATION)</span></span><br><span class="line">    &#125;</span><br><span class="line">    __except(<span class="built_in">GetExceptionCode</span>() == EXCEPTION_ACCESS_VIOLATION ? EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH) &#123;</span><br><span class="line">        <span class="comment">// 异常过滤器返回 EXCEPTION_EXECUTE_HANDLER 时，执行这个块</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Caught an access violation exception!\n&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里可以进行错误恢复、清理、记录日志等操作</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Program continues after handling the exception.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong><code>__try</code> 块</strong>：包含可能出错的代码。</p></li><li><p><strong><code>__except</code> 块</strong>：异常处理程序。<strong>它是否能执行取决于其括号内的“异常过滤器表达式”</strong>。</p></li><li><p><strong>异常过滤器表达式</strong>：这是一个必须返回以下三个值之一的表达式：</p><ul><li><p><code>EXCEPTION_EXECUTE_HANDLER</code> (1)： <strong>执行处理程序</strong>。系统会展开堆栈（清理 <code>__try</code> 块中已构造的局部 C++ 对象可能会成为问题），然后跳转到 <code>__except</code> 块。</p></li><li><p><code>EXCEPTION_CONTINUE_SEARCH</code> (0)： <strong>不处理</strong>。系统继续向上一个（外层）的异常处理程序寻找能处理的 <code>__except</code> 块。</p></li><li><p><code>EXCEPTION_CONTINUE_EXECUTION</code> (-1)： <strong>继续执行</strong>。从异常发生处重新开始执行。<strong>极其危险！</strong> 除非你能在过滤器里修复导致异常的问题（如虚拟内存分配），否则通常会立刻再次触发同一个异常，导致死循环。</p></li></ul></li></ul><p>其中的GetExceptionCode()函数值包含<code>EXCEPTION_ACCESS_VIOLATION</code>, <code>EXCEPTION_INT_DIVIDE_BY_ZERO</code>, <code>EXCEPTION_STACK_OVERFLOW</code>等等，对应不同出错类型</p><h2 id="b-try-finally-终止处理程序"><a href="#b-try-finally-终止处理程序" class="headerlink" title="(b) __try / __finally - 终止处理程序"></a>(b) <code>__try</code> / <code>__finally</code> - 终止处理程序</h2><p>这种结构<strong>不处理异常</strong>，而是保证无论 <code>__try</code> 块是如何退出的（正常执行完毕、<code>return</code>、<code>goto</code>、<code>break</code> 或由于异常），<code>__finally</code> 块中的代码<strong>一定会被执行</strong>。用于实现资源清理（如关闭文件、释放锁）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">HANDLE hFile = INVALID_HANDLE_VALUE;</span><br><span class="line"></span><br><span class="line">__try &#123;</span><br><span class="line">    hFile = <span class="built_in">CreateFileA</span>(<span class="string">&quot;test.txt&quot;</span>, ...);</span><br><span class="line">    <span class="keyword">if</span> (hFile == INVALID_HANDLE_VALUE) &#123;</span><br><span class="line">        __leave; <span class="comment">// 跳转到 __finally 块的另一种方式</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 对文件进行一些操作，可能会引发异常</span></span><br><span class="line">    <span class="built_in">SomeRiskyOperation</span>(hFile);</span><br><span class="line">&#125;</span><br><span class="line">__finally &#123;</span><br><span class="line">    <span class="comment">// 无论上面如何退出，这里都会执行</span></span><br><span class="line">    <span class="keyword">if</span> (hFile != INVALID_HANDLE_VALUE) &#123;</span><br><span class="line">        <span class="built_in">CloseHandle</span>(hFile);</span><br><span class="line">        hFile = INVALID_HANDLE_VALUE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行完 __finally 后，异常（如果有）会继续向外传播</span></span><br></pre></td></tr></table></figure><h1 id="逆向实战："><a href="#逆向实战：" class="headerlink" title="逆向实战："></a>逆向实战：</h1><p>注意：32位pe和64位peSEH使用方式不同，注意甄别</p><h2 id="1-32位例题："><a href="#1-32位例题：" class="headerlink" title="1.32位例题："></a>1.32位例题：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.text:00401140                 push    ebp</span><br><span class="line">.text:00401141                 mov     ebp, esp</span><br><span class="line">.text:00401143                 push    0FFFFFFFEh</span><br><span class="line">.text:00401145                 push    offset stru_403758</span><br><span class="line">.text:0040114A                 push    offset SEH_401140</span><br><span class="line">.text:0040114F                 mov     eax, large fs:0</span><br><span class="line">.text:00401155                 push    eax</span><br></pre></td></tr></table></figure><p>在使用SEH的函数汇编你会看到这样一段</p><p>第一第二行是创建函数的基本操作，这里不多解释，第三行0xFFFFFFFE叫做<code>Trylevel/</code>enclosing``</p><p><code>-1</code> (<code>0xFFFFFFFF</code>) 表示：函数中没有任何 try/except（即编译器没生成 ScopeTable）。</p><p><code>-2</code> (<code>0xFFFFFFFE</code>) 表示：函数有 ScopeTable，但<strong>当前没有任何激活的 try 块</strong>。</p><p>所以翻译过来就是目前这个seh只有一层(还没进入try)，具体进入try的部分见什么修改了Trylevel,如下最后是try结束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.text:004011B3                 mov     [ebp+ms_exc.registration.TryLevel], 0 //try开始</span><br><span class="line">.text:004011BA                 mov     [ebp+var_38], 0</span><br><span class="line">.text:004011C1                 mov     eax, [ebp+var_1C]</span><br><span class="line">.text:004011C4                 mov     edx, [ebp+var_24]</span><br><span class="line">.text:004011C7                 mov     ecx, [ebp+var_20]</span><br><span class="line">.text:004011CA                 mov     ebx, [ebp+arg_0]</span><br><span class="line">.text:004011CD                 div     [ebp+var_38]    //明显除0异常</span><br><span class="line">.text:004011D0                 mov     [ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh //try结束</span><br></pre></td></tr></table></figure><p>第4行<code>push offset stru_403758</code></p><ul><li><p>把指向 <code>.rdata</code> 中 scope table（你之前贴的 <code>stru_403758</code>） 的地址压栈。</p></li><li><p>这个表包含了 filter/handler 的地址、cookie 偏移等，运行时的异常处理器用它来决定<strong>哪个 try/except（或 finally）块应该响应当前异常</strong></p></li></ul><p>第5行<code>push offset SEH_401140</code></p><ul><li><p>把一个“handler 地址”或“该函数专用的异常处理 stub”的地址压栈。IDA 给它取名为 <code>SEH_401140</code>（或许是个局部的 handler/veneer）。</p></li><li><p>当异常发生并且运行时走到这个注册记录时，系统会调用这个 handler（这个 handler 通常是编译器生成的代码 / 运行时枢纽，它会读取 scope table，调用相应的 filter/handler 函数</p></li></ul><p>第6行<code>mov eax, large fs:0</code></p><ul><li><p>从 <code>fs:[0]</code> 读取当前线程的 SEH 链表头（在 x86 Windows 中，FS 段基址指向 TIB，TIB 的第一个 dword 就是 SEH 链表头）。<code>large</code> 是汇编器的语法，表示读取完整的 32 位值。</p></li><li><p>把当前链表头（即“之前的注册记录”的指针）读出来保存到 EAX。</p></li></ul><p>第7行<code>push eax</code></p><ul><li><p>把旧的 <code>fs:[0]</code>（即之前的链表头）压栈 —— 这就是新注册记录的 <code>Next</code> 字段（保存链表的前驱，以便函数退出时能恢复）。</p></li><li><p>在压栈/设置 <code>fs:[0]</code> 后，新的记录就会被插到链表最前面，变成当前活动的异常注册记录。</p></li></ul><p>退出函数时解除seh</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">loc_401268:</span><br><span class="line">    mov     ecx, [ebp+ms_exc.registration.Next]</span><br><span class="line">    mov     large fs:0, ecx        ; 恢复 fs:[0] = 上一个 SEH 节点</span><br><span class="line">    pop     ecx</span><br><span class="line">    pop     edi</span><br><span class="line">    pop     esi</span><br><span class="line">    pop     ebx</span><br><span class="line">    mov     esp, ebp</span><br><span class="line">    pop     ebp</span><br><span class="line">    retn</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="总结逆向流程："><a href="#总结逆向流程：" class="headerlink" title="总结逆向流程："></a>总结逆向流程：</h1><p>我们需要在stru_403758找到相应的过滤函数，和处理异常函数，该题中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">                stru_403758     dd 0FFFFFFFEh           ; GSCookieOffset</span><br><span class="line">.rdata:00403758                                         ; DATA XREF: sub_401140+5↑o</span><br><span class="line">.rdata:0040375C                 dd 0                    ; GSCookieXOROffset</span><br><span class="line">.rdata:00403760                 dd 0FFFFFFB0h           ; EHCookieOffset</span><br><span class="line">.rdata:00403764                 dd 0                    ; EHCookieXOROffset</span><br><span class="line">.rdata:00403768                 dd 0FFFFFFFEh           ; ScopeRecord.EnclosingLevel</span><br><span class="line">.rdata:0040376C                 dd offset loc_4011D9    ; ScopeRecord.FilterFunc</span><br><span class="line">.rdata:00403770                 dd offset loc_4011DF    ; ScopeRecord.HandlerFunc</span><br></pre></td></tr></table></figure><p>前3个没什么用，第四个是我们上面的Trylevel，第5个是过滤函数，第6个是我们的处理函数，也就是ctf中反调试替换掉的逻辑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">               loc_4011D9:                             ; DATA XREF: .rdata:stru_403758↓o</span><br><span class="line">.text:004011D9                 mov     eax, 1</span><br><span class="line">.text:004011DE                 retn</span><br><span class="line">.text:004011DF ; ---------------------------------------------------------------------------</span><br><span class="line">.text:004011DF</span><br><span class="line">.text:004011DF loc_4011DF:                             ; DATA XREF: .rdata:stru_403758↓o</span><br><span class="line">.text:004011DF                 mov     esp, [ebp+ms_exc.old_esp]</span><br><span class="line">.text:004011E2                 mov     edi, [ebp+var_24]</span><br><span class="line">.text:004011E5                 mov     ecx, edi</span><br><span class="line">.text:004011E7                 shr     ecx, 4</span><br><span class="line">.text:004011EA                 mov     eax, edi</span><br><span class="line">.text:004011EC                 shl     eax, 5</span><br><span class="line">.text:004011EF                 xor     ecx, eax</span><br><span class="line">.text:004011F1                 add     ecx, edi</span><br><span class="line">.text:004011F3                 mov     eax, [ebp+arg_0]</span><br><span class="line">.text:004011F6                 mov     eax, [eax]</span><br><span class="line">.text:004011F8                 add     eax, [ebp+var_20]</span><br><span class="line">.text:004011FB                 xor     ecx, eax</span><br><span class="line">.text:004011FD                 xor     [ebp+var_1C], ecx</span><br><span class="line">.text:00401200                 push    offset Buffer   ; &quot;Something happend...&quot;</span><br><span class="line">.text:00401205                 call    ds:puts</span><br><span class="line">.text:0040120B                 add     esp, 4</span><br><span class="line">.text:0040120E                 mov     [ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh</span><br><span class="line">.text:00401215                 mov     esi, [ebp+var_28]</span><br></pre></td></tr></table></figure><p>这里过滤函数返回值保存在eax中，这里也就是返回了1，说明EXCEPTION_EXECUTE_HANDLER要处理这个异常，把原函数逻辑替换为下面的处理函数然后就可以接着进行逆向分析了，try中遇到error，那条出错指令汇编跳过，执行exception指令，然后执行try{}下面的语句。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SEH&quot;&gt;&lt;a href=&quot;#SEH&quot; class=&quot;headerlink&quot; title=&quot;SEH&quot;&gt;&lt;/a&gt;SEH&lt;/h1&gt;&lt;p&gt;结构化异常处理（SEH）是 C 的Microsoft扩展，C++用于处理某些异常代码情况（如硬件故障）正常。 尽管 Windows </summary>
      
    
    
    
    <category term="pe逆向" scheme="http://example.com/categories/pe%E9%80%86%E5%90%91/"/>
    
    <category term="反调试技术" scheme="http://example.com/categories/pe%E9%80%86%E5%90%91/%E5%8F%8D%E8%B0%83%E8%AF%95%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="反调试技术" scheme="http://example.com/tags/%E5%8F%8D%E8%B0%83%E8%AF%95%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>分组密码的加密模式及攻击</title>
    <link href="http://example.com/2025/10/09/%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E7%9A%84%E5%8A%A0%E5%AF%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2025/10/09/%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E7%9A%84%E5%8A%A0%E5%AF%86%E6%A8%A1%E5%BC%8F/</id>
    <published>2025-10-08T16:00:00.000Z</published>
    <updated>2025-10-11T17:03:23.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分组密码工作模式"><a href="#分组密码工作模式" class="headerlink" title="分组密码工作模式"></a>分组密码工作模式</h1><p>工作模式对算法本身结构没有影响，影响的是明文密文</p><h2 id="ECB：电子密码本模式-electronic-codebook-mode"><a href="#ECB：电子密码本模式-electronic-codebook-mode" class="headerlink" title="ECB：电子密码本模式(electronic codebook mode)"></a>ECB：电子密码本模式(electronic codebook mode)</h2><p><img data-src="/images/分组密码模式/ecb.png" alt="ecb"></p><p>从ECB的工作原理可以看出，如果明文数据在等分后，两块数据相同则会产生相同的加密数据块，这会辅助攻击者快速判断加密算法的工作模式，而将攻击资源聚集在破解某一块数据即可，一旦成功则意味着全文破解，大大提升了攻击效率。</p><script type="math/tex; mode=display">\text{加密：}\quad C_i = E_k(P_i)</script><script type="math/tex; mode=display">\text{解密：}\quad P_i = D_k(C_i)</script><h2 id="CBC：密码分组链接模式（cipher-block-chaining-Triple）"><a href="#CBC：密码分组链接模式（cipher-block-chaining-Triple）" class="headerlink" title="CBC：密码分组链接模式（cipher block chaining Triple）"></a>CBC：密码分组链接模式（cipher block chaining Triple）</h2><p><img data-src="/images/分组密码模式/cbc.png" alt="cbc"></p><p>cbc的解密</p><p><img data-src="/images/分组密码模式/dcbc.png" alt="dcbc"></p><p>CBC模式相比ECB实现了更好的模式隐藏，但因为其将密文引入运算，加解密操作无法并行操作。同时引入的IV向量，并且还需要加、解密双方共同知晓方可。</p><script type="math/tex; mode=display">C_0 = \text{IV}</script><script type="math/tex; mode=display">\text{加密：}\quad C_i = E_k(P_i \oplus C_{i-1})</script><script type="math/tex; mode=display">\text{解密：}\quad P_i = D_k(C_i) \oplus C_{i-1}</script><h2 id="CFB：密文反馈模式（Cipher-FeedBack）"><a href="#CFB：密文反馈模式（Cipher-FeedBack）" class="headerlink" title="CFB：密文反馈模式（Cipher FeedBack）"></a>CFB：密文反馈模式（Cipher FeedBack）</h2><p><img data-src="/images/分组密码模式/cfb.png" alt="cfb"></p><p>与CBC模式类似，但不同的地方在于，CFB模式先生成密码流字典，然后用密码字典与明文进行异或操作并最终生成密文。后一分组的密码字典的生成需要前一分组的密文参与运算。</p><p><img data-src="/images/分组密码模式/cfb结构.png" alt="cfb结构"></p><p>其中s位可任意，不同s位加密结果不同，默认s是算法块规定长度，例des是64，aes是128</p><script type="math/tex; mode=display">C_0 = \text{IV}</script><script type="math/tex; mode=display">\text{加密：}\quad O_i = E_k(C_{i-1}),\quad C_i = P_i \oplus O_i</script><script type="math/tex; mode=display">\text{解密：}\quad O_i = E_k(C_{i-1}),\quad P_i = C_i \oplus O_i</script><h2 id="OFB：输出反馈模式（Output-Feedbaek）"><a href="#OFB：输出反馈模式（Output-Feedbaek）" class="headerlink" title="OFB：输出反馈模式（Output Feedbaek）"></a>OFB：输出反馈模式（Output Feedbaek）</h2><p><img data-src="/images/分组密码模式/ofb.png" alt="ofb"></p><p>OFB和CFB一样，明文块可自定义长度</p><script type="math/tex; mode=display">O_0 = \text{IV}</script><script type="math/tex; mode=display">\text{生成 keystream：}\quad O_i = E_k(O_{i-1}),\quad S_i = O_i</script><script type="math/tex; mode=display">\text{加密：}\quad C_i = P_i \oplus S_i</script><script type="math/tex; mode=display">\text{解密：}\quad P_i = C_i \oplus S_i</script><h2 id="CTR：计数器模式（counter-mode）"><a href="#CTR：计数器模式（counter-mode）" class="headerlink" title="CTR：计数器模式（counter mode）"></a>CTR：计数器模式（counter mode）</h2><p><img data-src="/images/分组密码模式/ctr.png" alt="ctr"></p><script type="math/tex; mode=display">\text{令 }CTR_i = \text{NONCE} \,\|\, (\text{counter}+i)</script><script type="math/tex; mode=display">\text{加密：}\quad S_i = E_k(CTR_i),\quad C_i = P_i \oplus S_i</script><script type="math/tex; mode=display">\text{解密：}\quad P_i = C_i \oplus S_i \quad(\text{其中 }S_i = E_k(CTR_i))</script><h2 id="加密模式总结："><a href="#加密模式总结：" class="headerlink" title="加密模式总结："></a>加密模式总结：</h2><div class="table-container"><table><thead><tr><th>模式</th><th>全称</th><th>优点</th><th>缺点</th><th>是否需 IV</th><th>是否可并行加密</th><th>是否可并行解密</th><th>是否适合流加密</th></tr></thead><tbody><tr><td><strong>ECB</strong></td><td>Electronic Codebook</td><td>实现简单；可并行加解密</td><td>同块明文→同块密文，易被模式识别（最不安全）</td><td>否</td><td>是</td><td>是</td><td>否</td></tr><tr><td><strong>CBC</strong></td><td>Cipher Block Chaining</td><td>同块明文不同IV→不同密文；常用于文件加密</td><td>无法并行加密；需填充；IV重用会泄密</td><td>是</td><td>否</td><td>是</td><td>否</td></tr><tr><td><strong>CFB</strong></td><td>Cipher Feedback</td><td>不需填充；可加密任意长度数据；适合流式</td><td>错误传播严重；速度略慢</td><td>是</td><td>否</td><td>否</td><td>是</td></tr><tr><td><strong>OFB</strong></td><td>Output Feedback</td><td>不需填充；错误不会传播；适合流加密</td><td>同IV下重用密钥极危险；同步要求高</td><td>是</td><td>是</td><td>是</td><td>是</td></tr><tr><td><strong>CTR</strong></td><td>Counter</td><td>可随机访问块；可并行加解密；性能优</td><td>计数器不能重用，否则致命泄密</td><td>是（计数器）</td><td>是</td><td>是</td><td>是</td></tr></tbody></table></div><h1 id="加密模式攻击"><a href="#加密模式攻击" class="headerlink" title="加密模式攻击"></a>加密模式攻击</h1><h2 id="CBC反转字节攻击："><a href="#CBC反转字节攻击：" class="headerlink" title="CBC反转字节攻击："></a>CBC反转字节攻击：</h2><p>已知密文，和明文。可以在不知道key的情况下，肆意更改明文的值，比如网站验证权限，可以把传进去的密文修改，从而使明文从’user’到’admin’，可能能绕过权限</p><p>设A是第N-1块的密文一个字节，B是第N块密文解密后的中间值的对应部分字节，C是第N块明文对应字节，X是想要修改的字节值</p><p>公式右边是明文变化，左边括号内是输入密文的变化</p><script type="math/tex; mode=display">\begin{aligned}A \oplus B &= C \\(A \oplus C) \oplus B &= 0 \\(A \oplus C \oplus X)\oplus B &= X\end{aligned}</script><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BS=AES.block_size  <span class="comment">#分组长度</span></span><br><span class="line">key=<span class="string">b'test'</span>  <span class="comment">#密钥</span></span><br><span class="line">iv=uuid.uuid4().<span class="built_in">bytes</span>  <span class="comment">#随机初始向量</span></span><br><span class="line">pad=<span class="keyword">lambda</span> s: s+((BS-<span class="built_in">len</span>(s)%BS)*<span class="built_in">chr</span>(BS-<span class="built_in">len</span>(s)%BS)).encode()  <span class="comment">#Pkcs5Padding</span></span><br><span class="line">data=<span class="string">b'1234567890abcdefabcdef1234567890'</span>  <span class="comment">#明文M</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#加密</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">data</span>):</span><br><span class="line">    aes=AES.new(pad(key),AES.MODE_CBC,iv)</span><br><span class="line">    ciphertext=aes.encrypt(pad(data))</span><br><span class="line">    ciphertext=binascii.b2a_hex(ciphertext)</span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line"><span class="comment">#解密</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dec</span>(<span class="params">c</span>):</span><br><span class="line">    c=binascii.a2b_hex(c)</span><br><span class="line">    aes=AES.new(pad(key),AES.MODE_CBC,iv)</span><br><span class="line">    data=aes.decrypt(c)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试CBC翻转</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">CBC_test</span>(<span class="params">c</span>):</span><br><span class="line">    c=<span class="built_in">bytearray</span>(binascii.a2b_hex(c))</span><br><span class="line">    c[<span class="number">0</span>]=c[<span class="number">0</span>]^<span class="built_in">ord</span>(<span class="string">'a'</span>)^<span class="built_in">ord</span>(<span class="string">'A'</span>) <span class="comment">#c[0]为第一组的密文字符，a为第二组相应位置的明文字符，A是我们想要的明文字符</span></span><br><span class="line">    c=binascii.b2a_hex(c)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"ciphertext:"</span>,enc(data))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"data:"</span>,dec(enc(data)))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"CBC Attack:"</span>,dec(CBC_test(enc(data))))</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ciphertext: b'ffa645d1b5e40afbbae47de053a66f978fa0a824e99864a7e8baf38ceccda613c304883f11fc0857c1bb7603f859798e'</span><br><span class="line">data: b'1234567890abcdefabcdef1234567890\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10'</span><br><span class="line">CBC Attack:b':8O&lt;\xe7\x04\xd8v\xe8Q\xfe\xa5I\xc9c]Abcdef1234567890\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10'</span><br></pre></td></tr></table></figure><h2 id="Padding-Oracle-Attack"><a href="#Padding-Oracle-Attack" class="headerlink" title="Padding Oracle Attack"></a>Padding Oracle Attack</h2><p>已知条件：如果明文的padding格式出错服务端会提示某个特定状态码，密文，iv(IV经常会随着密文一起发送。常见的做法是将IV作为一个前缀，附着在密文的前面)</p><p>效果：在不清楚 key 的前提下解密任意给定的密文。</p><p><img data-src="/images/分组密码模式/poa.png" alt="poa"></p><h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><p>我们有密文，解密后的中间状态(Intermediary Value)我们不知道，爆破每个字节的iv值，当服务端不报错时，说明padding正确，如上图所示，我们知道爆破的第8个字节，就肯定直接padding为0x1,也知道我们此时爆破的iv是多少，就可以推出正确的中间状态(Intermediary Value)是多少，依次类推，把所有字节的中间状态都算出来后，就可以用初始iv异或中间状态得到明文。</p><h3 id="如果已知多组密文解密："><a href="#如果已知多组密文解密：" class="headerlink" title="如果已知多组密文解密："></a>如果已知多组密文解密：</h3><p>从前往后进行解密</p><h3 id="如果已知多组明文加密："><a href="#如果已知多组明文加密：" class="headerlink" title="如果已知多组明文加密："></a>如果已知多组明文加密：</h3><p>先从最后一组开始，爆破最后一组的intermediary并构造出iv，然后将本组的iv当作前一组的密文，以此类推。由此我们可以得到构造密文的步骤</p><ol><li>从最后一组开始，爆破出该组的intermediary并构造出iv，然后将本组的iv当作前一组的密文</li><li>爆破前一组的intermediary并构造出iv，然后将本组的iv当作前一组的密文</li><li>…</li><li>最后会得到第一组的iv，至此我们已经构造出了所有合法密文以及iv</li></ol><h1 id="reference"><a href="#reference" class="headerlink" title="reference:"></a>reference:</h1><p><a href="https://goodapple.top/archives/217">CBC字节翻转攻击&amp;Padding Oracle Attack原理解析 - 枫のBlog</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分组密码工作模式&quot;&gt;&lt;a href=&quot;#分组密码工作模式&quot; class=&quot;headerlink&quot; title=&quot;分组密码工作模式&quot;&gt;&lt;/a&gt;分组密码工作模式&lt;/h1&gt;&lt;p&gt;工作模式对算法本身结构没有影响，影响的是明文密文&lt;/p&gt;
&lt;h2 id=&quot;ECB：电子密码本</summary>
      
    
    
    
    <category term="逆向中的密码学" scheme="http://example.com/categories/%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    <category term="对称加密题单" scheme="http://example.com/categories/%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E9%A2%98%E5%8D%95/"/>
    
    
    <category term="aes" scheme="http://example.com/tags/aes/"/>
    
  </entry>
  
  <entry>
    <title>安卓逆向环境配置</title>
    <link href="http://example.com/2025/10/08/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2025/10/08/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</id>
    <published>2025-10-07T16:00:00.000Z</published>
    <updated>2025-10-27T09:50:10.226Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>某些安卓题强制要求arm环境才能跑，模拟器不管是脱壳还是动调都有很多问题，最近搞了个真机重新配一遍安卓逆向环境</p><h1 id="root手机"><a href="#root手机" class="headerlink" title="root手机"></a>root手机</h1><p>我这个是三星的galaxy z filp3，不得不说国外的手机root就是比国内的简单</p><h2 id="解bl锁："><a href="#解bl锁：" class="headerlink" title="解bl锁："></a>解bl锁：</h2><p>一边按住音量上下键，一边插数据线，出浅蓝界面放手，然后长按音量上</p><p>出现unlock放手，短按音量下</p><p>这样就把bl锁开了</p><h2 id="解oem："><a href="#解oem：" class="headerlink" title="解oem："></a>解oem：</h2><p>连点7次编译版本，然后进开发者模式，打开oem</p><h2 id="刷机下载系统包："><a href="#刷机下载系统包：" class="headerlink" title="刷机下载系统包："></a>刷机下载系统包：</h2><p>手机关机不插线，同时按住音量上下键，一边插数据线，到蓝屏界面按一次音量上到download模式，然后选择factory data reset模式，电脑同时启动数据传输，等开机就好了</p><p>开机后在github下载最新的magisk刷入面具root就完了</p><h1 id="配置逆向环境："><a href="#配置逆向环境：" class="headerlink" title="配置逆向环境："></a>配置逆向环境：</h1><h2 id="导入面具模块："><a href="#导入面具模块：" class="headerlink" title="导入面具模块："></a>导入面具模块：</h2><p>在github找xposed模块，下载zip包，放在手机里，在面具软件下边模块点从本地安装，等待就刷入xposed模块了，再从github下一个lsposed管理器，基础环境就完事了</p><h2 id="下载逆向工具："><a href="#下载逆向工具：" class="headerlink" title="下载逆向工具："></a>下载逆向工具：</h2><p>本文所有逆向工具都可以在吾爱破解的<a href="https://www.52pojie.cn/thread-1695141-1-1.html">《安卓逆向这档事》一、模拟器环境搭建 - 吾爱破解 - 52pojie.cn</a>及后续中找到</p><h3 id="MT管理器-amp-NT管理器："><a href="#MT管理器-amp-NT管理器：" class="headerlink" title="MT管理器&amp;NT管理器："></a>MT管理器&amp;NT管理器：</h3><p>这两个工具是用于操作我们的系统文件的，可以修改签名，修改apk的smali代码，功能很多是安卓逆向的神器</p><h3 id="算法助手："><a href="#算法助手：" class="headerlink" title="算法助手："></a>算法助手：</h3><p>有很多内置的功能，极大增大我们的逆向速度</p><h3 id="xdebugapp："><a href="#xdebugapp：" class="headerlink" title="xdebugapp："></a>xdebugapp：</h3><p>过动调检测的小帮手，我们安卓apk的动态调试步骤：</p><ul><li><p>xdebugapp打开目的app获取debug权限</p></li><li><p>终端启动调试</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell am <span class="built_in">start</span> <span class="literal">-D</span> <span class="literal">-n</span> com.zj.wuaipojie/.ui.MainActivity</span><br><span class="line">adb shell am <span class="built_in">start</span> <span class="literal">-D</span> <span class="literal">-n</span> 包名/类名 （去掉<span class="literal">-D</span> 则表示不以debug模式启动app）</span><br></pre></td></tr></table></figure></li><li><p>jeb下断点附上apk</p></li></ul><h3 id="simplehook："><a href="#simplehook：" class="headerlink" title="simplehook："></a>simplehook：</h3><p>里面基本实现了一些hook的功能，如果有简单hook需求就不用写frida脚本了</p><h3 id="android-server"><a href="#android-server" class="headerlink" title="android_server:"></a>android_server:</h3><p>这个东西不用下载，直接在ida下载文件夹里找就可以  <strong>IDA_Pro\dbgsrv\android_server</strong></p><p>然后在cmd里输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb push IDA_Pro\dbgsrv\android_server /data/local/tmp</span><br></pre></td></tr></table></figure><p>这样就把我们的调试服务器放在了/data/local/tmp里了</p><p>在mt管理器找到它把文件属性改为777，改名为as(因为很多反调试会检测android_server这个名字)</p><p>需要动调apk的.so文件的时候就</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line"><span class="built_in">cd</span> /<span class="keyword">data</span>/local/tmp</span><br><span class="line">./as</span><br></pre></td></tr></table></figure><h3 id="frida-server"><a href="#frida-server" class="headerlink" title="frida server"></a>frida server</h3><p>安卓逆向的神器，去github下载对应的frida版本，我这里win下载的16.1.3版本，就要去官网找对应16.1.3的server</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(jack) C:\Users\Lenovo&gt;frida --v</span><br><span class="line">16.1.3</span><br></pre></td></tr></table></figure><p><img data-src="D:\ctf\s0m1ng\source\images\安卓逆向\环境\frida.png" alt="frida"></p><p>也放到/data/local/tmp</p><h3 id="Lspatch"><a href="#Lspatch" class="headerlink" title="Lspatch"></a>Lspatch</h3><p>免 Root 使用 Xposed 模块这是 LSPatch 最主要的功能。</p><ul><li><p>它允许在 <strong>不 Root 手机</strong> 的情况下，让应用程序加载和执行 Xposed 模块。</p></li><li><p><strong>传统方式</strong>：需要 Root → 安装 LSPosed → 启用模块</p></li><li><p><strong>LSPatch 方式</strong>：直接修补 APK 文件 → 安装修补后的 APK → 直接使用</p></li></ul><p>应用重打包与修改</p><p>通过修补目标 APK，将模块代码嵌入到应用中，实现功能增强。</p><h3 id="reqable："><a href="#reqable：" class="headerlink" title="reqable："></a>reqable：</h3><p><a href="https://reqable.com/zh-CN/download">https://reqable.com/zh-CN/download</a></p><p>这个是必备抓包apk，用这个我们可以抓app的包</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h1&gt;&lt;p&gt;某些安卓题强制要求arm环境才能跑，模拟器不管是脱壳还是动调都有很多问题，最近搞了个真机重新配一遍安卓逆向环境&lt;/p&gt;
&lt;h1 id</summary>
      
    
    
    
    <category term="安卓逆向基础" scheme="http://example.com/categories/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="安卓逆向" scheme="http://example.com/tags/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>[GWCTF 2019] babyvm</title>
    <link href="http://example.com/2025/10/07/vm%E9%80%86%E5%90%91/[GWCTF%202019]babyvm/"/>
    <id>http://example.com/2025/10/07/vm%E9%80%86%E5%90%91/[GWCTF%202019]babyvm/</id>
    <published>2025-10-06T16:00:00.000Z</published>
    <updated>2025-10-08T07:10:47.020Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>这道题算非常经典的vm题了，用这道题来熟悉一下vm题基本流程</p><h1 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h1><h2 id="创建结构体："><a href="#创建结构体：" class="headerlink" title="创建结构体："></a>创建结构体：</h2><p><img data-src="/images/[GWCTF%202019]babyvm/1.png" alt="1"></p><p>有三个函数我们点进去看一下具体逻辑</p><p><img data-src="/images/[GWCTF%202019]babyvm/vm_init.png" alt="vm_init"></p><p>第一个函数很明显就是vm_init的结构，我们改名为vm_init,并创建结构体帮助静态分析</p><p><img data-src="/images/[GWCTF%202019]babyvm/struct.png" alt="struct"></p><p>在空白部分右键，添加结构体</p><p><img data-src="/images/[GWCTF%202019]babyvm/proc.png" alt="proc"></p><p>结构体名就叫vm_cpu，下面按d键快捷键给它增加成员变量</p><p>光标对准vm_cpu struc点一次d是在最前面增加成员变量</p><p>对准field_0点一次d是更改一次field_0的类型,也可按y直接输入类型</p><p>对准vm_cpu ends点一次d是在末尾增加成员变量</p><p><img data-src="/images/[GWCTF%202019]babyvm/cpu.png" alt="cpu"></p><p>接下来修改成员变量的名称按n快捷键，改为eax，ebx等</p><p>由于vm_cpu中有个数组叫oplist[]</p><p>我们先创建新结构体</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">opcode</span></span><br><span class="line">&#123;</span><br><span class="line">    QWORD _opcode;</span><br><span class="line">    QWORD handle;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里稍微再提一下怎么确定每个成员变量占多少字节，不要看ida给你强转出来的类型，而要看上下成员之间的差值，比如<em>(_BYTE </em>)(a1 + 24) = -15;和<em>(_QWORD </em>)(a1 + 32) = sub_B5F;从a1+24到a1+32，占了8个字节。所以这里_opcode类型是qword。下面是全部改完之后的结构体</p><p><img data-src="/images/[GWCTF%202019]babyvm/struct2.png" alt="struct2"></p><p>再回到第一个函数，对准函数参数列表按y，把a1类型改为vm_cpu*，然后函数就变得美观了，下面的qword_2022A8是给vm设置的栈空间，我们也可以改名vm_stack</p><p><img data-src="/images/[GWCTF%202019]babyvm/vm_init2.png" alt="vm_init2"></p><p>第二个函数很容易看出来是vm_run,分发器控制程序执行，第三个函数是验证flag正确与否，就不展开讲了</p><p>第二个函数把参数也改成vm_cpu*</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">vm_run</span><span class="params">(vm_cpu *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  a1-&gt;vm_rip = (__int64)&amp;unk_202060;</span><br><span class="line">  <span class="keyword">while</span> ( *(_BYTE *)a1-&gt;vm_rip != <span class="number">0xF4</span> )</span><br><span class="line">    <span class="built_in">sub_E6E</span>(a1);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到逻辑已经很明确了，就是rip指向的地址对应的值不等于0xf4时，一直调用sub_E6E</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">sub_E6E</span><span class="params">(vm_cpu *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; *(_BYTE *)a1-&gt;vm_rip != <span class="built_in">LOBYTE</span>(a1-&gt;oplist[i]._opcode); ++i )</span><br><span class="line">    ;</span><br><span class="line">  ((<span class="built_in">void</span> (__fastcall *)(vm_cpu *))a1-&gt;oplist[i].handle)(a1);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sub_E6E点进去就发现和我们的vm基础里的dispatcher结构一模一样，现在我们回头处理一下没命名的handle函数就可以正式逆向了</p><h2 id="识别函数："><a href="#识别函数：" class="headerlink" title="识别函数："></a>识别函数：</h2><h3 id="1-mov函数"><a href="#1-mov函数" class="headerlink" title="1.mov函数"></a>1.mov函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">sub_B5F</span><span class="params">(vm_cpu *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> *v2; <span class="comment">// [rsp+28h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  v2 = (<span class="type">int</span> *)(a1-&gt;vm_rip + <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">switch</span> ( *(_BYTE *)(a1-&gt;vm_rip + <span class="number">1</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0xE1</span>:</span><br><span class="line">      a1-&gt;vm_eax = *((<span class="type">char</span> *)vm_stack + *v2);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0xE2</span>:</span><br><span class="line">      a1-&gt;vm_ebx = *((<span class="type">char</span> *)vm_stack + *v2);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0xE3</span>:</span><br><span class="line">      a1-&gt;vm_ecx = *((<span class="type">char</span> *)vm_stack + *v2);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0xE4</span>:</span><br><span class="line">      *((_BYTE *)vm_stack + *v2) = a1-&gt;vm_eax;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0xE5</span>:</span><br><span class="line">      a1-&gt;vm_edx = *((<span class="type">char</span> *)vm_stack + *v2);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0xE7</span>:</span><br><span class="line">      *((_BYTE *)vm_stack + *v2) = a1-&gt;vm_ebx;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  a1-&gt;vm_rip += <span class="number">6LL</span>;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数的意思是，v2是栈中偏移，相当于ss:[ebp+v2]=vm_stack[v2],当操作码=-15也就是0xF1的时候，调用这个函数，下一个地址的数<em>(_BYTE </em>)(a1-&gt;vm_rip+1))就是选择码，<em>(_BYTE </em>)(a1-&gt;vm_rip+2))就是操作数</p><ul><li><p>选择码=0xE1 执行mov eax ss:[ebp+v2]</p></li><li><p>选择码=0xE2 执行mov ebx ss:[ebp+v2]</p></li><li><p>选择码=0xE3 执行mov ecx ss:[ebp+v2]</p></li><li><p>选择码=0xE4 执行mov ss:[ebp+v2] eax </p></li><li><p>选择码=0xE5 执行mov edx ss:[ebp+v2]</p></li><li><p>选择码=0xE7 执行mov ss:[ebp+v2] ebx </p></li></ul><h3 id="2-xor"><a href="#2-xor" class="headerlink" title="2.xor"></a>2.xor</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">sub_A64</span><span class="params">(vm_cpu *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  a1-&gt;vm_eax ^= a1-&gt;vm_ebx;</span><br><span class="line">  ++a1-&gt;vm_rip;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相当于xor eax ebx</p><h3 id="3-read"><a href="#3-read" class="headerlink" title="3.read"></a>3.read</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">sub_AC5</span><span class="params">(vm_cpu *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *buf; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  buf = (<span class="type">const</span> <span class="type">char</span> *)vm_stack;</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, vm_stack, <span class="number">0x20uLL</span>);</span><br><span class="line">  dword_2022A4 = <span class="built_in">strlen</span>(buf);</span><br><span class="line">  <span class="keyword">if</span> ( dword_2022A4 != <span class="number">21</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;WRONG!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  ++a1-&gt;vm_rip;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把flag读入栈上</p><p>相当于call read,并判断flag长度</p><h3 id="4-nop"><a href="#4-nop" class="headerlink" title="4.nop"></a>4.nop</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">sub_956</span><span class="params">(vm_cpu *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  ++a1-&gt;vm_rip;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>什么都没干，rip只是加1，这是所有指令都要有的</p><h3 id="5-mul"><a href="#5-mul" class="headerlink" title="5.mul"></a>5.mul</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">sub_A08</span><span class="params">(vm_cpu *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  a1-&gt;vm_eax *= a1-&gt;vm_edx;</span><br><span class="line">  ++a1-&gt;vm_rip;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mul eax edx</p><h3 id="6-xchg"><a href="#6-xchg" class="headerlink" title="6.xchg"></a>6.xchg</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">sub_8F0</span><span class="params">(vm_cpu *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> vm_eax; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  vm_eax = a1-&gt;vm_eax;</span><br><span class="line">  a1-&gt;vm_eax = a1-&gt;vm_ebx;</span><br><span class="line">  a1-&gt;vm_ebx = vm_eax;</span><br><span class="line">  ++a1-&gt;vm_rip;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xchg eax ebx</p><h3 id="7-自定义函数"><a href="#7-自定义函数" class="headerlink" title="7.自定义函数"></a>7.自定义函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">sub_99C</span><span class="params">(vm_cpu *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  a1-&gt;vm_eax = a1-&gt;vm_ecx + <span class="number">2</span> * a1-&gt;vm_ebx + <span class="number">3</span> * a1-&gt;vm_eax;</span><br><span class="line">  ++a1-&gt;vm_rip;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现了eax=ecx+2<em>ebx+3</em>eax应该是自定义指令</p><h2 id="自己实现dispatcher，汇编层面逆向"><a href="#自己实现dispatcher，汇编层面逆向" class="headerlink" title="自己实现dispatcher，汇编层面逆向"></a>自己实现dispatcher，汇编层面逆向</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> opcode[]=&#123;</span><br><span class="line"><span class="number">0xF5</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, </span><br><span class="line">  <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x21</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x02</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x22</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x23</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, </span><br><span class="line">  <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x24</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x25</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, </span><br><span class="line">  <span class="number">0xE1</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x26</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, </span><br><span class="line">  <span class="number">0xE4</span>, <span class="number">0x27</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x28</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, </span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x29</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, </span><br><span class="line">  <span class="number">0x2A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x2B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0C</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x2C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x2D</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, </span><br><span class="line">  <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x2E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x2F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, </span><br><span class="line">  <span class="number">0xE1</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x30</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, </span><br><span class="line">  <span class="number">0xE4</span>, <span class="number">0x31</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x12</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x32</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, </span><br><span class="line">  <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x33</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xF4</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF5</span>, <span class="number">0xF1</span>, </span><br><span class="line">  <span class="number">0xE1</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x02</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, </span><br><span class="line">  <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, </span><br><span class="line">  <span class="number">0xE4</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, </span><br><span class="line">  <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x05</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, </span><br><span class="line">  <span class="number">0xE2</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE3</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE5</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF6</span>, <span class="number">0xF7</span>, <span class="number">0xF1</span>, </span><br><span class="line">  <span class="number">0xE4</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE3</span>, <span class="number">0x09</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE5</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF6</span>, </span><br><span class="line">  <span class="number">0xF7</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x08</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, </span><br><span class="line">  <span class="number">0xE3</span>, <span class="number">0x0A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE5</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xF6</span>, <span class="number">0xF7</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, </span><br><span class="line">  <span class="number">0xE1</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xF8</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE7</span>, </span><br><span class="line">  <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x12</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF8</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x0E</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE7</span>, <span class="number">0x12</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, </span><br><span class="line">  <span class="number">0xE1</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xF8</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE7</span>, </span><br><span class="line">  <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF4</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> rip=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> vm_eax=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> vm_ebx=<span class="number">18</span>;</span><br><span class="line">    <span class="type">int</span> vm_ecx=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> vm_edx=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> vm_stack[<span class="number">521</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">521</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        vm_stack[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">sizeof</span>(opcode) / <span class="built_in">sizeof</span>(opcode[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">while</span> (rip&lt;len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(opcode[rip]==<span class="number">0xF1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v2=opcode[rip<span class="number">+2</span>];</span><br><span class="line">            <span class="keyword">switch</span>(opcode[rip<span class="number">+1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0xE1</span>:</span><br><span class="line">                    vm_eax = vm_stack[v2];</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;mov eax,stack[&quot;</span>&lt;&lt;v2&lt;&lt;<span class="string">&quot;]&quot;</span>&lt;&lt;endl;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0xE2</span>:</span><br><span class="line">                    vm_ebx = vm_stack[v2];</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;mov ebx,stack[&quot;</span>&lt;&lt;v2&lt;&lt;<span class="string">&quot;]&quot;</span>&lt;&lt;endl;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0xE3</span>:</span><br><span class="line">                    vm_ecx = vm_stack[v2];</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;mov ecx,stack[&quot;</span>&lt;&lt;v2&lt;&lt;<span class="string">&quot;]&quot;</span>&lt;&lt;endl;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0xE4</span>:</span><br><span class="line">                    vm_stack[v2] = vm_eax;</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;mov stack[&quot;</span>&lt;&lt;v2&lt;&lt;<span class="string">&quot;],eax&quot;</span>&lt;&lt;endl;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0xE5</span>:</span><br><span class="line">                    vm_edx = vm_stack[v2];</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;mov edx,stack[&quot;</span>&lt;&lt;v2&lt;&lt;<span class="string">&quot;]&quot;</span>&lt;&lt;endl;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0xE7</span>:</span><br><span class="line">                    vm_stack[v2] = vm_ebx;</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;mov stack[&quot;</span>&lt;&lt;v2&lt;&lt;<span class="string">&quot;],ebx&quot;</span>&lt;&lt;endl;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            rip+=<span class="number">6</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opcode[rip]==<span class="number">0xF2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            vm_eax^=vm_ebx;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;xor eax ebx&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opcode[rip]==<span class="number">0xF5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// for(int i=0;i&lt;21;i++)</span></span><br><span class="line">            <span class="comment">// &#123;</span></span><br><span class="line">            <span class="comment">//     char c;</span></span><br><span class="line">            <span class="comment">//     cin&gt;&gt;c;</span></span><br><span class="line">            <span class="comment">//     vm_stack[i]=c;</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;read flag&amp;&amp;judge len&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opcode[rip]==<span class="number">0xf4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;nop&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opcode[rip]==<span class="number">0xF6</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            vm_eax=vm_ecx<span class="number">+2</span>*vm_ebx<span class="number">+3</span>*vm_eax;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;eax=ecx+2*ebx+3*eax&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opcode[rip]==<span class="number">0xF7</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            vm_eax*=vm_edx;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;mul eax edx&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opcode[rip]==<span class="number">0xF8</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> t = vm_eax;</span><br><span class="line">            vm_eax = vm_ebx;</span><br><span class="line">            vm_ebx = t;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;xchg eax ebx&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        rip++;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里其实可以把栈信息一起打印出来的，但是这道题非常简单没有涉及到栈的其他操作，只是简单把flag放在栈上，所以这里不打印了</p><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">read flag&amp;&amp;judge len</span><br><span class="line">mov eax,stack[0]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov stack[32],eax</span><br><span class="line">mov eax,stack[1]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov stack[33],eax</span><br><span class="line">mov eax,stack[2]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov stack[34],eax</span><br><span class="line">mov eax,stack[3]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov stack[35],eax</span><br><span class="line">mov eax,stack[4]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov stack[36],eax</span><br><span class="line">mov eax,stack[5]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov stack[37],eax</span><br><span class="line">mov eax,stack[6]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov stack[38],eax</span><br><span class="line">mov eax,stack[7]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov stack[39],eax</span><br><span class="line">mov eax,stack[8]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov stack[40],eax</span><br><span class="line">mov eax,stack[9]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov stack[41],eax</span><br><span class="line">mov eax,stack[10]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov stack[42],eax</span><br><span class="line">mov eax,stack[11]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov stack[43],eax</span><br><span class="line">mov eax,stack[12]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov stack[44],eax</span><br><span class="line">mov eax,stack[13]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov stack[45],eax</span><br><span class="line">mov eax,stack[14]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov stack[46],eax</span><br><span class="line">mov eax,stack[15]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov stack[47],eax</span><br><span class="line">mov eax,stack[16]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov stack[48],eax</span><br><span class="line">mov eax,stack[17]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov stack[49],eax</span><br><span class="line">mov eax,stack[18]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov stack[50],eax</span><br><span class="line">mov eax,stack[19]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov stack[51],eax</span><br><span class="line">nop</span><br><span class="line">read flag&amp;&amp;judge len</span><br><span class="line">mov eax,stack[0]</span><br><span class="line">mov ebx,stack[1]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov stack[0],eax</span><br><span class="line">mov eax,stack[1]</span><br><span class="line">mov ebx,stack[2]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov stack[1],eax</span><br><span class="line">mov eax,stack[2]</span><br><span class="line">mov ebx,stack[3]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov stack[2],eax</span><br><span class="line">mov eax,stack[3]</span><br><span class="line">mov ebx,stack[4]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov stack[3],eax</span><br><span class="line">mov eax,stack[4]</span><br><span class="line">mov ebx,stack[5]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov stack[4],eax</span><br><span class="line">mov eax,stack[5]</span><br><span class="line">mov ebx,stack[6]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov stack[5],eax</span><br><span class="line">mov eax,stack[6]</span><br><span class="line">mov ebx,stack[7]</span><br><span class="line">mov ecx,stack[8]</span><br><span class="line">mov edx,stack[12]</span><br><span class="line">eax=ecx+2*ebx+3*eax</span><br><span class="line">mul eax edx</span><br><span class="line">mov stack[6],eax</span><br><span class="line">mov eax,stack[7]</span><br><span class="line">mov ebx,stack[8]</span><br><span class="line">mov ecx,stack[9]</span><br><span class="line">mov edx,stack[12]</span><br><span class="line">eax=ecx+2*ebx+3*eax</span><br><span class="line">mul eax edx</span><br><span class="line">mov stack[7],eax</span><br><span class="line">mov eax,stack[8]</span><br><span class="line">mov ebx,stack[9]</span><br><span class="line">mov ecx,stack[10]</span><br><span class="line">mov edx,stack[12]</span><br><span class="line">eax=ecx+2*ebx+3*eax</span><br><span class="line">mul eax edx</span><br><span class="line">mov stack[8],eax</span><br><span class="line">mov eax,stack[13]</span><br><span class="line">mov ebx,stack[19]</span><br><span class="line">xchg eax ebx</span><br><span class="line">mov stack[13],eax</span><br><span class="line">mov stack[19],ebx</span><br><span class="line">mov eax,stack[14]</span><br><span class="line">mov ebx,stack[18]</span><br><span class="line">xchg eax ebx</span><br><span class="line">mov stack[14],eax</span><br><span class="line">mov stack[18],ebx</span><br><span class="line">mov eax,stack[15]</span><br><span class="line">mov ebx,stack[17]</span><br><span class="line">xchg eax ebx</span><br><span class="line">mov stack[15],eax</span><br><span class="line">mov stack[17],ebx</span><br><span class="line">nop</span><br></pre></td></tr></table></figure><p>正常一道普通的vm逆向题到这里看汇编逆向写exp就结束了，但这道题还有坑</p><h2 id="题外话："><a href="#题外话：" class="headerlink" title="题外话："></a>题外话：</h2><h3 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h3><p>这道题汇编前半部分很明显不对，因为flag总长度才21，栈上怎么索引到50多了，所以交叉引用找到真正的check函数,而且汇报中有两次输入，第二次输入才是真的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 <span class="title">sub_F00</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; len_flag - <span class="number">1</span> &gt; i; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *((_BYTE *)vm_stack + i) != byte_202020[i] )</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>exp：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 密文（十六进制字符串）</span></span><br><span class="line">flag = <span class="string">&#x27;69 45 2A 37 09 17 C5 0B 5C 72 33 76 33 21 74 31 5F 33 73 72&#x27;</span>.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">flag = [<span class="built_in">int</span>(x, <span class="number">16</span>) <span class="keyword">for</span> x <span class="keyword">in</span> flag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1) 还原前面的三次交换（你在 forward 阶段做了 13&lt;-&gt;19, 14&lt;-&gt;18, 15&lt;-&gt;17）</span></span><br><span class="line">flag[<span class="number">15</span>], flag[<span class="number">17</span>] = flag[<span class="number">17</span>], flag[<span class="number">15</span>]</span><br><span class="line">flag[<span class="number">14</span>], flag[<span class="number">18</span>] = flag[<span class="number">18</span>], flag[<span class="number">14</span>]</span><br><span class="line">flag[<span class="number">19</span>], flag[<span class="number">13</span>] = flag[<span class="number">13</span>], flag[<span class="number">19</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2) 用 Z3 求解 a6,a7,a8（原始 stack[6..8]）</span></span><br><span class="line"><span class="comment"># 方程（forward）是： f6 = (s8 + 2*s7 + 3*s6) * s12  （全部为字节运算）</span></span><br><span class="line">a6, a7, a8 = BitVecs(<span class="string">&#x27;a6 a7 a8&#x27;</span>, <span class="number">8</span>)</span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：这里 flag[...] 是 Python 整数（0..255），Z3 会自动把它转为相应的常量。</span></span><br><span class="line"><span class="comment"># 若你想更严格地把所有算术限定为 8-bit，可把常量也包装成 BitVecVal(...,8)。</span></span><br><span class="line">s.add( BitVecVal(flag[<span class="number">6</span>],<span class="number">8</span>) == (a8 + (a7 &lt;&lt; <span class="number">1</span>) + a6 * BitVecVal(<span class="number">3</span>,<span class="number">8</span>)) * BitVecVal(flag[<span class="number">12</span>],<span class="number">8</span>) )</span><br><span class="line">s.add( BitVecVal(flag[<span class="number">7</span>],<span class="number">8</span>) == (BitVecVal(flag[<span class="number">9</span>],<span class="number">8</span>)  + (a8 &lt;&lt; <span class="number">1</span>) + a7 * BitVecVal(<span class="number">3</span>,<span class="number">8</span>)) * BitVecVal(flag[<span class="number">12</span>],<span class="number">8</span>) )</span><br><span class="line">s.add( BitVecVal(flag[<span class="number">8</span>],<span class="number">8</span>) == (BitVecVal(flag[<span class="number">10</span>],<span class="number">8</span>) + (BitVecVal(flag[<span class="number">9</span>],<span class="number">8</span>) &lt;&lt; <span class="number">1</span>) + a8 * BitVecVal(<span class="number">3</span>,<span class="number">8</span>)) * BitVecVal(flag[<span class="number">12</span>],<span class="number">8</span>) )</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    <span class="comment"># 把求得的 a6,a7,a8 写回 flag 对应位置</span></span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> [a6, a7, a8]:</span><br><span class="line">        idx = <span class="built_in">int</span>(re.search(<span class="string">r&#x27;\d+&#x27;</span>, <span class="built_in">str</span>(v)).group())</span><br><span class="line">        flag[idx] = m[v].as_long()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3) 逆向 XOR 链（forward 做了 f0 = s0^s1; f1 = s1^s2; ...; f5 = s5^s6）</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    flag[i] ^= flag[i + <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;[+] flag: &#x27;</span>, <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> flag))</span><br><span class="line"></span><br><span class="line"><span class="comment"># [+] flag:  Y0u_hav3_r3v3rs3_1t!</span></span><br></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=" "></a> </h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h1&gt;&lt;p&gt;这道题算非常经典的vm题了，用这道题来熟悉一下vm题基本流程&lt;/p&gt;
&lt;h1 id=&quot;正文：&quot;&gt;&lt;a href=&quot;#正文：&quot; cla</summary>
      
    
    
    
    <category term="vm逆向题单" scheme="http://example.com/categories/vm%E9%80%86%E5%90%91%E9%A2%98%E5%8D%95/"/>
    
    
    <category term="vm逆向" scheme="http://example.com/tags/vm%E9%80%86%E5%90%91/"/>
    
    <category term="ctf" scheme="http://example.com/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>godot引擎逆向</title>
    <link href="http://example.com/2025/10/06/ctf%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84misc/godot%E5%BC%95%E6%93%8E%E9%80%86%E5%90%91/"/>
    <id>http://example.com/2025/10/06/ctf%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84misc/godot%E5%BC%95%E6%93%8E%E9%80%86%E5%90%91/</id>
    <published>2025-10-05T16:00:00.000Z</published>
    <updated>2025-10-24T12:54:13.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题型识别："><a href="#题型识别：" class="headerlink" title="题型识别："></a>题型识别：</h1><ul><li><p>ida 打开搜索字符串，看有没有godot字段</p></li><li><p>ida看段表，如果有.pck段就是godot engine题型</p></li></ul><p><img data-src="/images/逆向中的misc/godot/pck.png" alt="pck"></p><h1 id="解包："><a href="#解包：" class="headerlink" title="解包："></a>解包：</h1><p>用这个工具：<a href="https://github.com/GDRETools/gdsdecomp">GitHub - GDRETools/gdsdecomp: Godot reverse engineering tools</a></p><p>下载后运行文件夹里的exe文件</p><p>点击图示recover project</p><p><img data-src="/images/逆向中的misc/godot/解包工具.png" alt="解包工具"></p><p>文件路径选择我们要解包的程序</p><p>点下面的extract就可以看到解包文件夹了</p><h1 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h1><p>脚本后缀都是 <code>.gd</code>：</p><p>这是 godot 自己实现的一种脚本语言，叫 <a href="https://docs.godotengine.org/zh-cn/4.x/tutorials/scripting/gdscript/gdscript_basics.html">GDScript</a></p><p>可以把main.gd扔给chatgpt，然后让他分析就可以了，不用特别掌握语法</p><h1 id="更改代码逻辑后应用"><a href="#更改代码逻辑后应用" class="headerlink" title="更改代码逻辑后应用"></a>更改代码逻辑后应用</h1><p>如果我们更改里边的代码逻辑（比如直接输出flag）怎么实现呢？</p><h2 id="重新打包回-pck文件"><a href="#重新打包回-pck文件" class="headerlink" title="重新打包回.pck文件"></a>重新打包回.pck文件</h2><p><img data-src="/images/逆向中的misc/godot/重打包exe.png" alt="重打包exe"></p><p>点这个之后文件夹路径放我们刚才改完的文件夹，下面的embed pck指要把pck嵌入到exe中替换吗，我们这里选要替换，把exe文件路径填上就可以实现自实现逻辑了</p><h2 id="frida直接hook"><a href="#frida直接hook" class="headerlink" title="frida直接hook"></a>frida直接hook</h2><p>frida是基于动态插桩的hook脚本工具，是用js写的，可以直接让ai帮你写frida脚本，这个东西非常强大，可以hook安卓apk，win中exe等程序，我会放在安卓逆向中讲用法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题型识别：&quot;&gt;&lt;a href=&quot;#题型识别：&quot; class=&quot;headerlink&quot; title=&quot;题型识别：&quot;&gt;&lt;/a&gt;题型识别：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ida 打开搜索字符串，看有没有godot字段&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ida看段表，如</summary>
      
    
    
    
    <category term="ctf逆向中的misc" scheme="http://example.com/categories/ctf%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84misc/"/>
    
    
    <category term="godot engine" scheme="http://example.com/tags/godot-engine/"/>
    
  </entry>
  
  <entry>
    <title>vm逆向基础及做题套路</title>
    <link href="http://example.com/2025/10/06/vm%E9%80%86%E5%90%91/vm%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%A5%97%E8%B7%AF%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2025/10/06/vm%E9%80%86%E5%90%91/vm%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%A5%97%E8%B7%AF%E6%80%BB%E7%BB%93/</id>
    <published>2025-10-05T16:00:00.000Z</published>
    <updated>2025-10-20T07:37:03.731Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>学过计算机组成原理的应该都知道，程序的运行是靠cpu解释可执行文件中操作码来实现的功能，vm逆向顾名思义就是自己定义了小型cpu并定义了指令集，将程序的代码转换自定义的操作码(opcode)，然后在程序执行时再通过解释这些操作码，选择对应的函数执行，从而实现程序原有的功能。</p><h1 id="vm逆向基本原理："><a href="#vm逆向基本原理：" class="headerlink" title="vm逆向基本原理："></a>vm逆向基本原理：</h1><h2 id="vm-init："><a href="#vm-init：" class="headerlink" title="vm_init："></a>vm_init：</h2><p>虚拟机的入口函数，对虚拟机环境进行初始化，初始化一般包括</p><ul><li><p>寄存器初始化(eax,ebx,ecx,edx,eip)</p></li><li><p>把handle函数和操作码连接在一起</p></li><li><p>给虚拟机的栈空间vm_stack分配内存</p></li></ul><h2 id="vm-run"><a href="#vm-run" class="headerlink" title="vm_run:"></a>vm_run:</h2><p>虚拟机开始运行的地方</p><h2 id="vm-dispatcher"><a href="#vm-dispatcher" class="headerlink" title="vm_dispatcher:"></a>vm_dispatcher:</h2><p>调度器，解释opcode，并选择对应的handle函数执行，当handle执行完后会跳回这里，形成一个循环。</p><h2 id="vm-handle"><a href="#vm-handle" class="headerlink" title="vm_handle:"></a>vm_handle:</h2><p>处理器，当rip走到对应操作码时调用对应操作函数，并接受操作数。</p><h2 id="opcode"><a href="#opcode" class="headerlink" title="opcode :"></a>opcode :</h2><p>程序可执行代码转换成的操作码</p><p>在这种情况下，如果要逆向程序，就需要对整个emulator结构进行逆向，理解程序功能，还需要结合opcode进行分析，整个程序逆向工程将会十分繁琐。这是一个一般虚拟机结构：<br><img data-src="/images/vm逆向/vm逆向.png" alt="vm逆向"></p><h2 id="vm-lables"><a href="#vm-lables" class="headerlink" title="vm_lables:"></a>vm_lables:</h2><p>有的虚拟机涉及lable的创造和调用，起到跳转目的</p><h2 id="分析方法"><a href="#分析方法" class="headerlink" title="分析方法"></a>分析方法</h2><p>在比赛中，虚拟机题目常常有两种考法：</p><ul><li><p>给可执行程序和opcode，逆向emulator，结合opcode文件，推出flag</p></li><li><p>只给可执行程序，逆向emulator，构造opcode，读取flag</p></li></ul><p>拿到一个虚拟机之后，一般有以下几个逆向过程：</p><ul><li><p>分析虚拟机入口，搞清虚拟机的输入，或者opcode位置</p></li><li><p>理清虚拟机结构，包括Dispatcher和各个Handler</p></li><li><p>逆向各个Handler，分析opcode的意义</p></li><li><p>根据opcode运行时打印出对应汇编代码，根据汇编代码逻辑进行逆向</p></li></ul><h1 id="一个简单vm虚拟机实例："><a href="#一个简单vm虚拟机实例：" class="headerlink" title="一个简单vm虚拟机实例："></a>一个简单vm虚拟机实例：</h1><h2 id="vm-cpu结构体"><a href="#vm-cpu结构体" class="headerlink" title="vm_cpu结构体"></a>vm_cpu结构体</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r1;    <span class="comment">//虚拟寄存器r1</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r2;    <span class="comment">//虚拟寄存器r2</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r3;    <span class="comment">//虚拟寄存器r3</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *eip;    <span class="comment">//指向正在解释的opcode地址</span></span><br><span class="line">    vm_opcode op_list[OPCODE_N];    <span class="comment">//opcode列表，存放了所有的opcode及其对应的处理函数</span></span><br><span class="line">&#125;vm_cpu;</span><br></pre></td></tr></table></figure><h2 id="vm-opcode结构体"><a href="#vm-opcode结构体" class="headerlink" title="vm_opcode结构体"></a>vm_opcode结构体</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> opcode;</span><br><span class="line">    <span class="built_in">void</span> (*handle)(<span class="type">void</span>*);</span><br><span class="line">&#125;vm_opcode;</span><br></pre></td></tr></table></figure><h2 id="vm-init"><a href="#vm-init" class="headerlink" title="vm_init()"></a>vm_init()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">vm_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vm_vpu *cpu;</span><br><span class="line">    cpu-&gt;r1 = <span class="number">0</span>;</span><br><span class="line">    cpu-&gt;r2 = <span class="number">0</span>;</span><br><span class="line">    cpu-&gt;r3 = <span class="number">0</span>;</span><br><span class="line">    cpu-&gt;eip = (<span class="type">unsigned</span> <span class="type">char</span> *)vm_code;<span class="comment">//将eip指向opcode的地址</span></span><br><span class="line"></span><br><span class="line">    cpu-&gt;op_list[<span class="number">0</span>].opcode = <span class="number">0x1</span>;</span><br><span class="line">    cpu-&gt;op_list[<span class="number">0</span>].handle = (<span class="built_in">void</span> (*)(<span class="type">void</span> *))mov;<span class="comment">//将操作字节码与对应的handle函数关联在一起</span></span><br><span class="line"></span><br><span class="line">    cpu-&gt;op_list[<span class="number">1</span>].opcode = <span class="number">0xf2</span>;</span><br><span class="line">    cpu-&gt;op_list[<span class="number">1</span>].handle = (<span class="built_in">void</span> (*)(<span class="type">void</span> *))<span class="keyword">xor</span>;</span><br><span class="line"></span><br><span class="line">    cpu-&gt;op_list[<span class="number">2</span>].opcode = <span class="number">0xf5</span>;</span><br><span class="line">    cpu-&gt;op_list[<span class="number">2</span>].handle = (<span class="built_in">void</span> (*)(<span class="type">void</span> *))read_;</span><br><span class="line"></span><br><span class="line">    vm_stack = <span class="built_in">malloc</span>(<span class="number">0x512</span>);</span><br><span class="line">    <span class="built_in">memset</span>(vm_stack,<span class="number">0</span>,<span class="number">0x512</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="handles-示例"><a href="#handles-示例" class="headerlink" title="handles(示例)"></a>handles(示例)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">mov</span><span class="params">(vm_cpu *cpu)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xor</span><span class="params">(vm_cpu *cpu)</span></span>;    <span class="comment">//xor flag</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read_</span><span class="params">(vm_cpu *cpu)</span></span>;    <span class="comment">//call read, read the flag</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xor</span><span class="params">(vm_cpu *cpu)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    temp = cpu-&gt;r1 ^ cpu-&gt;r2;</span><br><span class="line">    temp ^= <span class="number">0x12</span>;</span><br><span class="line">    cpu-&gt;r1 = temp;</span><br><span class="line">    cpu-&gt;eip += <span class="number">1</span>;    <span class="comment">//xor指令占一个字节</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read_</span><span class="params">(vm_cpu *cpu)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> *dest = vm_stack;</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>,dest,<span class="number">12</span>);    <span class="comment">//用于往虚拟机的栈上读取数据</span></span><br><span class="line">    cpu-&gt;eip += <span class="number">1</span>;    <span class="comment">//read_指令占一个字节</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mov</span><span class="params">(vm_cpu *cpu)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//mov指令的参数都因曾在字节码也就是vm_code中，指令表示后的一个字节是寄存器表示，第二到</span></span><br><span class="line"><span class="comment">//第五是要mov的数据在vm_stack上的偏移</span></span><br><span class="line">    <span class="comment">//这里只是实现了从vm_stack上取数据和存数据到vm_stack上</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *res = cpu-&gt;eip + <span class="number">1</span>;    <span class="comment">//寄存器标识</span></span><br><span class="line">    <span class="type">int</span> *offset = (<span class="type">int</span> *)(cpu-&gt;eip + <span class="number">2</span>);    <span class="comment">//寄存器在vm_stack上的偏移</span></span><br><span class="line">    <span class="type">char</span> *dest = <span class="number">0</span>;</span><br><span class="line">    dest = vm_stack;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (*res) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xe1</span>:</span><br><span class="line">            cpu-&gt;r1 = *(dest + *offset);</span><br><span class="line">            <span class="keyword">break</span>;   </span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xe2</span>:</span><br><span class="line">            cpu-&gt;r2 = *(dest + *offset);</span><br><span class="line">            <span class="keyword">break</span>;   </span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xe3</span>:</span><br><span class="line">            cpu-&gt;r3 = *(dest + *offset);</span><br><span class="line">            <span class="keyword">break</span>;   </span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xe4</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x = cpu-&gt;r1;</span><br><span class="line">            *(dest + *offset) = x;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    cpu-&gt;eip += <span class="number">6</span>;</span><br><span class="line">    <span class="comment">//mov指令占六个字节，所以eip要向后移6位</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="vm-code"><a href="#vm-code" class="headerlink" title="vm_code"></a>vm_code</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">​<span class="type">unsigned</span> <span class="type">char</span> vm_code[] = &#123;</span><br><span class="line">    <span class="number">0xf5</span>,</span><br><span class="line">    <span class="number">0xf1</span>,<span class="number">0xe1</span>,<span class="number">0x0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xf2</span>,<span class="number">0xf1</span>,<span class="number">0xe4</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xf1</span>,<span class="number">0xe1</span>,<span class="number">0x1</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xf2</span>,<span class="number">0xf1</span>,<span class="number">0xe4</span>,<span class="number">0x21</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xf1</span>,<span class="number">0xe1</span>,<span class="number">0x2</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xf2</span>,<span class="number">0xf1</span>,<span class="number">0xe4</span>,<span class="number">0x22</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xf1</span>,<span class="number">0xe1</span>,<span class="number">0x3</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xf2</span>,<span class="number">0xf1</span>,<span class="number">0xe4</span>,<span class="number">0x23</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xf1</span>,<span class="number">0xe1</span>,<span class="number">0x4</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xf2</span>,<span class="number">0xf1</span>,<span class="number">0xe4</span>,<span class="number">0x24</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xf1</span>,<span class="number">0xe1</span>,<span class="number">0x5</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xf2</span>,<span class="number">0xf1</span>,<span class="number">0xe4</span>,<span class="number">0x25</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xf1</span>,<span class="number">0xe1</span>,<span class="number">0x6</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xf2</span>,<span class="number">0xf1</span>,<span class="number">0xe4</span>,<span class="number">0x26</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xf1</span>,<span class="number">0xe1</span>,<span class="number">0x7</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xf2</span>,<span class="number">0xf1</span>,<span class="number">0xe4</span>,<span class="number">0x27</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xf1</span>,<span class="number">0xe1</span>,<span class="number">0x8</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xf2</span>,<span class="number">0xf1</span>,<span class="number">0xe4</span>,<span class="number">0x28</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xf1</span>,<span class="number">0xe1</span>,<span class="number">0x9</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xf2</span>,<span class="number">0xf1</span>,<span class="number">0xe4</span>,<span class="number">0x29</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xf1</span>,<span class="number">0xe1</span>,<span class="number">0xa</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xf2</span>,<span class="number">0xf1</span>,<span class="number">0xe4</span>,<span class="number">0x2a</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xf1</span>,<span class="number">0xe1</span>,<span class="number">0xb</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xf2</span>,<span class="number">0xf1</span>,<span class="number">0xe4</span>,<span class="number">0x2b</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xf4</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">​</span><br></pre></td></tr></table></figure><h3 id="vm-stack"><a href="#vm-stack" class="headerlink" title="vm_stack"></a>vm_stack</h3><p>一般是一个全局数组，用于存放虚拟机的栈</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vm_stack = <span class="built_in">malloc</span>(<span class="number">0x512</span>);</span><br><span class="line"><span class="built_in">memset</span>(vm_stack,<span class="number">0</span>,<span class="number">0x512</span>);</span><br></pre></td></tr></table></figure><h2 id="vm-run-1"><a href="#vm-run-1" class="headerlink" title="vm_run"></a>vm_run</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">vm_run</span><span class="params">(vm_cpu *cpu)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    进入虚拟机</span></span><br><span class="line"><span class="comment">    eip指向要被解释的opcode地址</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    cpu-&gt;eip = (<span class="type">unsigned</span> <span class="type">char</span>*)opcodes;</span><br><span class="line">    <span class="keyword">while</span>((*cpu-&gt;eip) != <span class="number">0xf4</span>)<span class="comment">//如果opcode不为RET，就调用vm_dispatcher来解释执行</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">vm_dispatcher</span>(*cpu-&gt;eip)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="vm-dispatcher-1"><a href="#vm-dispatcher-1" class="headerlink" title="vm_dispatcher"></a>vm_dispatcher</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">vm_dispatcher</span><span class="params">(vm_cpu *cpu)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; OPCODE_N; i++)</span><br><span class="line">    &#123;    </span><br><span class="line">        <span class="keyword">if</span>(*cpu-&gt;eip == cpu-&gt;op_list[i].opcode)</span><br><span class="line">        &#123;</span><br><span class="line">            cpu-&gt;op_list[i].<span class="built_in">handle</span>(cpu);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="做题流程："><a href="#做题流程：" class="headerlink" title="做题流程："></a>做题流程：</h1><ul><li><p>先根据上面的特征静态分析判断函数是vm中的哪一部分，如果静态分析困难，那就动调一下</p></li><li><p>找到对应部分后创建上述结构体来帮助分析</p></li><li><p>自己把vm还原在vscode里，并在dispatcher部分加上打印这条指令的代码，有的时候也可以打印stack，和当前执行完指令的内存状态(各个变量的值)</p></li><li><p>根据打印出的汇编指令，手动逆向</p></li></ul><p>具体使用方法还需在实战中不断练习，具体做题流程可看我的vm题单真题</p><h1 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h1><p><a href="https://blog.csdn.net/weixin_43876357/article/details/108570305">虚拟机逆向与实现-CSDN博客</a></p><p><a href="https://www.freebuf.com/column/174623.html">虚拟机保护逆向入门 - FreeBuf网络安全行业门户</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h1&gt;&lt;p&gt;学过计算机组成原理的应该都知道，程序的运行是靠cpu解释可执行文件中操作码来实现的功能，vm逆向顾名思义就是自己定义了小型cpu并定</summary>
      
    
    
    
    <category term="vm逆向题单" scheme="http://example.com/categories/vm%E9%80%86%E5%90%91%E9%A2%98%E5%8D%95/"/>
    
    
    <category term="vm逆向" scheme="http://example.com/tags/vm%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>rust逆向基础-rust基础语法</title>
    <link href="http://example.com/2025/10/01/rust%E9%80%86%E5%90%91%E9%A2%98%E5%8D%95/rust%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2025/10/01/rust%E9%80%86%E5%90%91%E9%A2%98%E5%8D%95/rust%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/</id>
    <published>2025-09-30T16:00:00.000Z</published>
    <updated>2025-10-01T15:24:00.067Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h1><p>拖了很久的rust逆向都一直没学,正好编译原理要做rust语法分析器,顺便把rust语言学一下</p><h2 id="rust相比其他编程语言的优势"><a href="#rust相比其他编程语言的优势" class="headerlink" title="rust相比其他编程语言的优势:"></a>rust相比其他编程语言的优势:</h2><ul><li><p>rust不通过<code>GC</code>(garbage collection)机制管理内存,例如python,golang等基于GC机制的编程语言会在exe运行时不断寻找虚拟地址中无用的内存空间.这会大大降低运行速度</p></li><li><p>rust使用所有权机制管理内存,这也使得它相比与手动开辟内存的c/c++更安全</p></li></ul><p>我们rust在逆向中通常用于网络编程,游戏编程,wasm,嵌入式.所以写游戏外挂,实现检测外挂都必须要学习rust.</p><h1 id="语法"><a href="#语法" class="headerlink" title="语法:"></a>语法:</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量:"></a>变量:</h2><p>rust中变量声明要用let.rust中每个变量类型可以自己指定,也可交给编译器推断,每个变量类型可以声明可变也可声明不可变.(注:如果要声明常量类型时,常量名一定要全大写,并且必须显示指定类型.例如<code>const MAX:u32=10;</code>)</p><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><ul><li><p>有符号：<code>i8, i16, i32, i64, i128, isize</code></p></li><li><p>无符号：<code>u8, u16, u32, u64, u128, usize</code></p></li></ul><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><ul><li><p><code>f32</code>（32 位单精度）</p></li><li><p><code>f64</code>（64 位双精度，默认）</p></li></ul><h3 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h3><ul><li><p>true</p></li><li><p>false</p></li></ul><h3 id="char型"><a href="#char型" class="headerlink" title="char型"></a>char型</h3><h3 id="字符串型"><a href="#字符串型" class="headerlink" title="字符串型"></a>字符串型</h3><ul><li><p><code>&amp;str</code> → 字符串切片（不可变）</p></li><li><p><code>String</code> → 堆分配的可变字符串</p></li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">n</span>: <span class="type">i32</span>= <span class="number">5</span>; <span class="comment">// 变量后的：i32可以自己指定，也可让编译器推断</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">i</span>: <span class="type">u32</span> = <span class="number">5</span>; <span class="comment">// u32 表示32位无符号整数,mut表示可变</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of n is &#123;&#125;&quot;</span>,n); <span class="comment">// println! 用来打印字符串到终端，n代表换行，!代表宏</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of i is &#123;&#125;&quot;</span>,i);</span><br><span class="line">    i=<span class="number">7</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of i is &#123;&#125;&quot;</span>,i);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span>: <span class="type">f64</span> = <span class="number">5.2</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of x is &#123;&#125;&quot;</span>,x);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span>: <span class="type">char</span> =<span class="string">&#x27;d&#x27;</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of y is &#123;&#125;&quot;</span>,y);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">t</span>=<span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of t is &#123;&#125;&quot;</span>,t);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">str</span>: &amp;<span class="type">str</span>=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of str is &#123;&#125;&quot;</span>,<span class="type">str</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s2</span>: <span class="type">String</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    s2.<span class="title function_ invoke__">push_str</span>(<span class="string">&quot;, Rust!&quot;</span>);        <span class="comment">// 可变字符串</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">The value of n is 5</span><br><span class="line">The value of i is 5</span><br><span class="line">The value of i is 7</span><br><span class="line">The value of x is 5.2</span><br><span class="line">The value of y is d</span><br><span class="line">The value of t is true</span><br><span class="line">The value of str is hello</span><br><span class="line">Hello, Rust!</span><br></pre></td></tr></table></figure><h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句:"></a>控制语句:</h2><h3 id="if-else-if-else"><a href="#if-else-if-else" class="headerlink" title="if-else if-else"></a>if-else if-else</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// if</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">n</span> = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">if</span> n &lt; <span class="number">0</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;负数&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;非负数&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><ul><li><p>loop 一直循环</p></li><li><p>while 有条件的循环</p></li><li><p>for</p></li></ul><p>可以通过break跳出循环,也可以通过continue继续当前循环.这和c++是一样的</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// loop</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">counter</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">result</span> = <span class="keyword">loop</span> &#123;</span><br><span class="line">    counter += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> counter == <span class="number">10</span> &#123;</span><br><span class="line">        <span class="keyword">break</span> counter * <span class="number">2</span>; <span class="comment">// 返回值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// while</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">i</span> = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">while</span> i &gt; <span class="number">0</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, i);</span><br><span class="line">    i -= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">arr</span> = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"><span class="keyword">for</span> <span class="variable">val</span> <span class="keyword">in</span> arr &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Match"><a href="#Match" class="headerlink" title="Match"></a>Match</h3><p>match的用法和if-else很像,但是要注意match要把所有情况包含在内,不然编译阶段就报错</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">match</span> x &#123;</span><br><span class="line">    <span class="number">1</span> | <span class="number">2</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;一或二&quot;</span>),</span><br><span class="line">    <span class="number">3</span>..=<span class="number">7</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;三到七之间&quot;</span>), <span class="comment">// 范围匹配</span></span><br><span class="line">    _ =&gt; <span class="built_in">println!</span>(<span class="string">&quot;其他&quot;</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数使用"><a href="#函数使用" class="headerlink" title="函数使用"></a>函数使用</h3><p>基本的函数定义是<code>fn fucnction(a:i32,b:i32) -&gt; i32</code>其中箭头右面的是返回值类型.rust函数表达力非常强</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">add</span>(a:<span class="type">i32</span>,b:<span class="type">i32</span>)<span class="punctuation">-&gt;</span><span class="type">i32</span>&#123;</span><br><span class="line">    a+b <span class="comment">//不加分号，rust会将最后一行作为返回值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span>=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b</span>=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">res</span>=<span class="title function_ invoke__">add</span>(a,b);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,res);<span class="comment">//println!()是rust的输出函数，其中第一个参数必须是&quot;&quot;包裹的字符串(不能用&#x27;&#x27;替代)，第二个参数是占位符，占位符的值通过&#123;&#125;来传递</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包:"></a>闭包:</h3><p>闭包可以理解成python里的lambda差不多,相当于匿名函数</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">sum</span>=|a:<span class="type">i32</span>,b:<span class="type">i32</span>|<span class="punctuation">-&gt;</span><span class="type">i32</span>&#123;a+b&#125;;<span class="comment">//这里定义时是用||包裹参数，调用时和正常函数一样</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">res</span>=<span class="title function_ invoke__">sum</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The sum is &#123;&#125;&quot;</span>,res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="rust复合类型"><a href="#rust复合类型" class="headerlink" title="rust复合类型"></a>rust复合类型</h2><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举:"></a>枚举:</h3><p>简单来说，<strong>枚举（<code>enum</code>）就是用来表示“一个值可能属于几种互斥情况之一”</strong>，也就是“有限状态或选择”。</p><p>换句话说，它适合表示<strong>有多种可能性，但每次只能选一个</strong>的场景。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">TrafficLight</span> &#123;</span><br><span class="line">    Red,</span><br><span class="line">    Yellow,</span><br><span class="line">    Green,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">light</span> = TrafficLight::Red;</span><br><span class="line"><span class="keyword">match</span> light &#123;</span><br><span class="line">    TrafficLight::Red =&gt; <span class="built_in">println!</span>(<span class="string">&quot;停&quot;</span>),</span><br><span class="line">    TrafficLight::Yellow =&gt; <span class="built_in">println!</span>(<span class="string">&quot;准备&quot;</span>),</span><br><span class="line">    TrafficLight::Green =&gt; <span class="built_in">println!</span>(<span class="string">&quot;走&quot;</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结构体基础"><a href="#结构体基础" class="headerlink" title="结构体基础:"></a>结构体基础:</h3><p>结构体和enum不一样的点在于声明结构体时,要把内部变量的类型写出来.而enum就不用</p><p>其中对#[derive(Debug)]的解释:</p><div class="table-container"><table><thead><tr><th>部分</th><th>含义</th><th>记忆小技巧</th></tr></thead><tbody><tr><td><code>#[]</code></td><td>Rust 的 <strong>属性（attribute）标记</strong>，用来告诉编译器对后面的结构体/枚举做某些处理</td><td>“井号括号 → 给编译器的指令”</td></tr><tr><td><code>derive</code></td><td>自动 <strong>派生/生成实现</strong> trait 的代码</td><td>“derive = 自动生成某种功能”</td></tr><tr><td><code>(Debug)</code></td><td>指定生成的 trait 是 <code>Debug</code></td><td>“Debug = 调试打印能力”</td></tr></tbody></table></div><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    x: <span class="type">i32</span>,</span><br><span class="line">    y: <span class="type">i32</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">n</span>=Node&#123;x: <span class="number">1</span>, y: <span class="number">2</span>&#125;;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span>=n.x;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span>=n.y;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, x);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, y);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, n); <span class="comment">//打印结构体或enum类型，要用&#123;:?&#125;,配合结构体定义上方的#[derive(Debug)]打印结构体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结构体进阶"><a href="#结构体进阶" class="headerlink" title="结构体进阶:"></a>结构体进阶:</h3><p>Rust 很多地方受 JavaScript 影响，在实例化结构体的时候用 JSON 对象的 key: value 语法来实现定义：</p><p>实例化时:</p><p>结构体类名 {<br>    字段名 : 字段值,<br>    …<br>}</p><p>(1)在结构体内部用impl关键字实现内联函数:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    x: <span class="type">i32</span>,</span><br><span class="line">    y: <span class="type">i32</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">area</span>(x:<span class="type">i32</span>,y:<span class="type">i32</span>)<span class="punctuation">-&gt;</span><span class="type">i32</span>&#123;</span><br><span class="line">        x*y</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">n</span>=Node&#123;x: <span class="number">1</span>, y: <span class="number">2</span>&#125;;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span>=n.x;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span>=n.y;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span>=Node::<span class="title function_ invoke__">area</span>(x, y);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> (2)用结构体中self指针实现</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    x: <span class="type">i32</span>,</span><br><span class="line">    y: <span class="type">i32</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// impl Node&#123;</span></span><br><span class="line"><span class="comment">//     fn area(x:i32,y:i32)-&gt;i32&#123;</span></span><br><span class="line"><span class="comment">//         x*y</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">area</span>(&amp;<span class="keyword">self</span>)<span class="punctuation">-&gt;</span><span class="type">i32</span>&#123;</span><br><span class="line">        <span class="keyword">self</span>.x*<span class="keyword">self</span>.y</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">n</span>=Node&#123;x: <span class="number">1</span>, y: <span class="number">2</span>&#125;;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span>=n.x;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span>=n.y;</span><br><span class="line">    <span class="comment">//let s=Node::area(x, y);</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span>=n.<span class="title function_ invoke__">area</span>();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3)结构体实现构造函数</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    x: <span class="type">i32</span>,</span><br><span class="line">    y: <span class="type">i32</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">new</span>(x:<span class="type">i32</span>,y:<span class="type">i32</span>)<span class="punctuation">-&gt;</span><span class="keyword">Self</span>&#123;<span class="comment">//默认构造函数名都叫new，但这不是个关键字</span></span><br><span class="line">        Node&#123;</span><br><span class="line">            x:x,</span><br><span class="line">            y:y</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">area</span>(&amp;<span class="keyword">self</span>)<span class="punctuation">-&gt;</span><span class="type">i32</span>&#123;</span><br><span class="line">        <span class="keyword">self</span>.x*<span class="keyword">self</span>.y</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">n</span>=Node::<span class="title function_ invoke__">new</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span>=n.x;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span>=n.y;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span>=n.<span class="title function_ invoke__">area</span>();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(4)self的用法:</p><ul><li><p><strong><code>self</code> 小写</strong> = 当前对象实例指针。</p></li><li><p><strong><code>Self</code> 大写</strong> = 当前类型名。</p></li></ul><p>self指针也分为可变和不可变的,可变的要在self前加关键字mut</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    name:<span class="type">String</span>,</span><br><span class="line">    age:<span class="type">u32</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">new</span>(name:<span class="type">String</span>,age:<span class="type">u32</span>)<span class="punctuation">-&gt;</span><span class="keyword">Self</span>&#123;</span><br><span class="line">        Person&#123;name,age&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//不可变的this指针</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">greet</span>(&amp;<span class="keyword">self</span>)<span class="punctuation">-&gt;</span><span class="type">String</span>&#123;</span><br><span class="line">        <span class="built_in">format!</span>(<span class="string">&quot;Hello,my name is &#123;&#125; and I am &#123;&#125; years old.&quot;</span>,<span class="keyword">self</span>.name,<span class="keyword">self</span>.age)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//可变的this指针</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">up_age</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>)<span class="punctuation">-&gt;</span><span class="type">u32</span>&#123;</span><br><span class="line">        <span class="keyword">self</span>.age+=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">self</span>.age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span>=Person::<span class="title function_ invoke__">new</span>(<span class="string">&quot;原子&quot;</span>.<span class="title function_ invoke__">to_string</span>(), <span class="number">18</span>); <span class="comment">//“原子”是静态str.&amp;str类型，要转成可变的String</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:#?&#125;&quot;</span>,a); <span class="comment">//&#123;:#?&#125;是调试格式，和&#123;:?&#125;的区别是，&#123;:#?&#125;会多出缩进，方便阅读</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,a.<span class="title function_ invoke__">greet</span>());</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">b</span> =a;</span><br><span class="line">    b.<span class="title function_ invoke__">up_age</span>();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,b.<span class="title function_ invoke__">greet</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Person &#123;</span><br><span class="line">    name: &quot;原子&quot;,</span><br><span class="line">    age: 18,</span><br><span class="line">&#125;</span><br><span class="line">Hello,my name is 原子 and I am 18 years old.</span><br><span class="line">Hello,my name is 原子 and I am 19 years old.</span><br></pre></td></tr></table></figure><p>self还有一个不经常用的用法:就是如果传入参数是self(不带&amp;)的话:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    x: <span class="type">i32</span>,</span><br><span class="line">    y: <span class="type">i32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="comment">// 这里的 self 是按值传递，意味着把 Node 本身交给这个方法</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">into_tuple</span>(<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> (<span class="type">i32</span>, <span class="type">i32</span>) &#123;</span><br><span class="line">        (<span class="keyword">self</span>.x, <span class="keyword">self</span>.y)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">n</span> = Node &#123; x: <span class="number">1</span>, y: <span class="number">2</span> &#125;;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">t</span> = n.<span class="title function_ invoke__">into_tuple</span>();  <span class="comment">//  这里 n 被 move 走</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, t);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// println!(&quot;&#123;:?&#125;&quot;, n.x); //  报错：因为 n 的所有权已经交出，不能再用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="元组"><a href="#元组" class="headerlink" title="元组:"></a>元组:</h3><p>1.基本定义:元组就是把多个不同类型的值组合在一起的复合类型。<br>语法：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">tup</span>: (<span class="type">i32</span>, <span class="type">f64</span>, <span class="type">char</span>) = (<span class="number">500</span>, <span class="number">6.4</span>, <span class="string">&#x27;a&#x27;</span>);</span><br></pre></td></tr></table></figure><p>2.访问元素</p><p>有两种方式：</p><p>方式一：解构</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">tup</span> = (<span class="number">500</span>, <span class="number">6.4</span>, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> (x, y, z) = tup;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;y 的值是: &#123;&#125;&quot;</span>, y);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>方式二：点语法（下标访问）</p><p>注意第一个元素下标是0</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">tup</span> = (<span class="number">500</span>, <span class="number">6.4</span>, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;第一个元素是: &#123;&#125;&quot;</span>, tup.<span class="number">0</span>);</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;第二个元素是: &#123;&#125;&quot;</span>, tup.<span class="number">1</span>);</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;第三个元素是: &#123;&#125;&quot;</span>, tup.<span class="number">2</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.特点:可以包含不同类型的值</p><p>长度固定，不能改变</p><p>4.打印可利用{:?}来打印</p><h1 id="核心机制-amp-数据结构"><a href="#核心机制-amp-数据结构" class="headerlink" title="核心机制&amp;数据结构"></a>核心机制&amp;数据结构</h1><h2 id="栈和堆存放"><a href="#栈和堆存放" class="headerlink" title="栈和堆存放"></a>栈和堆存放</h2><ol><li>栈 (Stack) 的特点</li></ol><ul><li><p>后进先出 (LIFO) 的数据结构，内存分配和释放都非常快。</p></li><li><p>大小在编译时必须确定。</p></li><li><p>栈上的数据一般是 <strong>固定大小、生命周期明确的值</strong>。</p></li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">42</span>;       <span class="comment">// i32，大小固定 4 字节</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">y</span> = <span class="literal">true</span>;     <span class="comment">// bool，1 字节</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">z</span> = <span class="string">&#x27;a&#x27;</span>;      <span class="comment">// char，4 字节</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">s</span> : &amp;<span class="type">str</span> = <span class="symbol">&#x27;hell</span>o<span class="string">&#x27;  //静态字符串切片,长度固定,在栈上</span></span><br></pre></td></tr></table></figure><ol><li>堆 (Heap) 的特点</li></ol><ul><li><p>内存大小运行时才能确定。</p></li><li><p>需要手动申请（在 Rust 中由所有权系统管理，避免泄漏）。</p></li><li><p>分配和释放开销比栈大，但适合存放 <strong>动态大小或不确定大小的数据</strong>。</p></li></ul><h2 id="所有权机制"><a href="#所有权机制" class="headerlink" title="所有权机制"></a>所有权机制</h2><p>堆和栈上数据都有所有权的这个概念,但是栈上数据拷贝时不会move(转移所有权),而是使用copy(复制一个样本),堆会move</p><p><strong>栈上的数据</strong>：如果它的类型实现了 Copy trait（比如 i32、bool、char、浮点数、简单元组），那么赋值时不会发生“严格意义上的 move”，而是直接 复制一份值。</p><ul><li>所以原变量不会失效，看起来像“转移没事”。</li></ul><p>实际上这不是“move”，而是 copy。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span> = x;  <span class="comment">// Copy，不是 move</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;x=&#123;&#125;, y=&#123;&#125;&quot;</span>, x, y); <span class="comment">//  x 还能用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>堆上的数据</strong>：比如 <code>String</code>、<code>Vec</code>，它们没实现 <code>Copy</code>，赋值时会发生 <strong>move</strong>。</p><ul><li>所有权转移后，原变量会失效，防止两个变量同时指向同一块堆内存。</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s2</span> = s1;   <span class="comment">// Move</span></span><br><span class="line">    <span class="comment">// println!(&quot;&#123;&#125;&quot;, s1); // 报错：s1 已经失效</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s2);   <span class="comment">//  只有 s2 能用了</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="引用和可变引用"><a href="#引用和可变引用" class="headerlink" title="引用和可变引用:"></a>引用和可变引用:</h3><p>引用 (Reference)</p><ul><li><p>引用本质上就是 <strong>借用 (borrow)</strong>。</p></li><li><p>借用不会转移所有权，值的所有者依然是原来的变量。</p></li><li><p>分为：</p><p><strong>不可变引用 (&amp;T)</strong>：可以有多个，但不能和可变引用同时存在。</p><p><strong>可变引用 (&amp;mut T)</strong>：只能有一个，且不能和不可变引用共存。(可变引用要求被引用的变量是可变的)</p></li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span>:<span class="type">String</span> =<span class="string">&quot;hello world&quot;</span>.<span class="title function_ invoke__">to_string</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">r1</span>=&amp;a; <span class="comment">//这里就算拷贝给r1,也能成功输出</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="clone的使用"><a href="#clone的使用" class="headerlink" title="clone的使用:"></a>clone的使用:</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug,Clone)]</span> <span class="comment">//必须结构体里的所有字段都是可拷贝的，才可像正常u32，i32那样使用</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">man</span>&#123;</span><br><span class="line">    name:<span class="type">String</span>,</span><br><span class="line">    age:<span class="type">u32</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = man&#123;</span><br><span class="line">        name:<span class="string">&quot;原子&quot;</span>.<span class="title function_ invoke__">to_string</span>(),</span><br><span class="line">        age:<span class="number">18</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">m</span>=a.<span class="title function_ invoke__">clone</span>();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>,a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>clone就相当于c++中的深拷贝,解决了两个指针指向同一块内存的问题,所以clone之后就可以正常赋值,并接着使用</p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期:"></a>生命周期:</h3><p>生命周期用语法 <code>&#39;a</code> 表示：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">example</span>&lt;<span class="symbol">&#x27;a</span>&gt;(s: &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当结构体里有引用时，必须标注生命周期：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Person</span>&lt;<span class="symbol">&#x27;a</span>&gt; &#123;</span><br><span class="line">    name: &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>,</span><br><span class="line">    age: <span class="type">u32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">name</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">p</span> = Person &#123; name: &amp;name, age: <span class="number">20</span> &#125;; <span class="comment">// name 生命周期必须 ≥ p 生命周期</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>生命周期的核心思想:<strong>引用永远不能比它指向的数据活得长</strong>。</p><p>编译器在编译期检查生命周期，保证安全。</p><p><code>&#39;a</code> 是标识符，用来关联多个引用的生命周期。</p><h2 id="常用数据结构"><a href="#常用数据结构" class="headerlink" title="常用数据结构:"></a>常用数据结构:</h2><h3 id="String"><a href="#String" class="headerlink" title="String:"></a>String:</h3><p>&amp;str:是String类型的一个切片.长度确定放在栈上.</p><p>String一般长度不确定,放在堆上</p><h4 id="创建"><a href="#创建" class="headerlink" title="创建:"></a>创建:</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();              <span class="comment">// 空字符串</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">s2</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);      <span class="comment">// 从字面量创建</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">s3</span> = <span class="string">&quot;world&quot;</span>.<span class="title function_ invoke__">to_string</span>();        <span class="comment">// &amp;str 转 String</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="添加"><a href="#添加" class="headerlink" title="添加:"></a>添加:</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">s.<span class="title function_ invoke__">push</span>(<span class="string">&#x27;!&#x27;</span>);          <span class="comment">// 添加单个字符</span></span><br><span class="line">s.<span class="title function_ invoke__">push_str</span>(<span class="string">&quot; World&quot;</span>); <span class="comment">// 添加字符串切片</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="拼接"><a href="#拼接" class="headerlink" title="拼接:"></a>拼接:</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">s2</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;World&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 + 或 format! 宏</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">s3</span> = s1 + &amp;s2;           <span class="comment">// s1 被移动，s2 被借用</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">s4</span> = <span class="built_in">format!</span>(<span class="string">&quot;&#123;&#125; &#123;&#125;&quot;</span>, s2, <span class="string">&quot;!!!&quot;</span>);  <span class="comment">// 不移动任何变量</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="获取长度和容量"><a href="#获取长度和容量" class="headerlink" title="获取长度和容量"></a>获取长度和容量</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;length: &#123;&#125;&quot;</span>, s.<span class="title function_ invoke__">len</span>());    <span class="comment">// 字节数</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;capacity: &#123;&#125;&quot;</span>, s.<span class="title function_ invoke__">capacity</span>()); <span class="comment">// 堆上分配的容量</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="删除内容"><a href="#删除内容" class="headerlink" title="删除内容"></a>删除内容</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">s.<span class="title function_ invoke__">pop</span>();              <span class="comment">// 删除最后一个字符</span></span><br><span class="line">s.<span class="title function_ invoke__">clear</span>();            <span class="comment">// 清空整个字符串</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="索引与切片"><a href="#索引与切片" class="headerlink" title="索引与切片"></a>索引与切片</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="comment">// let c = s[0]; //  String 不支持直接索引</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">slice</span> = &amp;s[<span class="number">0</span>..<span class="number">2</span>]; <span class="comment">//  切片，返回 &amp;str，必须按字节边界</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="查找和替换"><a href="#查找和替换" class="headerlink" title="查找和替换"></a>查找和替换</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s.<span class="title function_ invoke__">contains</span>(<span class="string">&quot;world&quot;</span>));  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s.<span class="title function_ invoke__">find</span>(<span class="string">&quot;world&quot;</span>).<span class="title function_ invoke__">unwrap</span>()); <span class="comment">// 6，找到索引</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">new_s</span> = s.<span class="title function_ invoke__">replace</span>(<span class="string">&quot;world&quot;</span>, <span class="string">&quot;Rust&quot;</span>);</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, new_s); <span class="comment">// hello Rust</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="分割字符串"><a href="#分割字符串" class="headerlink" title="分割字符串"></a>分割字符串</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;a,b,c&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">v</span>: <span class="type">Vec</span>&lt;&amp;<span class="type">str</span>&gt; = s.<span class="title function_ invoke__">split</span>(<span class="string">&#x27;,&#x27;</span>).<span class="title function_ invoke__">collect</span>();</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, v); <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历字符</span></span><br><span class="line"><span class="keyword">for</span> <span class="variable">c</span> <span class="keyword">in</span> s.<span class="title function_ invoke__">chars</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历字节</span></span><br><span class="line"><span class="keyword">for</span> <span class="variable">b</span> <span class="keyword">in</span> s.<span class="title function_ invoke__">bytes</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector:"></a>Vector:</h3><h4 id="创建-1"><a href="#创建-1" class="headerlink" title="创建:"></a>创建:</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">v</span>: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt; = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();   <span class="comment">// 空 vector</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">v</span> = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];          <span class="comment">// 使用宏 vec! 初始化</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">v</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">v.<span class="title function_ invoke__">push</span>(<span class="number">10</span>);   <span class="comment">// 尾部插入</span></span><br><span class="line">v.<span class="title function_ invoke__">push</span>(<span class="number">20</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素"></a>访问元素</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">v</span> = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, v[<span class="number">0</span>]);        <span class="comment">// 下标访问 (可能 panic 越界)</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, v.<span class="title function_ invoke__">get</span>(<span class="number">2</span>));  <span class="comment">// 安全访问 -&gt; Some(3)</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, v.<span class="title function_ invoke__">get</span>(<span class="number">10</span>)); <span class="comment">// None，不会 panic</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">v</span> = <span class="built_in">vec!</span>[<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line">v[<span class="number">1</span>] = <span class="number">200</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">v</span> = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">v.<span class="title function_ invoke__">pop</span>();          <span class="comment">// 删除最后一个 -&gt; Some(4)</span></span><br><span class="line">v.<span class="title function_ invoke__">remove</span>(<span class="number">0</span>);      <span class="comment">// 删除指定下标 -&gt; 返回删除的元素 (这里删除 1)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="遍历-1"><a href="#遍历-1" class="headerlink" title="遍历"></a>遍历</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">v</span> = <span class="built_in">vec!</span>[<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="variable">x</span> <span class="keyword">in</span> &amp;v &#123;              <span class="comment">// 只读遍历</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="variable">x</span> <span class="keyword">in</span> &amp;<span class="keyword">mut</span> v &#123;          <span class="comment">// 可修改遍历</span></span><br><span class="line">    *x += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap:"></a>HashMap:</h3><p>相当于c++中stl里的map</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// 1. 创建一个 HashMap</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">scores</span> = HashMap::<span class="title function_ invoke__">new</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 增加（插入）元素</span></span><br><span class="line">    scores.<span class="title function_ invoke__">insert</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">10</span>);</span><br><span class="line">    scores.<span class="title function_ invoke__">insert</span>(<span class="string">&quot;Bob&quot;</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 修改（如果 key 已存在，会覆盖旧值）</span></span><br><span class="line">    scores.<span class="title function_ invoke__">insert</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">30</span>);  <span class="comment">// Alice 的值从 10 -&gt; 30</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 访问（用 get，返回 Option&lt;&amp;V&gt;）</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(score) = scores.<span class="title function_ invoke__">get</span>(<span class="string">&quot;Alice&quot;</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;Alice 的分数是 &#123;&#125;&quot;</span>, score);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 删除（移除某个 key）</span></span><br><span class="line">    scores.<span class="title function_ invoke__">remove</span>(<span class="string">&quot;Bob&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, scores);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;前言:&lt;/h1&gt;&lt;p&gt;拖了很久的rust逆向都一直没学,正好编译原理要做rust语法分析器,顺便把rust语言学一下&lt;/p&gt;
&lt;h2 id=&quot;rust相比其他</summary>
      
    
    
    
    <category term="rust逆向基础" scheme="http://example.com/categories/rust%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="rust" scheme="http://example.com/tags/rust/"/>
    
  </entry>
  
</feed>
